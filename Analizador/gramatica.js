/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,18],$V2=[1,9],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,12],$V9=[5,8,34,35,45,46,47,48,49,108],$Va=[5,8,10,14,28,29,34,35,45,46,47,48,49,55,56,57,58,60,61,62,63,64,65,66,67,68,69,72,84,87,88,89,90,91,92,93,97,98,106,107,108,110,113,116,117,118,119,120,126,127,128],$Vb=[10,27,35,50],$Vc=[1,55],$Vd=[1,63],$Ve=[1,66],$Vf=[1,71],$Vg=[1,67],$Vh=[1,68],$Vi=[1,69],$Vj=[1,70],$Vk=[1,72],$Vl=[1,73],$Vm=[1,74],$Vn=[1,75],$Vo=[1,76],$Vp=[1,77],$Vq=[1,78],$Vr=[1,79],$Vs=[1,80],$Vt=[1,81],$Vu=[1,54],$Vv=[1,64],$Vw=[1,56],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,61],$VC=[1,62],$VD=[1,83],$VE=[1,84],$VF=[1,87],$VG=[1,91],$VH=[10,28,29,35,55,56,57,58,60,61,62,63,64,65,66,67,68,69,72,84,87,88,89,90,91,92,93,106,107],$VI=[1,108],$VJ=[1,111],$VK=[1,135],$VL=[1,137],$VM=[1,129],$VN=[1,118],$VO=[1,119],$VP=[1,120],$VQ=[1,121],$VR=[1,122],$VS=[1,123],$VT=[1,124],$VU=[1,125],$VV=[1,126],$VW=[1,127],$VX=[1,128],$VY=[1,130],$VZ=[1,131],$V_=[1,132],$V$=[1,133],$V01=[1,134],$V11=[1,136],$V21=[1,139],$V31=[11,12,27,40,41,51,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,96,105],$V41=[2,74],$V51=[1,152],$V61=[1,171],$V71=[27,38,50],$V81=[1,197],$V91=[1,217],$Va1=[11,12,27,40,41,51,71,72,73,74,75,76,77,78,79,80,83,84,85,86,94,95,96,105],$Vb1=[1,229],$Vc1=[1,231],$Vd1=[1,251],$Ve1=[1,263],$Vf1=[40,41],$Vg1=[1,271],$Vh1=[14,35,45,46,47,48,49],$Vi1=[1,287],$Vj1=[1,288],$Vk1=[1,289],$Vl1=[1,295],$Vm1=[1,296],$Vn1=[1,297],$Vo1=[1,298],$Vp1=[1,299],$Vq1=[11,12,27,40,41,51,71,73,74,75,76,77,78,79,80,94,95,105],$Vr1=[11,12,27,40,41,51,71,73,74,79,80,94,95,105],$Vs1=[11,12,27,40,41,51,71,72,73,74,75,76,77,78,79,80,83,94,95,105],$Vt1=[11,12,27,40,41,51,71,72,73,74,75,76,77,78,79,80,83,85,86,94,95,96,105],$Vu1=[11,40],$Vv1=[11,12,27,38,40,41,51,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,96,105],$Vw1=[11,40,51],$Vx1=[1,338],$Vy1=[1,345],$Vz1=[1,346],$VA1=[14,34,35,45,46,47,48,49,97,98,106,107,108,110,113,118,119,120,126,127,128],$VB1=[14,34,35,45,46,47,48,49,97,98,106,107,108,110,113,116,117,118,119,120,126,127,128],$VC1=[11,12,14,27,34,35,40,41,45,46,47,48,49,51,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,96,97,98,105,106,107,108,110,113,116,117,118,119,120,126,127,128],$VD1=[11,41,105],$VE1=[5,8,14,34,35,45,46,47,48,49,97,98,106,107,108,110,113,116,117,118,119,120,126,127,128],$VF1=[1,459],$VG1=[1,460],$VH1=[1,469],$VI1=[14,34,35,45,46,47,48,49,97,98,106,107,108,110,113,116,118,119,120,126,127,128],$VJ1=[14,119];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCIONES_GLOBALES":6,"VOID_MAIN":7,"TK_VOID":8,"TK_MAIN":9,"TK_par_apertura":10,"TK_par_cierre":11,"TK_corchete_apertura":12,"INSTRUCCION":13,"TK_corchete_cierre":14,"DECLARACION":15,"IMPRESION":16,"ASIGNACION":17,"FUNCIONES_NATIVAS":18,"FUNCIONES":19,"RETURN":20,"CONDICIONALES":21,"BUCLES":22,"LISTA_INSTRUCCIONES":23,"INSTRUCCION2":24,"TIPO_VALOR":25,"TIPO_DECLARACION":26,"TK_punto":27,"TK_PARSE":28,"TK_CADENA":29,"ARREGLO":30,"FIN_LINEA":31,"EXPRESIONARIT":32,"STRUCT":33,"TK_STRUCT":34,"TK_ID":35,"CUERPO_STRUCT":36,"CONTENIDO_STRUCT":37,"TK_igual":38,"FIN_LINEA_STRUCT":39,"TK_coma":40,"TK_pcoma":41,"IGUALACION":42,"PARAMETRO_FUNSION":43,"COND_ARREGLO":44,"TK_STRING":45,"TK_INT":46,"TK_BOOLEAN":47,"TK_DOUBLE":48,"TK_CHAR":49,"TK_llave_apertura":50,"TK_llave_cierre":51,"ASIGNACION_TERNARIA":52,"MAS_VARIABLES":53,"VALORES":54,"TK_NULL":55,"TK_TRUE":56,"TK_FALSE":57,"TK_CARACTER":58,"PARAMETROS":59,"TK_ENTERO":60,"TK_DECIMAL":61,"TK_BEGIN":62,"TK_END":63,"TK_CARETER_OF_POSITION":64,"TK_TOLOWERCASE":65,"TK_SUBSTRING":66,"TK_TOUPPERCASE":67,"TK_LENGTH":68,"TK_TYPEOF":69,"MAS_VALORES_IMPRESION":70,"TK_dos_puntos":71,"TK_MENOS":72,"TK_and":73,"TK_or":74,"TK_mayor_igual":75,"TK_menor_igual":76,"TK_mayor":77,"TK_menor":78,"TK_igualacion":79,"TK_desigual":80,"TK_INCREMENTO":81,"TK_DECREMENTO":82,"TK_MAS":83,"TK_numeral":84,"TK_POR":85,"TK_DIVIDIDO":86,"TK_not":87,"TK_SIN":88,"TK_COS":89,"TK_LOG":90,"TK_TAN":91,"TK_SQRT":92,"TK_POW":93,"TK_concat":94,"TK_potencia":95,"TK_MODULO":96,"TK_PRINT":97,"TK_PRINTLN":98,"FIN_LINEA_ASIGNACION":99,"MAS_ATRIBUTOS":100,"SIGNOS_COMPARACION":101,"FUNCIONES_ARREGLO":102,"TK_PUSH":103,"TK_POP":104,"TK_pregunta":105,"TK_TOINT":106,"TK_TODOUBLE":107,"TK_FUNCTION":108,"MAS_PARAMETROS_FUNSION":109,"TK_RETURN":110,"FUNCION_IF":111,"FUNCION_SWITCH":112,"TK_IF":113,"FUNCION_ELSEIF":114,"FUNCION_ELSE":115,"TK_ELSEIF":116,"TK_ELSE":117,"TK_SWITCH":118,"TK_CASE":119,"TK_BREAK":120,"SENTENCIAS_CASE":121,"TK_DEFAULT":122,"BUCLE_WHILE":123,"BUCLE_DO_WHILE":124,"BUCLE_FOR":125,"TK_WHILE":126,"TK_DO":127,"TK_FOR":128,"TK_IN":129,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_VOID",9:"TK_MAIN",10:"TK_par_apertura",11:"TK_par_cierre",12:"TK_corchete_apertura",14:"TK_corchete_cierre",27:"TK_punto",28:"TK_PARSE",29:"TK_CADENA",34:"TK_STRUCT",35:"TK_ID",38:"TK_igual",40:"TK_coma",41:"TK_pcoma",45:"TK_STRING",46:"TK_INT",47:"TK_BOOLEAN",48:"TK_DOUBLE",49:"TK_CHAR",50:"TK_llave_apertura",51:"TK_llave_cierre",55:"TK_NULL",56:"TK_TRUE",57:"TK_FALSE",58:"TK_CARACTER",60:"TK_ENTERO",61:"TK_DECIMAL",62:"TK_BEGIN",63:"TK_END",64:"TK_CARETER_OF_POSITION",65:"TK_TOLOWERCASE",66:"TK_SUBSTRING",67:"TK_TOUPPERCASE",68:"TK_LENGTH",69:"TK_TYPEOF",71:"TK_dos_puntos",72:"TK_MENOS",73:"TK_and",74:"TK_or",75:"TK_mayor_igual",76:"TK_menor_igual",77:"TK_mayor",78:"TK_menor",79:"TK_igualacion",80:"TK_desigual",81:"TK_INCREMENTO",82:"TK_DECREMENTO",83:"TK_MAS",84:"TK_numeral",85:"TK_POR",86:"TK_DIVIDIDO",87:"TK_not",88:"TK_SIN",89:"TK_COS",90:"TK_LOG",91:"TK_TAN",92:"TK_SQRT",93:"TK_POW",94:"TK_concat",95:"TK_potencia",96:"TK_MODULO",97:"TK_PRINT",98:"TK_PRINTLN",103:"TK_PUSH",104:"TK_POP",105:"TK_pregunta",106:"TK_TOINT",107:"TK_TODOUBLE",108:"TK_FUNCTION",110:"TK_RETURN",113:"TK_IF",116:"TK_ELSEIF",117:"TK_ELSE",118:"TK_SWITCH",119:"TK_CASE",120:"TK_BREAK",122:"TK_DEFAULT",126:"TK_WHILE",127:"TK_DO",128:"TK_FOR",129:"TK_IN"},
productions_: [0,[3,2],[4,3],[4,2],[4,2],[4,1],[7,7],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[23,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[15,2],[15,6],[15,5],[15,5],[15,1],[33,5],[33,6],[36,2],[36,1],[37,5],[37,3],[37,5],[37,3],[39,1],[39,1],[26,2],[26,7],[26,3],[31,1],[25,1],[25,1],[25,1],[25,1],[25,1],[44,2],[42,3],[42,4],[42,3],[42,2],[42,1],[53,3],[53,2],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,3],[54,4],[54,2],[54,1],[54,1],[54,1],[54,1],[54,4],[54,3],[54,6],[54,3],[54,3],[54,4],[54,1],[30,3],[30,3],[30,4],[30,4],[30,5],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,2],[32,3],[32,3],[32,4],[32,3],[32,3],[32,3],[32,2],[32,4],[32,4],[32,4],[32,4],[32,4],[32,6],[32,4],[32,2],[32,3],[32,3],[32,3],[32,3],[32,1],[16,5],[16,5],[16,6],[16,6],[16,6],[16,6],[70,3],[70,3],[70,2],[70,2],[17,4],[17,3],[17,5],[17,5],[17,6],[17,4],[17,7],[17,6],[17,5],[17,6],[17,4],[17,3],[17,3],[17,4],[17,3],[17,5],[17,4],[17,2],[100,3],[100,2],[102,6],[102,5],[102,5],[99,1],[99,2],[52,5],[52,4],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[59,3],[59,2],[59,1],[18,4],[18,4],[19,8],[19,8],[19,9],[19,7],[43,2],[43,3],[43,2],[43,3],[109,4],[109,4],[109,3],[109,3],[109,3],[109,2],[20,3],[20,6],[20,2],[21,1],[21,1],[111,7],[111,8],[111,8],[111,5],[111,6],[111,6],[114,8],[114,9],[114,8],[114,7],[115,4],[115,2],[112,12],[112,13],[112,15],[121,7],[121,10],[121,6],[22,1],[22,1],[22,1],[123,7],[124,9],[125,10],[125,10],[125,7],[125,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log($$[$0-1]); return $$[$0-1];
break;
case 2:
$$[$0-2].concat($$[$0-1]); $$[$0-2].concat($$[$0]); this.$ = $$[$0-2]
break;
case 3:
this.$ = $$[$0].concat($$[$0-1]);
break;
case 4:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 5:
this.$ =  [$$[$0]]
break;
case 6:
this.$ = new Instrucciones($$[$0-1],this._$.first_line,this._$.first_column,"MAIN")
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 24: case 25: case 26:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 27: case 28: case 29:
this.$ = [$$[$0]]
break;
case 23:
this.$ = new Instrucciones($$[$0],this._$.first_line,this._$.first_column,null)
break;
case 30: case 31: case 32: case 33: case 34: case 35: case 36:
this.$ = new Instrucciones([$$[$0]],this._$.first_line,this._$.first_column,null)
break;
case 37:
var asignacion = $$[$0]; asignacion.tipo = $$[$0-1]; this.$ = asignacion
break;
case 52:
var asignacion = $$[$0]; asignacion.id = $$[$0-1]; this.$ = asignacion
break;
case 56:
this.$= Tipo.STRING
break;
case 57:
this.$= Tipo.INTEGER
break;
case 58:
this.$= Tipo.BOOLEAN
break;
case 59:
this.$= Tipo.DOUBLE
break;
case 60:
this.$= Tipo.CHAR
break;
case 62:
this.$ = new Declaracion($$[$0-1],this._$.first_line,this._$.first_column,null,null)
break;
case 69:
console.log("cadena"+$$[$0]);var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.STRING,this._$.first_line,this._$.first_column);
break;
case 71:
this.$ = new Literal(true,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 72:
this.$ = new Literal(false,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 73:
var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.CHAR,this._$.first_line,this._$.first_column);
break;
case 74:
this.$ = new Acceso($$[$0],this._$.first_line,this._$.first_column);
break;
case 78:
this.$ = new Literal(parseInt($$[$0]),Tipo.INTEGER,this._$.first_line,this._$.first_column)
break;
case 79:
this.$ = new Literal(parseFloat($$[$0]),Tipo.DOUBLE,this._$.first_line,this._$.first_column);
break;
case 94:
 this.$ = -Math.abs($$[$0]); 
break;
case 95:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.AND,this._$.first_line,this._$.first_column);
break;
case 96:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.OR,this._$.first_line,this._$.first_column);
break;
case 97:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 98:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 99:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_QUE,this._$.first_line,this._$.first_column);
break;
case 100:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_QUE,this._$.first_line,this._$.first_column);
break;
case 101:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALDAD,this._$.first_line,this._$.first_column);
break;
case 102:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.DESIGUALDAD,this._$.first_line,this._$.first_column);
break;
case 105:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA,this._$.first_line,this._$.first_column)
break;
case 106:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA,this._$.first_line,this._$.first_column)
break;
case 108:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION,this._$.first_line,this._$.first_column)
break;
case 109:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION,this._$.first_line,this._$.first_column)
break;
case 110:
this.$ = $$[$0-1]
break;
case 111:
this.$ = new Logica($$[$0],$$[$0],TipoLogica.NOT,this._$.first_line,this._$.first_column);
break;
case 112:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.SENO,this._$.first_line,this._$.first_column)
break;
case 113:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.COSENO,this._$.first_line,this._$.first_column)
break;
case 114:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.LOGARITMO,this._$.first_line,this._$.first_column)
break;
case 115:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.TANGENTE,this._$.first_line,this._$.first_column)
break;
case 116:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.RAIZ,this._$.first_line,this._$.first_column)
break;
case 117:
this.$ = new Aritmetica($$[$0-3],$$[$0-1],TipoAritmetica.POW,this._$.first_line,this._$.first_column)
break;
case 120:
 var a = $$[$0-2]; var al=a.length; var b = $$[$0]; var bl = b.length; var c = a.substring(1,al-1); var d = b.substring(1,bl-1); var total = c+d;  this.$ = total;
break;
case 121:
 this.$ = new Potencia($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 123:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO,this._$.first_line,this._$.first_column);
break;
case 124: case 134:
this.$ = $$[$0];
break;
case 125:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,false);
break;
case 126:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,true);
break;
case 129:
var a = $$[$0-2].valor; var b = $$[$0-3].valor; var c = b+a; $$[$0-3].valor = c;  this.$ = new Print($$[$0-3],this._$.first_line,this._$.first_column,false);
break;
case 130:
var a = $$[$0-2].valor; var b = $$[$0-3].valor; var c = b+a; $$[$0-3].valor = c;  this.$ = new Print($$[$0-3],this._$.first_line,this._$.first_column,true);
break;
case 131:
var a = $$[$0-2].valor; var b = $$[$0].valor; $$[$0-2].valor= " "+a+" "+b; this.$ = $$[$0-2];
break;
case 135:
this.$ = new Asignacion($$[$0-1],this._$.first_line,this._$.first_column,$$[$0-3])
break;
case 190: case 191:
this.$ = $$[$0]
break;
case 192:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 193: case 194:
$$[$0-2].nombre = "AmbienteIf"; this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 195:
$$[$0].nombre = "AmbienteIf"; this.$ = new If($$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column)
break;
case 196: case 197:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-3],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column)
break;
case 198:

																																									$$[$0-1].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column); 
																																									var valorcondicion = $$[$0-7];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse; 
																																									this.$ = $$[$0-7]
																																								
break;
case 199:

																																									$$[$0-2].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
																																									var valorcondicion = $$[$0-8];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse;
																																									this.$ = $$[$0-8]
																																								
break;
case 200:
$$[$0-2].nombre = "AmbienteElseIf"; 
																																								this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 201:
$$[$0-1].nombre = "AmbienteElseIf";
																																								this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 202:
$$[$0-1].nombre = "AmbienteElse";this.$ = $$[$0-1]
break;
case 203:
$$[$0].nombre = "AmbienteElse";this.$ = $$[$0]
break;
case 204:
$$[$0-3].nombre= "AmbienteSwitch";
																																																											this.$ = new Switch( $$[$0-9],$$[$0-5],$$[$0-3],null,this._$.first_line,this._$.first_column);
																																																											
break;
case 205:
$$[$0-4].nombre= "AmbienteSwitch";
																																																											$$[$0-1].condicionswitch = $$[$0-10];  this.$ = new Switch( $$[$0-10],$$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column);
																																																											
break;
case 206:
$$[$0-6].nombre= "AmbienteSwitch";
																																																											$$[$0].condicionswitch = $$[$0-12];  this.$ = new Switch( $$[$0-12],$$[$0-8],$$[$0-6],$$[$0],this._$.first_line,this._$.first_column);
																																																											
break;
case 207:

																																			console.log("entra en case:");
																																			$$[$0-3].nombre= "AmbienteCase";
																																			var Vcase = new Switch(null,$$[$0-4],$$[$0-2],null,this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-6];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			$$[$0-6].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			console.log("sube el valor nulo creo: "+$$[$0-6].condicionswitch+"  aca tambien vacio creo anterior "+valorcondicion.condicionswitch);
																																			this.$ = $$[$0-6];
																																		
break;
case 208:

																																			//console.log("case: "+$$[$0-8].valor);
																																			$$[$0-6].nombre= "AmbienteCase";
																																			var Vcase = new Switch(null,$$[$0-7],$$[$0-5],$$[$0],this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-9];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			if(valorcondicion.condicionswitch == null){
																																				console.log("la condicion switch de la ultima iteracion es null")
																																			}
																																			$$[$0-9].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			this.$ = $$[$0-9];
																																		
break;
case 209:
console.log("entra al solitario case");$$[$0-2].nombre= "AmbienteCase";this.$ = new Switch(null,$$[$0-4],$$[$0-2],null,this._$.first_line,this._$.first_column)
break;
case 213:
this.$ = new While($$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 214:
this.$ = new DoWhile($$[$0-2],$$[$0-6],this._$.first_line,this._$.first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,15:6,17:5,19:7,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,108:$V8},{1:[3]},{5:[1,19]},{7:20,8:$V0,15:22,17:21,19:23,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,108:$V8},{5:[2,5],6:24,15:6,17:5,19:7,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,108:$V8},o($V9,[2,27]),o($V9,[2,28]),o($V9,[2,29]),{9:[1,25]},{10:[1,30],27:[1,35],35:[1,27],38:[1,26],50:[1,33],75:[1,36],76:[1,37],77:[1,38],78:[1,39],79:[1,40],80:[1,41],81:[1,32],82:[1,31],100:28,101:29,102:34},{10:[1,44],26:42,27:[1,43],35:[1,45],44:46,50:[1,47]},o($Va,[2,41]),{35:[1,48]},o($Vb,[2,56]),o($Vb,[2,57]),o($Vb,[2,58]),o($Vb,[2,59]),o($Vb,[2,60]),{35:[1,49]},{1:[2,1]},{5:[2,4],6:50,15:6,17:5,19:7,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,108:$V8},o($V9,[2,24]),o($V9,[2,25]),o($V9,[2,26]),{5:[2,3],15:22,17:21,19:23,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,108:$V8},{10:[1,51]},{10:$Vc,18:82,28:$Vd,29:$Ve,32:52,35:$Vf,50:[1,53],54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{31:85,38:[1,86],41:$VF},{27:[1,90],30:89,38:[1,88],50:$VG},{10:$Vc,18:82,28:$Vd,29:$Ve,32:92,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,11:[1,94],18:82,28:$Vd,29:$Ve,32:93,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{31:95,41:$VF},{31:96,41:$VF},{10:$Vc,18:82,28:$Vd,29:$Ve,32:97,35:$Vf,51:[1,98],54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Va,[2,152]),{35:[1,99],68:[1,102],103:[1,100],104:[1,101]},o($VH,[2,162]),o($VH,[2,163]),o($VH,[2,164]),o($VH,[2,165]),o($VH,[2,166]),o($VH,[2,167]),o($Va,[2,37]),{28:[1,103]},{10:$Vc,18:82,28:$Vd,29:$Ve,30:104,32:105,35:$Vf,50:$VG,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:[1,107],31:110,38:$VI,40:$VJ,41:$VF,42:106,53:109},{35:[1,112]},{51:[1,113]},{10:[1,114]},{12:[1,115]},{5:[2,2],15:22,17:21,19:23,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,108:$V8},{11:[1,116]},{27:$VK,41:$VL,52:138,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11,99:117,105:$V21},{10:$Vc,18:82,28:$Vd,29:$Ve,32:140,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:141,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:142,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:143,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:[1,144]},{10:[1,145]},{10:[1,146]},{10:[1,147]},{10:[1,148]},{10:[1,149]},{10:[1,150]},{10:$Vc,18:82,28:$Vd,29:$Ve,32:151,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($V31,[2,124]),o($V31,[2,69]),o($V31,[2,70]),o($V31,[2,71]),o($V31,[2,72]),o($V31,[2,73]),o($V31,$V41,{30:153,10:$V51,50:$VG}),o($V31,[2,78]),o($V31,[2,79]),o($V31,[2,80]),o($V31,[2,81]),{10:[1,154]},{10:[1,155]},{10:[1,156]},{10:[1,157]},{10:[1,158]},{10:[1,159]},o($V31,[2,88]),{10:[1,160]},{10:[1,161]},o($Va,[2,136]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:162,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Va,[2,55]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:163,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{38:[1,164]},{35:[1,165]},{10:$Vc,18:82,28:$Vd,29:$Ve,30:167,32:166,35:$Vf,50:$VG,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{27:$VK,41:$VL,52:138,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11,99:168,105:$V21},{11:[1,169],27:$VK,40:$V61,70:170,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{31:172,41:$VF},o($Va,[2,146]),o($Va,[2,147]),{27:$VK,51:[1,173],72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o($Va,[2,149],{53:109,31:110,42:174,38:$VI,40:$VJ,41:$VF}),o($V71,[2,154]),{10:[1,175]},{10:[1,176]},{10:[1,177]},{10:[1,178]},{11:[1,179]},{11:[1,180],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o($Va,[2,52]),{25:182,35:[1,183],43:181,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{10:$Vc,18:82,28:$Vd,29:$Ve,30:185,32:184,35:$Vf,50:$VG,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{31:186,40:[1,187],41:$VF},o($Va,[2,66]),{35:[1,188]},{31:110,38:$VI,40:$VJ,41:$VF,42:189,53:109},{35:[2,61]},{11:[1,192],25:182,35:[1,191],43:190,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{14:[1,193],25:196,35:$V81,36:194,37:195,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{12:[1,198]},o($Va,[2,135]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:199,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:200,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:201,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:202,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:203,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:204,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:205,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:206,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($V31,[2,103]),o($V31,[2,104]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:207,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:208,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{85:[1,209]},{10:$Vc,18:82,28:$Vd,29:$Ve,32:210,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:211,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:212,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:213,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:214,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:215,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Va,[2,158]),{31:216,41:$VF,105:$V91},{10:$Vc,18:82,28:$Vd,29:$Ve,32:218,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{27:$VK,40:$V61,51:[1,220],70:219,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o($V31,[2,94]),{11:[1,221],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o($Va1,[2,111],{81:$VV,82:$VW}),{10:$Vc,18:82,28:$Vd,29:$Ve,32:222,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:223,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:224,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:225,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:226,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:227,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:228,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Va1,[2,119],{81:$VV,82:$VW}),{10:$Vc,11:$Vb1,18:82,28:$Vd,29:$Ve,32:232,35:$Vf,40:$Vc1,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:230,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($V31,[2,77]),{18:82,29:$Ve,35:$Vf,54:233,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,106:$VD,107:$VE},{11:[1,234]},{18:82,29:$Ve,35:$Vf,54:235,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,106:$VD,107:$VE},{11:[1,236]},{11:[1,237]},{10:$Vc,18:82,28:$Vd,29:$Ve,32:238,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:239,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:240,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{27:$VK,41:$VL,52:138,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11,99:241,105:$V21},{27:$VK,31:242,41:$VF,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{10:$Vc,18:82,28:$Vd,29:$Ve,32:243,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($V71,[2,153]),{27:$VK,40:$V61,51:[1,244],70:245,71:[1,246],72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{40:$V61,51:[1,247],70:248},o($Va,[2,140]),{31:249,41:$VF},{11:[1,250],40:$Vd1},{10:$Vc,18:82,28:$Vd,29:$Ve,30:252,32:253,35:$Vf,50:$VG,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Va,[2,145]),o($Va,[2,148],{53:109,31:110,42:254,38:$VI,40:$VJ,41:$VF}),o($Va,[2,151]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:255,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{11:[1,256]},{11:[1,257]},{29:[1,258]},{31:259,41:$VF},{31:260,41:$VF},{11:[1,261]},{35:[1,262]},{35:$Ve1},{27:$VK,31:264,41:$VF,52:265,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11,105:$V21},{31:266,41:$VF},o($Va,[2,65]),{35:[1,267]},o($Vf1,[2,68]),o($Va,[2,54]),{11:[1,268]},{11:[1,269],35:$Ve1,40:$Vg1,109:270},{12:[1,272]},{31:273,41:$VF},{14:[1,274],25:196,35:$V81,37:275,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},o($Vh1,[2,45]),{35:[1,276]},{35:[1,277]},{13:278,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},o([11,12,27,40,41,51,71,73,74,105],[2,95],{72:$VM,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11}),o([11,12,27,40,41,51,71,74,105],[2,96],{72:$VM,73:$VN,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11}),o($Vq1,[2,97],{72:$VM,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,96:$V11}),o($Vq1,[2,98],{72:$VM,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,96:$V11}),o($Vq1,[2,99],{72:$VM,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,96:$V11}),o($Vq1,[2,100],{72:$VM,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,96:$V11}),o($Vr1,[2,101],{72:$VM,75:$VP,76:$VQ,77:$VR,78:$VS,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,96:$V11}),o($Vr1,[2,102],{72:$VM,75:$VP,76:$VQ,77:$VR,78:$VS,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,96:$V11}),o($Vs1,[2,105],{81:$VV,82:$VW,84:$VY,85:$VZ,86:$V_,96:$V11}),o($Vs1,[2,106],{81:$VV,82:$VW,84:$VY,85:$VZ,86:$V_,96:$V11}),{10:$Vc,18:82,28:$Vd,29:$Ve,32:300,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Vt1,[2,108],{81:$VV,82:$VW,84:$VY}),o($Vt1,[2,109],{81:$VV,82:$VW,84:$VY}),o([11,12,27,40,41,51,71,73,74,94,95,105],[2,120],{72:$VM,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,96:$V11}),o([11,12,27,40,41,51,71,73,74,95,105],[2,121],{72:$VM,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,96:$V11}),o([11,12,27,40,41,51,71,105],[2,122],{72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11}),o($Vt1,[2,123],{81:$VV,82:$VW,84:$VY}),o($Va,[2,159]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:301,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{27:$VK,71:[1,302],72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{40:$Vd1,51:[1,303]},{41:$VL,52:138,99:304,105:$V21},o($V31,[2,110]),{11:[1,305],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{11:[1,306],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{11:[1,307],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{11:[1,308],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{11:[1,309],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{27:$VK,40:[1,310],72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{11:[1,311],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o($V31,[2,75]),{11:[1,312],40:[1,313]},{10:$Vc,18:82,28:$Vd,29:$Ve,32:314,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Vu1,[2,170],{27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11}),{11:[1,315]},o($V31,[2,83]),{40:[1,316]},o($V31,[2,85]),o($V31,[2,86]),{11:[1,317],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{11:[1,318],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{11:[1,319],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o($Va,[2,137]),o($Va,[2,138]),{27:$VK,31:320,41:$VF,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o($Vv1,[2,89]),{40:$Vd1,51:[1,321]},{10:$Vc,18:82,28:$Vd,29:$Ve,32:322,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Vv1,[2,90]),{40:$Vd1,51:[1,323]},o($Va,[2,143]),{31:324,41:$VF},{10:$Vc,18:82,28:$Vd,29:$Ve,30:326,32:325,35:$Vf,50:$VG,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Vw1,[2,133]),o($Vw1,[2,134],{27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11}),o($Va,[2,150]),{11:[1,327],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{41:[1,328]},{41:[1,329]},{11:[1,330]},o($Va,[2,39]),o($Va,[2,40]),{12:[1,331]},{11:[2,177],40:$Vg1,109:332},{11:[2,179],40:$Vg1,109:333},o($Va,[2,62]),{31:334,41:$VF,105:$V91},o($Va,[2,64]),o($Vf1,[2,67]),{12:[1,335]},{12:[1,336]},{11:[1,337],40:$Vx1},{25:339,35:[1,340],45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{13:341,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},o($Va,[2,42]),{31:342,41:$VF},o($Vh1,[2,44]),{38:[1,343],39:344,40:$Vy1,41:$Vz1},{38:[1,347],39:348,40:$Vy1,41:$Vz1},{14:[1,349],15:350,16:351,17:352,18:353,19:354,20:355,21:356,22:357,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},o($VA1,[2,15]),o($VA1,[2,16]),o($VA1,[2,17]),o($VA1,[2,18]),o($VA1,[2,19]),o($VA1,[2,20]),o($VA1,[2,21]),o($VA1,[2,22]),{10:[1,358]},{10:[1,359]},{10:$Vc,18:82,28:$Vd,29:$Ve,31:362,32:360,35:[1,361],41:$VF,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($VA1,[2,190]),o($VA1,[2,191]),o($VB1,[2,210]),o($VB1,[2,211]),o($VB1,[2,212]),{10:[1,363]},{10:[1,364]},{10:[1,365]},{12:[1,366]},{10:[1,367],35:[1,368]},o($Va1,[2,107],{81:$VV,82:$VW}),{27:$VK,71:[1,369],72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{10:$Vc,18:82,28:$Vd,29:$Ve,32:370,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{41:$VL,52:138,99:371,105:$V21},o($Va,[2,142]),o($V31,[2,112]),o($V31,[2,113]),o($V31,[2,114]),o($V31,[2,115]),o($V31,[2,116]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:372,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($V31,[2,118]),o($V31,[2,76]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:373,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Vu1,[2,169],{27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11}),o($V31,[2,82]),{18:82,29:$Ve,35:$Vf,54:374,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,106:$VD,107:$VE},o($V31,[2,87]),o($VC1,[2,171]),o($VC1,[2,172]),o($Va,[2,139]),o($Vv1,[2,91]),{27:$VK,51:[1,375],72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o($Vv1,[2,92]),o($Va,[2,144]),o($Vw1,[2,131],{27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11}),o($Vw1,[2,132]),{41:[1,376]},o($Va,[2,156]),o($Va,[2,157]),o($Va,[2,38]),{13:377,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{11:[2,178],40:$Vx1},{11:[2,180],40:$Vx1},o($Va,[2,63]),{13:378,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{13:379,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{12:[1,380]},{25:381,35:[1,382],45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{35:[1,383]},o($Vu1,[2,186],{35:[1,384]}),{14:[1,385],15:350,16:351,17:352,18:353,19:354,20:355,21:356,22:357,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},o($Va,[2,43]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:386,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Vh1,[2,47]),o($Vh1,[2,50]),o($Vh1,[2,51]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:387,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($Vh1,[2,49]),o([5,34,35,45,46,47,48,49,108],[2,6]),o($VA1,[2,7]),o($VA1,[2,8]),o($VA1,[2,9]),o($VA1,[2,10]),o($VA1,[2,11]),o($VA1,[2,12]),o($VA1,[2,13]),o($VA1,[2,14]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:388,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:389,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{27:$VK,31:390,41:$VF,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o([27,41,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,96],$V41,{30:153,10:[1,391],50:$VG}),o($VB1,[2,189]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:392,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:393,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:394,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:395,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{15:397,17:398,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{129:[1,399]},{10:$Vc,18:82,28:$Vd,29:$Ve,32:400,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($VD1,[2,161],{27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11}),o($Va,[2,141]),{11:[1,401],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o($Vu1,[2,168],{27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11}),{11:[1,402]},o($Vv1,[2,93]),o($Va,[2,155]),{14:[1,403],15:350,16:351,17:352,18:353,19:354,20:355,21:356,22:357,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{14:[1,404],15:350,16:351,17:352,18:353,19:354,20:355,21:356,22:357,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{14:[1,405],15:350,16:351,17:352,18:353,19:354,20:355,21:356,22:357,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{13:406,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{35:[1,407]},o($Vu1,[2,183],{35:[1,408]}),o($Vu1,[2,184]),o($Vu1,[2,185]),o($VE1,[2,176]),{27:$VK,39:409,40:$Vy1,41:$Vz1,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{27:$VK,39:410,40:$Vy1,41:$Vz1,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{11:[1,411],27:$VK,40:$V61,52:412,70:413,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11,105:$V21},{11:[1,414],27:$VK,40:$V61,52:415,70:416,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11,105:$V21},o($VB1,[2,187]),{10:$Vc,11:$Vb1,18:82,25:182,28:$Vd,29:$Ve,32:232,35:[1,418],40:$Vc1,43:417,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:230,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{11:[1,419],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{11:[1,420],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{11:[1,421],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{14:[1,422]},o([14,119,120],[2,23],{25:10,33:11,111:290,112:291,123:292,124:293,125:294,15:350,16:351,17:352,18:353,19:354,20:355,21:356,22:357,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,113:$Vl1,118:$Vm1,126:$Vn1,127:$Vo1,128:$Vp1}),{10:$Vc,18:82,28:$Vd,29:$Ve,32:423,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:424,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,30:426,32:425,35:$Vf,50:$VG,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($VD1,[2,160],{27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11}),o($V31,[2,117]),o($V31,[2,84]),o($Va,[2,53]),o($VE1,[2,173]),o($VE1,[2,174]),{14:[1,427],15:350,16:351,17:352,18:353,19:354,20:355,21:356,22:357,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},o($Vu1,[2,181]),o($Vu1,[2,182]),o($Vh1,[2,46]),o($Vh1,[2,48]),{31:428,41:$VF},{11:[1,429],105:$V91},{11:[1,430],40:$Vd1},{31:431,41:$VF},{11:[1,432],105:$V91},{11:[1,433],40:$Vd1},{11:[1,434]},o([11,27,40,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,96],$V41,{30:153,10:$V51,35:$Ve1,50:$VG}),{12:[1,435],15:437,16:438,17:439,18:440,19:441,20:442,22:443,24:436,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{12:[1,444]},{12:[1,445]},{126:[1,446]},{27:$VK,41:[1,447],72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{27:$VK,41:[1,448],72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{12:[1,449],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{12:[1,450]},o($VE1,[2,175]),o($VB1,[2,125]),{31:451,41:$VF},{31:452,41:$VF},o($VB1,[2,126]),{31:453,41:$VF},{31:454,41:$VF},{31:455,41:$VF},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:456,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},o($VA1,[2,195],{114:457,115:458,116:$VF1,117:$VG1}),o($VB1,[2,30]),o($VB1,[2,31]),o($VB1,[2,32]),o($VB1,[2,33]),o($VB1,[2,34]),o($VB1,[2,35]),o($VB1,[2,36]),{119:[1,461]},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:462,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{10:[1,463]},{10:$Vc,18:82,28:$Vd,29:$Ve,32:464,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{10:$Vc,18:82,28:$Vd,29:$Ve,32:465,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:466,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:467,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},o($VB1,[2,127]),o($VB1,[2,129]),o($VB1,[2,128]),o($VB1,[2,130]),o($VB1,[2,188]),{14:[1,468]},o($VA1,[2,196],{116:$VH1}),o($VA1,[2,197]),{10:[1,470]},{12:[1,471],15:437,16:438,17:439,18:440,19:441,20:442,22:443,24:472,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{10:$Vc,18:82,28:$Vd,29:$Ve,32:473,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{14:[1,474]},{10:$Vc,18:82,28:$Vd,29:$Ve,32:475,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{11:[1,476],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{11:[1,477],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{14:[1,478]},{14:[1,479]},o($VA1,[2,192],{114:480,115:481,116:$VF1,117:$VG1}),{10:[1,482]},{10:$Vc,18:82,28:$Vd,29:$Ve,32:483,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{15:437,16:438,17:439,18:440,19:441,20:442,22:443,24:484,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},o($VI1,[2,203]),{27:$VK,71:[1,485],72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o($VB1,[2,213]),{11:[1,486],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{12:[1,487]},{12:[1,488]},o($VB1,[2,217]),o($VB1,[2,218]),o($VA1,[2,193],{116:$VH1}),o($VA1,[2,194]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:489,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{11:[1,490],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{14:[1,491]},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:492,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{41:[1,493]},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:494,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:495,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{11:[1,496],27:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{12:[1,497]},o($VI1,[2,202]),{120:[1,498]},o($VB1,[2,214]),{14:[1,499]},{14:[1,500]},{12:[1,501]},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:502,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{41:[1,503]},o($VB1,[2,215]),o($VB1,[2,216]),{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:504,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{14:[1,505]},{14:[1,506],119:[1,509],121:507,122:[1,508]},{14:[1,510]},o($VI1,[2,201],{115:511,117:$VG1}),o($VA1,[2,204]),{14:[1,512],119:[1,513]},{71:[1,514]},{10:$Vc,18:82,28:$Vd,29:$Ve,32:515,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},o($VI1,[2,198],{115:516,117:$VG1}),o($VI1,[2,200]),o($VA1,[2,205]),{10:$Vc,18:82,28:$Vd,29:$Ve,32:517,35:$Vf,54:65,55:$Vg,56:$Vh,57:$Vi,58:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,84:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA,92:$VB,93:$VC,106:$VD,107:$VE},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:518,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{27:$VK,71:[1,519],72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},o($VI1,[2,199]),{27:$VK,71:[1,520],72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,85:$VZ,86:$V_,94:$V$,95:$V01,96:$V11},{14:[1,521]},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:522,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:523,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},o($VA1,[2,206]),{120:[1,524]},{120:[1,525]},{41:[1,526]},{41:[1,527]},o($VJ1,[2,209]),o($VJ1,[2,207],{122:[1,528]}),{71:[1,529]},{13:396,15:279,16:280,17:281,18:282,19:283,20:284,21:285,22:286,23:530,25:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vi1,98:$Vj1,106:$VD,107:$VE,108:$V8,110:$Vk1,111:290,112:291,113:$Vl1,118:$Vm1,123:292,124:293,125:294,126:$Vn1,127:$Vo1,128:$Vp1},o($VJ1,[2,208])],
defaultActions: {19:[2,1],113:[2,61]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	//para el objeto de impresion
	function FImpresion(_tipoimpresion,_valorimpresion,_raro){
		return {tipo:_tipoimpresion, valor:_valorimpresion,What:_raro};
	}

	//para declaraciones de funciones
	function FDeclaracion(_tipo,_nombre,_valor){
		return {tipo:_tipo,nombre:_nombre,valorvar:_valor};
	}

	//almacenamiento de errores
	function FErrores(_tipo,_caracter,_fila,_columna,_descrip){
		return{tipo:_tipo,Caracter:_caracter,Fila:_fila,Columna:_columna,Descripcion:_descrip};
	}

	var GexpresionSwitch ;


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://return 'TK_COMENTARIO';// comentario simple línea
break;
case 1://return 'TK_COMENTARIO_MULTI';//; comentario multiple líneas
break;
case 2:return 55;
break;
case 3:return 46;
break;
case 4:return 48;
break;
case 5:return 47;
break;
case 6:return 49;
break;
case 7:return 45;
break;
case 8:return 34;
break;
case 9:return 93;
break;
case 10:return 92;
break;
case 11:return 88;
break;
case 12:return 89;
break;
case 13:return 91;
break;
case 14:return 90;
break;
case 15:return 64;
break;
case 16:return 66;
break;
case 17:return 68;
break;
case 18:return 67;
break;
case 19:return 65;
break;
case 20:return 97;
break;
case 21:return 98;
break;
case 22:return 28;
break;
case 23:return 106;
break;
case 24:return 107;
break;
case 25:return 69;
break;
case 26:return 108;
break;
case 27:return 110;
break;
case 28:return 113;
break;
case 29:return 116;
break;
case 30:return 117;
break;
case 31:return 118;
break;
case 32:return 119;
break;
case 33:return 122;
break;
case 34:return 120;
break;
case 35:return 126;
break;
case 36:return 127;
break;
case 37:return 128;
break;
case 38:return 129;
break;
case 39:return 103;
break;
case 40:return 104;
break;
case 41:return 62;
break;
case 42:return 63;
break;
case 43:return 'TK_CONTINUE';
break;
case 44:return 56;
break;
case 45:return 57;
break;
case 46:return 9;
break;
case 47:return 8;
break;
case 48:return 81
break;
case 49:return 82
break;
case 50:return 83;
break;
case 51:return 72;
break;
case 52:return 85;
break;
case 53:return 86;
break;
case 54:return 96
break;
case 55:return 10;
break;
case 56:return 11;
break;
case 57:return 12;
break;
case 58:return 14;
break;
case 59:return 50;
break;
case 60:return 51;
break;
case 61:return 71;
break;
case 62:return 41;
break;
case 63:return 40;
break;
case 64:return 27;
break;
case 65:return 79;
break;
case 66:return 38;
break;
case 67:return 80;
break;
case 68:return 75;
break;
case 69:return 76;
break;
case 70:return 78;
break;
case 71:return 77;
break;
case 72:return 73;
break;
case 73:return 74;
break;
case 74:return 87;
break;
case 75:return 94;
break;
case 76:return 95;
break;
case 77:return 84;
break;
case 78:return 'TK_dolar';
break;
case 79:return 105;
break;
case 80://return 'TK_SALTO_LINEA'
break;
case 81:// se ignoran espacios en blanco
break;
case 82:return 61; 
break;
case 83:return 60;   
break;
case 84:return 29;
break;
case 85:return 58;
break;
case 86:return 35;
break;
case 87:return 5;
break;
case 88:lisErr.push({err: 'Error Lexico', lex: yy_.yytext, fil: yy_.yylloc.first_line, col: yy_.yylloc.first_column, des:'Simbolo Desconocido'}); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*(\*(?!\/)|[^*])*\*\/\n)/i,/^(?:null\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:struct\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:log10\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:subString\b)/i,/^(?:length\b)/i,/^(?:toUppercase\b)/i,/^(?:toLowercase\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:parse\b)/i,/^(?:toInt\b)/i,/^(?:toDouble\b)/i,/^(?:typeof\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:else if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:continue\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
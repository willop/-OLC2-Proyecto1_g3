/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,8],$V2=[1,12],$V3=[1,18],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[5,8,33,37,46,47,48,49,50],$Va=[1,31],$Vb=[1,33],$Vc=[1,32],$Vd=[5,8,10,14,19,29,30,33,37,46,47,48,49,50,51,54,55,56,57,59,60,61,62,63,64,65,66,67,68,72,84,87,88,89,90,91,92,93,99,100,106,107,108,109,110,113,116,117,118,119,121,125,126,127],$Ve=[2,131],$Vf=[10,28,33,51],$Vg=[1,51],$Vh=[1,59],$Vi=[1,63],$Vj=[1,80],$Vk=[1,61],$Vl=[1,64],$Vm=[1,65],$Vn=[1,66],$Vo=[1,67],$Vp=[1,69],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,50],$VA=[1,60],$VB=[1,52],$VC=[1,53],$VD=[1,54],$VE=[1,55],$VF=[1,56],$VG=[1,57],$VH=[1,58],$VI=[1,81],$VJ=[1,82],$VK=[10,29,30,33,51,54,55,56,57,59,60,61,62,63,64,65,66,67,68,72,84,87,88,89,90,91,92,93,106,107],$VL=[1,113],$VM=[1,102],$VN=[1,103],$VO=[1,104],$VP=[1,105],$VQ=[1,106],$VR=[1,107],$VS=[1,108],$VT=[1,109],$VU=[1,110],$VV=[1,111],$VW=[1,112],$VX=[1,114],$VY=[1,115],$VZ=[1,116],$V_=[1,117],$V$=[1,118],$V01=[1,119],$V11=[1,120],$V21=[11,12,42,43,52,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,96,97,98],$V31=[1,146],$V41=[10,11,12,28,40,42,43,51,52,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,96,97,98],$V51=[1,166],$V61=[11,12,42,43,52,72,73,74,75,76,77,78,79,80,83,84,85,86,94,95,96,97,98],$V71=[42,52],$V81=[1,206],$V91=[1,215],$Va1=[42,43],$Vb1=[14,33,46,47,48,49,50],$Vc1=[1,231],$Vd1=[1,236],$Ve1=[1,237],$Vf1=[1,238],$Vg1=[1,239],$Vh1=[1,240],$Vi1=[1,246],$Vj1=[1,247],$Vk1=[1,248],$Vl1=[1,249],$Vm1=[1,250],$Vn1=[11,12,42,43,52,73,74,75,76,77,78,79,80,94,95,97,98],$Vo1=[11,12,42,43,52,73,74,79,80,94,95,97,98],$Vp1=[11,12,42,43,52,72,73,74,75,76,77,78,79,80,83,94,95,97,98],$Vq1=[11,12,42,43,52,72,73,74,75,76,77,78,79,80,83,85,86,94,95,96,97,98],$Vr1=[11,42,52],$Vs1=[1,274],$Vt1=[1,285],$Vu1=[1,286],$Vv1=[1,294],$Vw1=[14,19,33,37,46,47,48,49,50,99,100,106,107,108,109,110,113,118,119,121,125,126,127],$Vx1=[14,19,33,37,46,47,48,49,50,99,100,106,107,108,109,110,113,116,117,118,119,121,125,126,127],$Vy1=[11,12,14,19,33,37,42,43,46,47,48,49,50,52,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,96,97,98,99,100,106,107,108,109,110,113,116,117,118,119,121,125,126,127],$Vz1=[11,42],$VA1=[1,366],$VB1=[1,380],$VC1=[1,381],$VD1=[1,391],$VE1=[14,19,33,37,46,47,48,49,50,99,100,106,107,108,109,110,113,116,118,119,121,125,126,127],$VF1=[14,119];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"VOID_MAIN":6,"INSTRUCCIONES_GLOBALES":7,"TK_VOID":8,"TK_MAIN":9,"TK_par_apertura":10,"TK_par_cierre":11,"TK_corchete_apertura":12,"INSTRUCCION":13,"TK_corchete_cierre":14,"DECLARACION":15,"IMPRESION":16,"ASIGNACION":17,"FUNCIONES_NATIVAS":18,"LLAMADA_FUNCION":19,"BREAK":20,"RETURN":21,"CONDICIONALES":22,"BUCLES":23,"LISTA_INSTRUCCIONES":24,"INSTRUCCION2":25,"TIPO_VALOR":26,"TIPO_DECLARACION":27,"TK_punto":28,"TK_PARSE":29,"TK_CADENA":30,"EXPRESIONARIT":31,"FIN_LINEA":32,"TK_ID":33,"PARAMETRO_FUNSION":34,"MAS_PARAMETROS_FUNSION":35,"STRUCT":36,"TK_STRUCT":37,"CUERPO_STRUCT":38,"CONTENIDO_STRUCT":39,"TK_igual":40,"FIN_LINEA_STRUCT":41,"TK_coma":42,"TK_pcoma":43,"MAS_VARIABLES":44,"COND_ARREGLO":45,"TK_STRING":46,"TK_INT":47,"TK_BOOLEAN":48,"TK_DOUBLE":49,"TK_CHAR":50,"TK_llave_apertura":51,"TK_llave_cierre":52,"VALORES":53,"TK_NULL":54,"TK_TRUE":55,"TK_FALSE":56,"TK_CARACTER":57,"ACCESSOATRIBUTO":58,"TK_ENTERO":59,"TK_DECIMAL":60,"TK_BEGIN":61,"TK_END":62,"TK_CARETER_OF_POSITION":63,"TK_TOLOWERCASE":64,"TK_SUBSTRING":65,"TK_TOUPPERCASE":66,"TK_LENGTH":67,"TK_TYPEOF":68,"PARAMETROS_EXTRA":69,"ARREGLO":70,"LISTA_ARREGLO":71,"TK_MENOS":72,"TK_and":73,"TK_or":74,"TK_mayor_igual":75,"TK_menor_igual":76,"TK_mayor":77,"TK_menor":78,"TK_igualacion":79,"TK_desigual":80,"TK_INCREMENTO":81,"TK_DECREMENTO":82,"TK_MAS":83,"TK_numeral":84,"TK_POR":85,"TK_DIVIDIDO":86,"TK_not":87,"TK_SIN":88,"TK_COS":89,"TK_LOG":90,"TK_TAN":91,"TK_SQRT":92,"TK_POW":93,"TK_concat":94,"TK_potencia":95,"TK_MODULO":96,"TK_pregunta":97,"TK_dos_puntos":98,"TK_PRINT":99,"TK_PRINTLN":100,"SIGNOS_COMPARACION":101,"FUNCIONES_ARREGLO":102,"TK_PUSH":103,"TK_POP":104,"PARAMETROS":105,"TK_TOINT":106,"TK_TODOUBLE":107,"TK_RETURN":108,"TK_BREAK":109,"TK_CONTINUE":110,"FUNCION_IF":111,"FUNCION_SWITCH":112,"TK_IF":113,"FUNCION_ELSEIF":114,"FUNCION_ELSE":115,"TK_ELSEIF":116,"TK_ELSE":117,"TK_SWITCH":118,"TK_CASE":119,"SENTENCIAS_CASE":120,"TK_DEFAULT":121,"BUCLE_WHILE":122,"BUCLE_DO_WHILE":123,"BUCLE_FOR":124,"TK_WHILE":125,"TK_DO":126,"TK_FOR":127,"TK_IN":128,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_VOID",9:"TK_MAIN",10:"TK_par_apertura",11:"TK_par_cierre",12:"TK_corchete_apertura",14:"TK_corchete_cierre",19:"LLAMADA_FUNCION",28:"TK_punto",29:"TK_PARSE",30:"TK_CADENA",33:"TK_ID",37:"TK_STRUCT",40:"TK_igual",42:"TK_coma",43:"TK_pcoma",46:"TK_STRING",47:"TK_INT",48:"TK_BOOLEAN",49:"TK_DOUBLE",50:"TK_CHAR",51:"TK_llave_apertura",52:"TK_llave_cierre",54:"TK_NULL",55:"TK_TRUE",56:"TK_FALSE",57:"TK_CARACTER",59:"TK_ENTERO",60:"TK_DECIMAL",61:"TK_BEGIN",62:"TK_END",63:"TK_CARETER_OF_POSITION",64:"TK_TOLOWERCASE",65:"TK_SUBSTRING",66:"TK_TOUPPERCASE",67:"TK_LENGTH",68:"TK_TYPEOF",72:"TK_MENOS",73:"TK_and",74:"TK_or",75:"TK_mayor_igual",76:"TK_menor_igual",77:"TK_mayor",78:"TK_menor",79:"TK_igualacion",80:"TK_desigual",81:"TK_INCREMENTO",82:"TK_DECREMENTO",83:"TK_MAS",84:"TK_numeral",85:"TK_POR",86:"TK_DIVIDIDO",87:"TK_not",88:"TK_SIN",89:"TK_COS",90:"TK_LOG",91:"TK_TAN",92:"TK_SQRT",93:"TK_POW",94:"TK_concat",95:"TK_potencia",96:"TK_MODULO",97:"TK_pregunta",98:"TK_dos_puntos",99:"TK_PRINT",100:"TK_PRINTLN",103:"TK_PUSH",104:"TK_POP",106:"TK_TOINT",107:"TK_TODOUBLE",108:"TK_RETURN",109:"TK_BREAK",110:"TK_CONTINUE",113:"TK_IF",116:"TK_ELSEIF",117:"TK_ELSE",118:"TK_SWITCH",119:"TK_CASE",121:"TK_DEFAULT",125:"TK_WHILE",126:"TK_DO",127:"TK_FOR",128:"TK_IN"},
productions_: [0,[3,2],[4,1],[4,2],[4,2],[4,3],[6,7],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[24,1],[7,2],[7,2],[7,1],[7,1],[7,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[15,2],[15,6],[15,5],[15,8],[15,8],[15,9],[15,7],[15,1],[36,5],[36,6],[38,2],[38,1],[39,5],[39,3],[39,5],[39,3],[41,1],[41,1],[27,4],[27,3],[27,5],[27,3],[27,2],[44,3],[44,2],[32,1],[26,1],[26,1],[26,1],[26,1],[26,1],[45,2],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,4],[53,3],[53,6],[53,3],[53,3],[53,4],[53,1],[53,5],[53,4],[70,3],[71,3],[71,1],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,3],[31,3],[31,4],[31,3],[31,3],[31,3],[31,2],[31,4],[31,4],[31,4],[31,4],[31,4],[31,6],[31,4],[31,2],[31,3],[31,3],[31,3],[31,5],[31,3],[31,1],[16,5],[16,5],[16,7],[16,7],[58,3],[58,4],[58,5],[58,1],[17,4],[17,2],[17,4],[17,5],[17,6],[17,4],[17,3],[17,3],[69,3],[69,2],[102,6],[102,5],[102,5],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[105,3],[105,2],[105,1],[18,4],[18,4],[34,2],[34,3],[34,2],[34,3],[35,4],[35,4],[35,3],[35,3],[35,3],[35,2],[21,3],[21,2],[20,2],[20,2],[22,1],[22,1],[111,7],[111,8],[111,8],[111,5],[111,6],[111,6],[114,8],[114,9],[114,8],[114,7],[115,4],[115,2],[112,10],[112,11],[112,13],[120,5],[120,8],[120,4],[23,1],[23,1],[23,1],[122,7],[123,9],[124,11],[124,11],[124,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log($$[$0-1]); return $$[$0-1];
break;
case 2:
this.$ =  [$$[$0]]
break;
case 3:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 4:
this.$ = $$[$0].concat($$[$0-1]);
break;
case 5:
$$[$0-2].concat($$[$0-1]); $$[$0-2].concat($$[$0]); this.$ = $$[$0-2]
break;
case 6:
this.$ = new Instrucciones($$[$0-1],this._$.first_line,this._$.first_column,"MAIN")
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 26: case 27:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 28: case 29: case 30:
this.$ = [$$[$0]]
break;
case 25:
this.$ = new Instrucciones($$[$0],this._$.first_line,this._$.first_column,null)
break;
case 31: case 32: case 33: case 34: case 35: case 36: case 37:
this.$ = new Instrucciones([$$[$0]],this._$.first_line,this._$.first_column,null)
break;
case 38:
	var asignacion = $$[$0]; console.log(asignacion.expresion);
																																							if(!Array.isArray(asignacion)){
																																								console.log("entra al if");
																																								asignacion.tipo = $$[$0-1]; 
																																								this.$ = asignacion;
																																							}
																																							else{
																																								var tam = asignacion.length; console.log("el tamaño del vector es:" +tam);
																																								//var inst = new Instrucciones([asignacion[0]],this._$.first_line,this._$.first_column,null);
																																								for(var i=0;i<tam;i++){
																																								console.log("DENTRO DEL FOR");
																																								asignacion[i].tipo = $$[$0-1];
																																								//var rec = asignacion[i];
																																								//console.log(asignacion[i].tipo+" "+asignacion[i].id);
																																								//this.$ = asignacion[i];
																																								//console.log("el valor en inst es null = ")
																																								//inst.instrucciones.push(asignacion[i]);
																																								//this.$ = inst;
																																								}
																																								this.$ = asignacion; 
																																								//this.$ = asignacion;
																																								//this.$ = new Instrucciones([asignacion],this._$.first_line,this._$.first_column,null);
																																							}
																																							
																																						
break;
case 41:
var listainst =$$[$0-1]; listainst.crearentorno=false; this.$ = new Funcion($$[$0-7],$$[$0-6],$$[$0-4],listainst,this._$.first_line,this._$.first_column);
break;
case 42:
var listainst =$$[$0-1]; listainst.crearentorno=false; this.$ = new Funcion($$[$0-7],$$[$0-6],[new Parametro($$[$0-4],null,null,this._$.first_line,this._$.first_column)],listainst,this._$.first_line,this._$.first_column);
break;
case 43:
var listainst =$$[$0-1]; listainst.crearentorno=false; var nuevo = new Parametro($$[$0-5],null,null,this._$.first_line,this._$.first_column);
																																			 			this.$ = new Funcion($$[$0-8],$$[$0-7],[nuevo].concat($$[$0-4]),listainst,this._$.first_line,this._$.first_column);
break;
case 44:
var listainst =$$[$0-1]; listainst.crearentorno=false;this.$ = new Funcion($$[$0-6],$$[$0-5],[],listainst,this._$.first_line,this._$.first_column);
break;
case 56:
this.$ = new Declaracion($$[$0-1],this._$.first_line,this._$.first_column,null,$$[$0-3])
break;
case 57:
var vec = $$[$0-1]; vec.push(new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0-2])); this.$ = vec;
break;
case 58:
this.$ = new DeclararArray($$[$0-3], $$[$0-1],null,this._$.first_line,this._$.first_column);
break;
case 59:
this.$ = new DeclararArray($$[$0-1],null,null,this._$.first_line,this._$.first_column);
break;
case 60:
this.$ = new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0-1]);
break;
case 61:
var vec = $$[$0-2]; vec.push(new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0])); this.$ = vec;
break;
case 62:
var vec = [new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0])]; this.$ = vec;
break;
case 64:
this.$= Tipo.STRING
break;
case 65:
this.$= Tipo.INTEGER
break;
case 66:
this.$= Tipo.BOOLEAN
break;
case 67:
this.$= Tipo.DOUBLE
break;
case 68:
this.$= Tipo.CHAR
break;
case 70:
var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.STRING,this._$.first_line,this._$.first_column);
break;
case 72:
this.$ = new Literal(true,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 73:
this.$ = new Literal(false,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 74:
var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.CHAR,this._$.first_line,this._$.first_column);
break;
case 75:
this.$ =$$[$0];
break;
case 76:
this.$ = new Literal(parseInt($$[$0]),Tipo.INTEGER,this._$.first_line,this._$.first_column)
break;
case 77:
this.$ = new Literal(parseFloat($$[$0]),Tipo.DOUBLE,this._$.first_line,this._$.first_column);
break;
case 87:
console.log("LLAMADA VALORES 1");this.$ = new LlamadaFuncion(new Acceso($$[$0-4],this._$.first_line,this._$.first_column),true,[$$[$0-2]].concat($$[$0-1]),this._$.first_line,this._$.first_column);
break;
case 88:
console.log("LLAMADA VALORES 2");this.$ = new LlamadaFuncion(new Acceso($$[$0-3],this._$.first_line,this._$.first_column),true,[$$[$0-1]],this._$.first_line,this._$.first_column);
break;
case 89:
this.$=$$[$0-1];
break;
case 90:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 91:
this.$=[$$[$0]]
break;
case 92:
this.$ = new Aritmetica( new Literal(-1,Tipo.INTEGER,this._$.first_line,this._$.first_column) ,$$[$0],TipoAritmetica.MULTIPLICACION,this._$.first_line,this._$.first_column)
break;
case 93:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.AND,this._$.first_line,this._$.first_column);
break;
case 94:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.OR,this._$.first_line,this._$.first_column);
break;
case 95:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 96:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 97:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_QUE,this._$.first_line,this._$.first_column);
break;
case 98:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_QUE,this._$.first_line,this._$.first_column);
break;
case 99:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALDAD,this._$.first_line,this._$.first_column);
break;
case 100:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.DESIGUALDAD,this._$.first_line,this._$.first_column);
break;
case 103:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA,this._$.first_line,this._$.first_column)
break;
case 104:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA,this._$.first_line,this._$.first_column)
break;
case 106:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION,this._$.first_line,this._$.first_column)
break;
case 107:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION,this._$.first_line,this._$.first_column)
break;
case 108:
this.$ = $$[$0-1]
break;
case 109:
this.$ = new Logica($$[$0],$$[$0],TipoLogica.NOT,this._$.first_line,this._$.first_column);
break;
case 110:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.SENO,this._$.first_line,this._$.first_column)
break;
case 111:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.COSENO,this._$.first_line,this._$.first_column)
break;
case 112:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.LOGARITMO,this._$.first_line,this._$.first_column)
break;
case 113:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.TANGENTE,this._$.first_line,this._$.first_column)
break;
case 114:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.RAIZ,this._$.first_line,this._$.first_column)
break;
case 115:
this.$ = new Aritmetica($$[$0-3],$$[$0-1],TipoAritmetica.POW,this._$.first_line,this._$.first_column)
break;
case 118:
 var a = $$[$0-2]; var al=a.length; var b = $$[$0]; var bl = b.length; var c = a.substring(1,al-1); var d = b.substring(1,bl-1); var total = c+d;  this.$ = total;
break;
case 119:
 this.$ = new Potencia($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 120:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO,this._$.first_line,this._$.first_column);
break;
case 121:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 122:
var nuevo = new ConstruirArray($$[$0-1],this._$.first_line,this._$.first_column); this.$=nuevo;
break;
case 123:
this.$ = $$[$0];
break;
case 124:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,false);
break;
case 125:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,true);
break;
case 126:
this.$ = new Print( new ExpComa($$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,false);
break;
case 127:
this.$ = new Print( new ExpComa($$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,true);
break;
case 128:
new AccesoStruct
break;
case 129:
this.$ = new AccesoArray($$[$0-1],$$[$0-3], this._$.first_line,this._$.first_column);
break;
case 130:
this.$ = new AccesoArray([$$[$0-2]].concat($$[$0-1]),$$[$0-4], this._$.first_line,this._$.first_column);
break;
case 131:
this.$ = new Acceso($$[$0],this._$.first_line,this._$.first_column);
break;
case 132:
//console.log("el tipo es acceso? "); console.log($$[$0-3] instanceof Acceso);
																													if($$[$0-3] instanceof Acceso){
																														//console.log("es asignacion variable");
																														var a1 = new Asignacion($$[$0-1],this._$.first_line,this._$.first_column,$$[$0-3]);
																														console.log(a1.expresion);
																														this.$ = a1;
																													}
																													else if($$[$0-3] instanceof AccesoArray){
																														console.log("AccesoArray - no entrar")
																														this.$ = new AsignarValorArray($$[$0-1],$$[$0-3], this._$.first_line,this._$.first_column);		
																													}																													
																												
break;
case 135:
this.$ = new LlamadaFuncion($$[$0-4],false,[$$[$0-2]],this._$.first_line,this._$.first_column);
break;
case 136:
console.log("el 3");console.log($$[$0-3]);console.log("el 4");console.log($$[$0-2]);this.$= new LlamadaFuncion($$[$0-5],false,[$$[$0-3]].concat($$[$0-2]),this._$.first_line,this._$.first_column);
break;
case 140:
console.log("el 1");console.log($$[$0-2]);console.log("el 3 en Parametros extra");console.log($$[$0]);
																										if(!($$[$0-2] instanceof Array)){
																											console.log("dentro de instance of");
																											$$[$0-2] = [$$[$0-2]];				
																										}
																										
																										var aux = $$[$0-2].push($$[$0]);
																										console.log("aca esta aux");
																										console.log(aux);
																										console.log("aca esta $$[$0-2]");
																										console.log($$[$0-2]);
																										this.$ =aux;
break;
case 141:
console.log($$[$0]);this.$ = $$[$0];
break;
case 156: case 163:
this.$ = [new Parametro($$[$0],$$[$0-1],null,this._$.first_line,this._$.first_column)];
break;
case 157:
this.$ = [new Parametro($$[$0-1],$$[$0-2],null,this._$.first_line,this._$.first_column)].concat($$[$0]);
break;
case 158: case 164:
this.$ = [new Parametro($$[$0],Tipo.STRUCT,$$[$0-1],this._$.first_line,this._$.first_column)];
break;
case 159:
this.$ = [new Parametro($$[$0-1],Tipo.STRUCT,$$[$0-2],this._$.first_line,this._$.first_column)].concat($$[$0]);
break;
case 160:
this.$ = $$[$0-3].push(new Parametro($$[$0],$$[$0-1],null,this._$.first_line,this._$.first_column));
break;
case 161:
this.$ = $$[$0-3].push(new Parametro($$[$0],Tipo.STRUCT,$$[$0-1],this._$.first_line,this._$.first_column));
break;
case 162:
this.$ = $$[$0-2].push(new Parametro($$[$0],null,null,this._$.first_line,this._$.first_column));
break;
case 165:
this.$ = [new Parametro($$[$0],null,null,this._$.first_line,this._$.first_column)];
break;
case 166:
this.$ = new Retornar($$[$0-1],this._$.first_line,this._$.first_column);
break;
case 167:
this.$ = new Retornar(null,this._$.first_line,this._$.first_column);
break;
case 168:
this.$ = new Break(this._$.first_line,this._$.first_column);
break;
case 169:
this.$ = new Continue(this._$.first_line,this._$.first_column);
break;
case 170: case 171:
this.$ = $$[$0]
break;
case 172:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 173: case 174:
$$[$0-2].nombre = "AmbienteIf"; this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 175:
$$[$0].nombre = "AmbienteIf"; this.$ = new If($$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column)
break;
case 176: case 177:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-3],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column)
break;
case 178:

																																									$$[$0-1].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column); 
																																									var valorcondicion = $$[$0-7];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse; 
																																									this.$ = $$[$0-7]
																																								
break;
case 179:

																																									$$[$0-2].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
																																									var valorcondicion = $$[$0-8];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse;
																																									this.$ = $$[$0-8]
																																								
break;
case 180:
$$[$0-2].nombre = "AmbienteElseIf"; 
																																								this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 181:
$$[$0-1].nombre = "AmbienteElseIf";
																																								this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 182:
$$[$0-1].nombre = "AmbienteElse";this.$ = $$[$0-1]
break;
case 183:
$$[$0].nombre = "AmbienteElse";this.$ = $$[$0]
break;
case 184:
$$[$0-1].nombre= "AmbienteSwitch";
																																																											this.$ = new Switch($$[$0-7],$$[$0-3],$$[$0-1],null,this._$.first_line,this._$.first_column);
																																																											
break;
case 185:
$$[$0-2].nombre= "AmbienteSwitch"; 
																																																											var sentenciascase = $$[$0-1];
																																																											while(sentenciascase!= null){
																																																												sentenciascase.condicionswitch = $$[$0-8];
																																																												sentenciascase = sentenciascase.condiciondefault;
																																																											}
																																																											this.$ = new Switch( $$[$0-8],$$[$0-4],$$[$0-2],$$[$0-1],this._$.first_line,this._$.first_column);
																																																											
break;
case 186:
$$[$0-4].nombre= "AmbienteSwitch";
																																																											$$[$02].condicionswitch = $$[$0-10];  this.$ = new Switch( $$[$0-10],$$[$0-6],$$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column);
																																																											
break;
case 187:

																																			console.log("entra en case:");
																																			$$[$0-1].nombre= "AmbienteCase";
																																			var Vcase = new Switch($$[$0-4].condicionswitch,$$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-4];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			$$[$0-4].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			console.log("sube el valor nulo creo: "+$$[$0-4].condicionswitch+"  aca tambien vacio creo anterior "+valorcondicion.condicionswitch);
																																			this.$ = $$[$0-4];
																																		
break;
case 188:

																																			//console.log("case: "+$$[$0-6].valor);
																																			$$[$0-4].nombre= "AmbienteCase";
																																			var Vcase = new Switch($$[$0-7].condicionswitch,$$[$0-5],$$[$0-3],$$[$02],this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-7];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			if(valorcondicion.condicionswitch == null){
																																				console.log("la condicion switch de la ultima iteracion es null")
																																			}
																																			$$[$0-7].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			this.$ = $$[$0-7];
																																		
break;
case 189:
console.log("entra al solitario case");$$[$0].nombre= "AmbienteCase";this.$ = new Switch(null,$$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column)
break;
case 193:
this.$ = new While($$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 194:
this.$ = new DoWhile($$[$0-2],$$[$0-6],this._$.first_line,this._$.first_column);
break;
case 195:
this.$ = new For($$[$0-8].id,$$[$0-8],$$[$0-7],TipoAumento.INCREMENTO,TipoFor.CLASICO,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 196:
this.$ = new For($$[$0-8].id,$$[$0-8],$$[$0-7],TipoAumento.DECREMENTO,TipoFor.CLASICO,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 197:
console.log("Tipo en forin: "+$$[$0-3].tipo);this.$ = new For($$[$0-5],0,$$[$0-3],TipoAumento.DECREMENTO,TipoFor.FORIN,$$[$0-1],this._$.first_line,this._$.first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,15:7,17:6,19:$V1,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9},{1:[3]},{5:[1,19]},{5:[2,2],7:20,15:7,17:6,19:$V1,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9},{6:21,8:$V0,15:23,17:22,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9},{9:[1,24]},o($V9,[2,28]),o($V9,[2,29]),o($V9,[2,30]),{10:[1,28],28:$Va,32:26,40:[1,25],43:$Vb,51:$Vc,75:[1,34],76:[1,35],77:[1,36],78:[1,37],79:[1,38],80:[1,39],81:[1,30],82:[1,29],101:27},{10:[1,42],27:40,28:[1,41],33:[1,43],45:44,51:[1,45]},o($Vd,[2,45]),o([10,28,40,43,51,75,76,77,78,79,80,81,82],$Ve),o($Vf,[2,64]),o($Vf,[2,65]),o($Vf,[2,66]),o($Vf,[2,67]),o($Vf,[2,68]),{33:[1,46]},{1:[2,1]},{5:[2,4],15:23,17:22,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9},{5:[2,3],7:47,15:7,17:6,19:$V1,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9},o($V9,[2,26]),o($V9,[2,27]),{10:[1,48]},{10:$Vg,18:79,29:$Vh,30:$Vi,31:49,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($Vd,[2,133]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:83,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,11:[1,85],18:79,29:$Vh,30:$Vi,31:84,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{32:86,43:$Vb},{32:87,43:$Vb},{33:[1,88]},{10:$Vg,18:79,29:$Vh,30:$Vi,31:89,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($Vd,[2,63]),o($VK,[2,145]),o($VK,[2,146]),o($VK,[2,147]),o($VK,[2,148]),o($VK,[2,149]),o($VK,[2,150]),o($Vd,[2,38]),{29:[1,90]},{10:$Vg,18:79,29:$Vh,30:$Vi,31:91,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:[1,92],32:95,40:[1,93],42:[1,96],43:$Vb,44:94},{33:[1,97]},{52:[1,98]},{12:[1,99]},{5:[2,5],15:23,17:22,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9},{11:[1,100]},{32:101,43:$Vb,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{10:$Vg,18:79,29:$Vh,30:$Vi,31:121,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:122,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:123,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:[1,124]},{10:[1,125]},{10:[1,126]},{10:[1,127]},{10:[1,128]},{10:[1,129]},{10:[1,130]},{10:$Vg,18:79,29:$Vh,30:$Vi,31:131,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:133,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,71:132,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($V21,[2,123]),o($V21,[2,70]),o($V21,[2,71]),o($V21,[2,72]),o($V21,[2,73]),o($V21,[2,74]),o($V21,[2,75],{28:$Va,51:$Vc}),o($V21,[2,76]),o($V21,[2,77]),o($V21,[2,78]),o($V21,[2,79]),{10:[1,134]},{10:[1,135]},{10:[1,136]},{10:[1,137]},{10:[1,138]},{10:[1,139]},o($V21,[2,86]),o([11,12,28,42,43,51,52,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,96,97,98],$Ve,{10:[1,140]}),{10:[1,141]},{10:[1,142]},{32:143,43:$Vb,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,144],42:$V31,69:145,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{32:147,43:$Vb},o($Vd,[2,138]),o($Vd,[2,139]),o($V41,[2,128]),{42:$V31,52:[1,148],69:149,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{10:[1,150]},{11:[1,151],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,154],26:155,33:[1,153],34:152,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8},{10:$Vg,18:79,29:$Vh,30:$Vi,31:156,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{32:157,42:[1,158],43:$Vb},o($Vd,[2,60]),{33:[1,159]},{32:161,40:[1,160],43:$Vb},{33:[2,69]},{14:[1,162],26:165,33:$V51,38:163,39:164,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8},{12:[1,167]},o($Vd,[2,132]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:168,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:169,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:170,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:171,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:172,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:173,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:174,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:175,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($V21,[2,101]),o($V21,[2,102]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:176,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:177,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{85:[1,178]},{10:$Vg,18:79,29:$Vh,30:$Vi,31:179,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:180,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:181,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:182,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:183,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:184,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($V21,[2,92]),{11:[1,185],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},o($V61,[2,109],{81:$VU,82:$VV}),{10:$Vg,18:79,29:$Vh,30:$Vi,31:186,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:187,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:188,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:189,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:190,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:191,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:192,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($V61,[2,117],{81:$VU,82:$VV}),{42:[1,194],52:[1,193]},o($V71,[2,91],{72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11}),{18:79,30:$Vi,33:$Vj,53:195,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,106:$VI,107:$VJ},{11:[1,196]},{18:79,30:$Vi,33:$Vj,53:197,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,106:$VI,107:$VJ},{11:[1,198]},{11:[1,199]},{10:$Vg,18:79,29:$Vh,30:$Vi,31:200,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:201,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:202,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:203,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($Vd,[2,134]),{32:204,43:$Vb},{11:[1,205],42:$V81},{10:$Vg,18:79,29:$Vh,30:$Vi,31:207,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($Vd,[2,137]),o($V41,[2,129]),{42:$V81,52:[1,208]},{30:[1,209]},{32:210,43:$Vb},{11:[1,211]},{11:[1,212],33:[1,214],35:213,42:$V91},{12:[1,216]},{33:[1,217]},{32:218,43:$Vb,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},o($Vd,[2,57]),{33:[1,219]},o($Va1,[2,62]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:220,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($Vd,[2,59]),{32:221,43:$Vb},{14:[1,222],26:165,33:$V51,39:223,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8},o($Vb1,[2,49]),{33:[1,224]},{33:[1,225]},{13:226,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},o([11,12,42,43,52,73,74,97,98],[2,93],{72:$VL,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01}),o([11,12,42,43,52,74,97,98],[2,94],{72:$VL,73:$VM,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01}),o($Vn1,[2,95],{72:$VL,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,96:$V01}),o($Vn1,[2,96],{72:$VL,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,96:$V01}),o($Vn1,[2,97],{72:$VL,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,96:$V01}),o($Vn1,[2,98],{72:$VL,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,96:$V01}),o($Vo1,[2,99],{72:$VL,75:$VO,76:$VP,77:$VQ,78:$VR,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,96:$V01}),o($Vo1,[2,100],{72:$VL,75:$VO,76:$VP,77:$VQ,78:$VR,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,96:$V01}),o($Vp1,[2,103],{81:$VU,82:$VV,84:$VX,85:$VY,86:$VZ,96:$V01}),o($Vp1,[2,104],{81:$VU,82:$VV,84:$VX,85:$VY,86:$VZ,96:$V01}),{10:$Vg,18:79,29:$Vh,30:$Vi,31:251,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($Vq1,[2,106],{81:$VU,82:$VV,84:$VX}),o($Vq1,[2,107],{81:$VU,82:$VV,84:$VX}),o([11,12,42,43,52,73,74,94,95,97,98],[2,118],{72:$VL,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,96:$V01}),o([11,12,42,43,52,73,74,95,97,98],[2,119],{72:$VL,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,96:$V01}),o($Vq1,[2,120],{81:$VU,82:$VV,84:$VX}),{72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11,98:[1,252]},o($V21,[2,108]),{11:[1,253],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,254],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,255],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,256],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,257],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{42:[1,258],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,259],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},o($V21,[2,122]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:260,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{11:[1,261]},o($V21,[2,81]),{42:[1,262]},o($V21,[2,83]),o($V21,[2,84]),{11:[1,263],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,265],42:$V31,69:264,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,266],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,267],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},o($Vd,[2,135]),{32:268,43:$Vb},{10:$Vg,18:79,29:$Vh,30:$Vi,31:269,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($Vr1,[2,141],{72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11}),o($V41,[2,130]),{11:[1,270]},o($Vd,[2,40]),{12:[1,271]},{12:[1,272]},{11:[1,273],42:$Vs1},{11:[2,158],35:275,42:$V91},{26:276,33:[1,277],46:$V4,47:$V5,48:$V6,49:$V7,50:$V8},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:278,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{11:[2,156],35:280,42:$V91},o($Vd,[2,56]),o($Va1,[2,61]),{32:281,43:$Vb,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},o($Vd,[2,46]),{32:282,43:$Vb},o($Vb1,[2,48]),{40:[1,283],41:284,42:$Vt1,43:$Vu1},{40:[1,287],41:288,42:$Vt1,43:$Vu1},{14:[1,289],15:290,16:291,17:292,18:293,19:$Vv1,20:295,21:296,22:297,23:298,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},o($Vw1,[2,16]),o($Vw1,[2,17]),o($Vw1,[2,18]),o($Vw1,[2,19]),o($Vw1,[2,20]),o($Vw1,[2,21]),o($Vw1,[2,22]),o($Vw1,[2,23]),o($Vw1,[2,24]),{10:[1,299]},{10:[1,300]},{10:$Vg,18:79,29:$Vh,30:$Vi,31:301,32:302,33:$Vj,43:$Vb,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{43:[1,303]},{43:[1,304]},o($Vw1,[2,170]),o($Vw1,[2,171]),o($Vx1,[2,190]),o($Vx1,[2,191]),o($Vx1,[2,192]),{10:[1,305]},{10:[1,306]},{10:[1,307]},{12:[1,308]},{10:[1,309],33:[1,310]},o($V61,[2,105],{81:$VU,82:$VV}),{10:$Vg,18:79,29:$Vh,30:$Vi,31:311,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($V21,[2,110]),o($V21,[2,111]),o($V21,[2,112]),o($V21,[2,113]),o($V21,[2,114]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:312,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($V21,[2,116]),o($V71,[2,90],{72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11}),o($V21,[2,80]),{18:79,30:$Vi,33:$Vj,53:313,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,106:$VI,107:$VJ},o($V21,[2,85]),{11:[1,314],42:$V81},o($V21,[2,88]),o($Vy1,[2,154]),o($Vy1,[2,155]),o($Vd,[2,136]),o($Vr1,[2,140],{72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11}),o($Vd,[2,39]),{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:315,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:316,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{12:[1,317]},{26:318,33:[1,319],46:$V4,47:$V5,48:$V6,49:$V7,50:$V8},{11:[2,159],42:$Vs1},{33:[1,320]},o($Vz1,[2,165],{33:[1,321]}),{14:[1,322]},o([14,119,121],[2,25],{58:9,26:10,36:11,111:241,112:242,122:243,123:244,124:245,15:290,16:291,17:292,18:293,20:295,21:296,22:297,23:298,19:$Vv1,33:$V2,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,113:$Vi1,118:$Vj1,125:$Vk1,126:$Vl1,127:$Vm1}),{11:[2,157],42:$Vs1},o($Vd,[2,58]),o($Vd,[2,47]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:323,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($Vb1,[2,51]),o($Vb1,[2,54]),o($Vb1,[2,55]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:324,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($Vb1,[2,53]),o([5,19,33,37,46,47,48,49,50],[2,6]),o($Vw1,[2,7]),o($Vw1,[2,8]),o($Vw1,[2,9]),o($Vw1,[2,10]),o($Vw1,[2,11]),o($Vw1,[2,12]),o($Vw1,[2,13]),o($Vw1,[2,14]),o($Vw1,[2,15]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:325,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:326,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{32:327,43:$Vb,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},o($Vx1,[2,167]),o($Vw1,[2,168]),o($Vw1,[2,169]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:328,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:329,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:330,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:331,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{15:332,17:333,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9},{128:[1,334]},o([11,12,42,43,52,97,98],[2,121],{72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01}),{11:[1,335],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,336]},o($V21,[2,87]),{14:[1,337]},{14:[1,338]},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:339,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{33:[1,340]},o($Vz1,[2,162],{33:[1,341]}),o($Vz1,[2,163]),o($Vz1,[2,164]),o($Vd,[2,44]),{41:342,42:$Vt1,43:$Vu1,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{41:343,42:$Vt1,43:$Vu1,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,344],42:[1,345],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,346],42:[1,347],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},o($Vx1,[2,166]),{11:[1,348],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,349],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,350],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{14:[1,351]},{10:$Vg,18:79,29:$Vh,30:$Vi,31:352,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:353,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{10:$Vg,18:79,29:$Vh,30:$Vi,31:354,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},o($V21,[2,115]),o($V21,[2,82]),o($Vd,[2,41]),o($Vd,[2,42]),{14:[1,355]},o($Vz1,[2,160]),o($Vz1,[2,161]),o($Vb1,[2,50]),o($Vb1,[2,52]),{32:356,43:$Vb},{10:$Vg,18:79,29:$Vh,30:$Vi,31:357,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{32:358,43:$Vb},{10:$Vg,18:79,29:$Vh,30:$Vi,31:359,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{12:[1,360],15:362,16:363,17:364,18:365,19:$VA1,21:367,23:368,25:361,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{12:[1,369]},{12:[1,370]},{125:[1,371]},{43:[1,372],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{43:[1,373],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{12:[1,374],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},o($Vd,[2,43]),o($Vx1,[2,124]),{11:[1,375],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},o($Vx1,[2,125]),{11:[1,376],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:377,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},o($Vw1,[2,175],{114:378,115:379,116:$VB1,117:$VC1}),o($Vx1,[2,31]),o($Vx1,[2,32]),o($Vx1,[2,33]),o($Vx1,[2,34]),o($Vx1,[2,35]),o($Vx1,[2,36]),o($Vx1,[2,37]),{119:[1,382]},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:383,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{10:[1,384]},{33:[1,385]},{33:[1,386]},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:387,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{32:388,43:$Vb},{32:389,43:$Vb},{14:[1,390]},o($Vw1,[2,176],{116:$VD1}),o($Vw1,[2,177]),{10:[1,392]},{12:[1,393],15:362,16:363,17:364,18:365,19:$VA1,21:367,23:368,25:394,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{10:$Vg,18:79,29:$Vh,30:$Vi,31:395,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{14:[1,396]},{10:$Vg,18:79,29:$Vh,30:$Vi,31:397,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{81:[1,398]},{82:[1,399]},{14:[1,400]},o($Vx1,[2,126]),o($Vx1,[2,127]),o($Vw1,[2,172],{114:401,115:402,116:$VB1,117:$VC1}),{10:[1,403]},{10:$Vg,18:79,29:$Vh,30:$Vi,31:404,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{15:362,16:363,17:364,18:365,19:$VA1,21:367,23:368,25:405,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},o($VE1,[2,183]),{72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11,98:[1,406]},o($Vx1,[2,193]),{11:[1,407],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{11:[1,408]},{11:[1,409]},o($Vx1,[2,197]),o($Vw1,[2,173],{116:$VD1}),o($Vw1,[2,174]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:410,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{11:[1,411],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{14:[1,412]},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:413,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{43:[1,414]},{12:[1,415]},{12:[1,416]},{11:[1,417],72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11},{12:[1,418]},o($VE1,[2,182]),{14:[1,419],119:[1,422],120:420,121:[1,421]},o($Vx1,[2,194]),{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:423,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:424,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{12:[1,425]},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:426,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},o($Vw1,[2,184]),{14:[1,427],119:[1,428]},{98:[1,429]},{10:$Vg,18:79,29:$Vh,30:$Vi,31:430,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{14:[1,431]},{14:[1,432]},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:433,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{14:[1,434]},o($Vw1,[2,185]),{10:$Vg,18:79,29:$Vh,30:$Vi,31:435,33:$Vj,51:$Vk,53:62,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:68,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,72:$Vz,84:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,106:$VI,107:$VJ},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:436,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},{72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11,98:[1,437]},o($Vx1,[2,195]),o($Vx1,[2,196]),{14:[1,438]},o($VE1,[2,181],{115:439,117:$VC1}),{72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,94:$V_,95:$V$,96:$V01,97:$V11,98:[1,440]},{14:[1,441]},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:442,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},o($VE1,[2,178],{115:443,117:$VC1}),o($VE1,[2,180]),{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:444,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},o($Vw1,[2,186]),o($VF1,[2,189]),o($VE1,[2,179]),o($VF1,[2,187],{121:[1,445]}),{98:[1,446]},{13:279,15:227,16:228,17:229,18:230,19:$Vc1,20:233,21:232,22:234,23:235,24:447,26:10,33:$V2,36:11,37:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$V8,58:9,99:$Vd1,100:$Ve1,106:$VI,107:$VJ,108:$Vf1,109:$Vg1,110:$Vh1,111:241,112:242,113:$Vi1,118:$Vj1,122:243,123:244,124:245,125:$Vk1,126:$Vl1,127:$Vm1},o($VF1,[2,188])],
defaultActions: {19:[2,1],98:[2,69]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	//para el objeto de impresion
	function FImpresion(_tipoimpresion,_valorimpresion,_raro){
		return {tipo:_tipoimpresion, valor:_valorimpresion,What:_raro};
	}

	//para declaraciones de funciones
	function FDeclaracion(_tipo,_nombre,_valor){
		return {tipo:_tipo,nombre:_nombre,valorvar:_valor};
	}

	//almacenamiento de errores
	function FErrores(_tipo,_caracter,_fila,_columna,_descrip){
		return{tipo:_tipo,Caracter:_caracter,Fila:_fila,Columna:_columna,Descripcion:_descrip};
	}

	var GexpresionSwitch ;


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://return 'TK_COMENTARIO';// comentario simple línea
break;
case 1://return 'TK_COMENTARIO_MULTI';//; comentario multiple líneas
break;
case 2:return 54;
break;
case 3:return 47;
break;
case 4:return 49;
break;
case 5:return 48;
break;
case 6:return 50;
break;
case 7:return 46;
break;
case 8:return 37;
break;
case 9:return 93;
break;
case 10:return 92;
break;
case 11:return 88;
break;
case 12:return 89;
break;
case 13:return 91;
break;
case 14:return 90;
break;
case 15:return 63;
break;
case 16:return 65;
break;
case 17:return 67;
break;
case 18:return 66;
break;
case 19:return 64;
break;
case 20:return 99;
break;
case 21:return 100;
break;
case 22:return 29;
break;
case 23:return 106;
break;
case 24:return 107;
break;
case 25:return 68;
break;
case 26:return 'TK_FUNCTION';
break;
case 27:return 108;
break;
case 28:return 113;
break;
case 29:return 116;
break;
case 30:return 117;
break;
case 31:return 118;
break;
case 32:return 119;
break;
case 33:return 121;
break;
case 34:return 109;
break;
case 35:return 125;
break;
case 36:return 126;
break;
case 37:return 127;
break;
case 38:return 128;
break;
case 39:return 103;
break;
case 40:return 104;
break;
case 41:return 61;
break;
case 42:return 62;
break;
case 43:return 110;
break;
case 44:return 55;
break;
case 45:return 56;
break;
case 46:return 9;
break;
case 47:return 8;
break;
case 48:return 81
break;
case 49:return 82
break;
case 50:return 83;
break;
case 51:return 72;
break;
case 52:return 85;
break;
case 53:return 86;
break;
case 54:return 96
break;
case 55:return 10;
break;
case 56:return 11;
break;
case 57:return 12;
break;
case 58:return 14;
break;
case 59:return 51;
break;
case 60:return 52;
break;
case 61:return 98;
break;
case 62:return 43;
break;
case 63:return 42;
break;
case 64:return 28;
break;
case 65:return 79;
break;
case 66:return 40;
break;
case 67:return 80;
break;
case 68:return 75;
break;
case 69:return 76;
break;
case 70:return 78;
break;
case 71:return 77;
break;
case 72:return 73;
break;
case 73:return 74;
break;
case 74:return 87;
break;
case 75:return 94;
break;
case 76:return 95;
break;
case 77:return 84;
break;
case 78:return 'TK_dolar';
break;
case 79:return 97;
break;
case 80://return 'TK_SALTO_LINEA'
break;
case 81:// se ignoran espacios en blanco
break;
case 82:return 60; 
break;
case 83:return 59;   
break;
case 84:return 30;
break;
case 85:return 57;
break;
case 86:return 33;
break;
case 87:return 5;
break;
case 88:lisErr.push({err: 'Error Lexico', lex: yy_.yytext, fil: yy_.yylloc.first_line, col: yy_.yylloc.first_column, des:'Simbolo Desconocido'}); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*(\*(?!\/)|[^*])*\*\/\n)/i,/^(?:null\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:struct\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:log10\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:subString\b)/i,/^(?:length\b)/i,/^(?:toUppercase\b)/i,/^(?:toLowercase\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:parse\b)/i,/^(?:toInt\b)/i,/^(?:toDouble\b)/i,/^(?:typeof\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:else if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:continue\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
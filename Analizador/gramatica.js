/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,19],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,12],$V9=[5,8,34,35,45,46,47,48,49,107],$Va=[1,35],$Vb=[5,8,10,14,29,30,34,35,45,46,47,48,49,50,53,54,55,56,59,60,61,62,63,64,65,66,67,68,70,82,85,86,87,88,89,90,91,97,98,105,106,107,109,110,111,114,117,118,119,120,122,126,127,128],$Vc=[10,28,38,41,50,73,74,75,76,77,78,79,80],$Vd=[10,28,35,50],$Ve=[1,55],$Vf=[1,63],$Vg=[1,67],$Vh=[1,72],$Vi=[1,65],$Vj=[1,68],$Vk=[1,69],$Vl=[1,70],$Vm=[1,71],$Vn=[1,73],$Vo=[1,74],$Vp=[1,75],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,79],$Vu=[1,80],$Vv=[1,81],$Vw=[1,82],$Vx=[1,54],$Vy=[1,64],$Vz=[1,56],$VA=[1,57],$VB=[1,58],$VC=[1,59],$VD=[1,60],$VE=[1,61],$VF=[1,62],$VG=[1,84],$VH=[1,85],$VI=[10,29,30,35,50,53,54,55,56,59,60,61,62,63,64,65,66,67,68,70,82,85,86,87,88,89,90,91,105,106],$VJ=[1,123],$VK=[1,117],$VL=[1,106],$VM=[1,107],$VN=[1,108],$VO=[1,109],$VP=[1,110],$VQ=[1,111],$VR=[1,112],$VS=[1,113],$VT=[1,114],$VU=[1,115],$VV=[1,116],$VW=[1,118],$VX=[1,119],$VY=[1,120],$VZ=[1,121],$V_=[1,122],$V$=[1,124],$V01=[1,125],$V11=[11,12,28,40,41,51,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,94,95,96],$V21=[2,73],$V31=[1,139],$V41=[1,141],$V51=[1,153],$V61=[1,175],$V71=[11,12,28,40,41,51,70,71,72,73,74,75,76,77,78,81,82,83,84,92,93,94,95,96],$V81=[1,204],$V91=[40,51],$Va1=[1,205],$Vb1=[1,207],$Vc1=[1,220],$Vd1=[1,229],$Ve1=[40,41],$Vf1=[1,234],$Vg1=[14,35,45,46,47,48,49],$Vh1=[1,251],$Vi1=[1,252],$Vj1=[1,253],$Vk1=[1,254],$Vl1=[1,255],$Vm1=[1,261],$Vn1=[1,262],$Vo1=[1,263],$Vp1=[1,264],$Vq1=[1,265],$Vr1=[11,12,28,40,41,51,71,72,73,74,75,76,77,78,92,93,95,96],$Vs1=[11,12,28,40,41,51,71,72,77,78,92,93,95,96],$Vt1=[11,12,28,40,41,51,70,71,72,73,74,75,76,77,78,81,92,93,95,96],$Vu1=[11,12,28,40,41,51,70,71,72,73,74,75,76,77,78,81,83,84,92,93,94,95,96],$Vv1=[11,40],$Vw1=[11,40,51],$Vx1=[1,295],$Vy1=[1,302],$Vz1=[1,303],$VA1=[14,34,35,45,46,47,48,49,97,98,105,106,107,109,110,111,114,119,120,122,126,127,128],$VB1=[14,34,35,45,46,47,48,49,97,98,105,106,107,109,110,111,114,117,118,119,120,122,126,127,128],$VC1=[11,12,14,28,34,35,40,41,45,46,47,48,49,51,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,94,95,96,97,98,105,106,107,109,110,111,114,117,118,119,120,122,126,127,128],$VD1=[5,8,14,34,35,45,46,47,48,49,97,98,105,106,107,109,110,111,114,117,118,119,120,122,126,127,128],$VE1=[1,406],$VF1=[1,407],$VG1=[1,417],$VH1=[14,34,35,45,46,47,48,49,97,98,105,106,107,109,110,111,114,117,119,120,122,126,127,128],$VI1=[14,120];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"VOID_MAIN":6,"INSTRUCCIONES_GLOBALES":7,"TK_VOID":8,"TK_MAIN":9,"TK_par_apertura":10,"TK_par_cierre":11,"TK_corchete_apertura":12,"INSTRUCCION":13,"TK_corchete_cierre":14,"DECLARACION":15,"IMPRESION":16,"ASIGNACION":17,"FUNCIONES_NATIVAS":18,"FUNCIONES":19,"BREAK":20,"RETURN":21,"CONDICIONALES":22,"BUCLES":23,"LISTA_INSTRUCCIONES":24,"INSTRUCCION2":25,"TIPO_VALOR":26,"TIPO_DECLARACION":27,"TK_punto":28,"TK_PARSE":29,"TK_CADENA":30,"EXPRESIONARIT":31,"FIN_LINEA":32,"STRUCT":33,"TK_STRUCT":34,"TK_ID":35,"CUERPO_STRUCT":36,"CONTENIDO_STRUCT":37,"TK_igual":38,"FIN_LINEA_STRUCT":39,"TK_coma":40,"TK_pcoma":41,"MAS_VARIABLES":42,"PARAMETRO_FUNSION":43,"COND_ARREGLO":44,"TK_STRING":45,"TK_INT":46,"TK_BOOLEAN":47,"TK_DOUBLE":48,"TK_CHAR":49,"TK_llave_apertura":50,"TK_llave_cierre":51,"VALORES":52,"TK_NULL":53,"TK_TRUE":54,"TK_FALSE":55,"TK_CARACTER":56,"PARAMETROS":57,"ARREGLO":58,"TK_ENTERO":59,"TK_DECIMAL":60,"TK_BEGIN":61,"TK_END":62,"TK_CARETER_OF_POSITION":63,"TK_TOLOWERCASE":64,"TK_SUBSTRING":65,"TK_TOUPPERCASE":66,"TK_LENGTH":67,"TK_TYPEOF":68,"LISTA_ARREGLO":69,"TK_MENOS":70,"TK_and":71,"TK_or":72,"TK_mayor_igual":73,"TK_menor_igual":74,"TK_mayor":75,"TK_menor":76,"TK_igualacion":77,"TK_desigual":78,"TK_INCREMENTO":79,"TK_DECREMENTO":80,"TK_MAS":81,"TK_numeral":82,"TK_POR":83,"TK_DIVIDIDO":84,"TK_not":85,"TK_SIN":86,"TK_COS":87,"TK_LOG":88,"TK_TAN":89,"TK_SQRT":90,"TK_POW":91,"TK_concat":92,"TK_potencia":93,"TK_MODULO":94,"TK_pregunta":95,"TK_dos_puntos":96,"TK_PRINT":97,"TK_PRINTLN":98,"ACCESSOATRIBUTO":99,"PARAMETROS_EXTRA":100,"SIGNOS_COMPARACION":101,"FUNCIONES_ARREGLO":102,"TK_PUSH":103,"TK_POP":104,"TK_TOINT":105,"TK_TODOUBLE":106,"TK_FUNCTION":107,"MAS_PARAMETROS_FUNSION":108,"TK_RETURN":109,"TK_BREAK":110,"TK_CONTINUE":111,"FUNCION_IF":112,"FUNCION_SWITCH":113,"TK_IF":114,"FUNCION_ELSEIF":115,"FUNCION_ELSE":116,"TK_ELSEIF":117,"TK_ELSE":118,"TK_SWITCH":119,"TK_CASE":120,"SENTENCIAS_CASE":121,"TK_DEFAULT":122,"BUCLE_WHILE":123,"BUCLE_DO_WHILE":124,"BUCLE_FOR":125,"TK_WHILE":126,"TK_DO":127,"TK_FOR":128,"TK_IN":129,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_VOID",9:"TK_MAIN",10:"TK_par_apertura",11:"TK_par_cierre",12:"TK_corchete_apertura",14:"TK_corchete_cierre",28:"TK_punto",29:"TK_PARSE",30:"TK_CADENA",34:"TK_STRUCT",35:"TK_ID",38:"TK_igual",40:"TK_coma",41:"TK_pcoma",45:"TK_STRING",46:"TK_INT",47:"TK_BOOLEAN",48:"TK_DOUBLE",49:"TK_CHAR",50:"TK_llave_apertura",51:"TK_llave_cierre",53:"TK_NULL",54:"TK_TRUE",55:"TK_FALSE",56:"TK_CARACTER",59:"TK_ENTERO",60:"TK_DECIMAL",61:"TK_BEGIN",62:"TK_END",63:"TK_CARETER_OF_POSITION",64:"TK_TOLOWERCASE",65:"TK_SUBSTRING",66:"TK_TOUPPERCASE",67:"TK_LENGTH",68:"TK_TYPEOF",70:"TK_MENOS",71:"TK_and",72:"TK_or",73:"TK_mayor_igual",74:"TK_menor_igual",75:"TK_mayor",76:"TK_menor",77:"TK_igualacion",78:"TK_desigual",79:"TK_INCREMENTO",80:"TK_DECREMENTO",81:"TK_MAS",82:"TK_numeral",83:"TK_POR",84:"TK_DIVIDIDO",85:"TK_not",86:"TK_SIN",87:"TK_COS",88:"TK_LOG",89:"TK_TAN",90:"TK_SQRT",91:"TK_POW",92:"TK_concat",93:"TK_potencia",94:"TK_MODULO",95:"TK_pregunta",96:"TK_dos_puntos",97:"TK_PRINT",98:"TK_PRINTLN",103:"TK_PUSH",104:"TK_POP",105:"TK_TOINT",106:"TK_TODOUBLE",107:"TK_FUNCTION",109:"TK_RETURN",110:"TK_BREAK",111:"TK_CONTINUE",114:"TK_IF",117:"TK_ELSEIF",118:"TK_ELSE",119:"TK_SWITCH",120:"TK_CASE",122:"TK_DEFAULT",126:"TK_WHILE",127:"TK_DO",128:"TK_FOR",129:"TK_IN"},
productions_: [0,[3,2],[4,1],[4,2],[4,2],[4,3],[6,7],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[24,1],[7,2],[7,2],[7,2],[7,1],[7,1],[7,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[15,2],[15,6],[15,5],[15,1],[33,5],[33,6],[36,2],[36,1],[37,5],[37,3],[37,5],[37,3],[39,1],[39,1],[27,4],[27,3],[27,7],[27,5],[27,3],[27,2],[42,3],[42,2],[32,1],[26,1],[26,1],[26,1],[26,1],[26,1],[44,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,3],[52,4],[52,2],[52,1],[52,1],[52,1],[52,1],[52,4],[52,3],[52,6],[52,3],[52,3],[52,4],[52,1],[58,3],[69,3],[69,1],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,3],[31,3],[31,4],[31,3],[31,3],[31,3],[31,2],[31,4],[31,4],[31,4],[31,4],[31,4],[31,6],[31,4],[31,2],[31,3],[31,3],[31,3],[31,3],[31,5],[31,3],[31,1],[16,5],[16,5],[16,7],[16,7],[99,3],[99,4],[99,5],[99,1],[99,2],[17,4],[17,2],[17,4],[17,5],[17,6],[17,4],[17,3],[17,3],[100,3],[100,2],[102,6],[102,5],[102,5],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[57,3],[57,2],[57,1],[18,4],[18,4],[19,8],[19,8],[19,9],[19,7],[43,2],[43,3],[43,2],[43,3],[108,4],[108,4],[108,3],[108,3],[108,3],[108,2],[21,3],[21,6],[21,2],[20,2],[20,2],[22,1],[22,1],[112,7],[112,8],[112,8],[112,5],[112,6],[112,6],[115,8],[115,9],[115,8],[115,7],[116,4],[116,2],[113,10],[113,11],[113,13],[121,5],[121,8],[121,4],[23,1],[23,1],[23,1],[123,7],[124,9],[125,11],[125,11],[125,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log($$[$0-1]); return $$[$0-1];
break;
case 2:
this.$ =  [$$[$0]]
break;
case 3:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 4:
this.$ = $$[$0].concat($$[$0-1]);
break;
case 5:
$$[$0-2].concat($$[$0-1]); $$[$0-2].concat($$[$0]); this.$ = $$[$0-2]
break;
case 6:
this.$ = new Instrucciones($$[$0-1],this._$.first_line,this._$.first_column,"MAIN")
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 26: case 27: case 28:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 29: case 30: case 31:
this.$ = [$$[$0]]
break;
case 25:
this.$ = new Instrucciones($$[$0],this._$.first_line,this._$.first_column,null)
break;
case 32: case 33: case 34: case 35: case 36: case 37: case 38:
this.$ = new Instrucciones([$$[$0]],this._$.first_line,this._$.first_column,null)
break;
case 39:
	var asignacion = $$[$0]; console.log(asignacion.expresion);
																							if(!Array.isArray(asignacion)){
																								console.log("entra al if");
																								 asignacion.tipo = $$[$0-1]; 
																								this.$ = asignacion;
																							}
																							else{
																								var tam = asignacion.length; console.log("el tamaño del vector es:" +tam);
																								//var inst = new Instrucciones([asignacion[0]],this._$.first_line,this._$.first_column,null);
																								for(var i=0;i<tam;i++){
																								console.log("DENTRO DEL FOR");
																								asignacion[i].tipo = $$[$0-1];
																								//var rec = asignacion[i];
																								//console.log(asignacion[i].tipo+" "+asignacion[i].id);
																								//this.$ = asignacion[i];
																								//console.log("el valor en inst es null = ")
																								//inst.instrucciones.push(asignacion[i]);
																								//this.$ = inst;
																								}
																								this.$ = asignacion;
																								//this.$ = asignacion;
																								//this.$ = new Instrucciones([asignacion],this._$.first_line,this._$.first_column,null);
																							}
																							
																						
break;
case 53:
this.$ = new Declaracion($$[$0-1],this._$.first_line,this._$.first_column,null,$$[$0-3])
break;
case 54:
var vec = $$[$0-1]; vec.push(new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0-2])); this.$ = vec;
break;
case 58:
this.$ = new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0-1]);
break;
case 59:
var vec = $$[$0-2]; vec.push(new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0])); this.$ = vec;
break;
case 60:
var vec = [new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0])]; this.$ = vec;
break;
case 62:
this.$= Tipo.STRING
break;
case 63:
this.$= Tipo.INTEGER
break;
case 64:
this.$= Tipo.BOOLEAN
break;
case 65:
this.$= Tipo.DOUBLE
break;
case 66:
this.$= Tipo.CHAR
break;
case 68:
var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.STRING,this._$.first_line,this._$.first_column);
break;
case 70:
this.$ = new Literal(true,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 71:
this.$ = new Literal(false,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 72:
var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.CHAR,this._$.first_line,this._$.first_column);
break;
case 73:
this.$ = new Acceso($$[$0],this._$.first_line,this._$.first_column);
break;
case 76:
this.$ = new AccesoArray($$[$0][0],new Acceso($$[$0-1],this._$.first_line,this._$.first_column), this._$.first_line,this._$.first_column);
break;
case 77:
this.$ = new Literal(parseInt($$[$0]),Tipo.INTEGER,this._$.first_line,this._$.first_column)
break;
case 78:
this.$ = new Literal(parseFloat($$[$0]),Tipo.DOUBLE,this._$.first_line,this._$.first_column);
break;
case 88:
this.$=$$[$0-1];
break;
case 89:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 90:
this.$=[$$[$0]]
break;
case 91:
this.$ = new Aritmetica( new Literal(-1,Tipo.INTEGER,this._$.first_line,this._$.first_column) ,$$[$0],TipoAritmetica.MULTIPLICACION,this._$.first_line,this._$.first_column)
break;
case 92:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.AND,this._$.first_line,this._$.first_column);
break;
case 93:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.OR,this._$.first_line,this._$.first_column);
break;
case 94:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 95:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 96:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_QUE,this._$.first_line,this._$.first_column);
break;
case 97:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_QUE,this._$.first_line,this._$.first_column);
break;
case 98:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALDAD,this._$.first_line,this._$.first_column);
break;
case 99:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.DESIGUALDAD,this._$.first_line,this._$.first_column);
break;
case 102:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA,this._$.first_line,this._$.first_column)
break;
case 103:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA,this._$.first_line,this._$.first_column)
break;
case 105:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION,this._$.first_line,this._$.first_column)
break;
case 106:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION,this._$.first_line,this._$.first_column)
break;
case 107:
this.$ = $$[$0-1]
break;
case 108:
this.$ = new Logica($$[$0],$$[$0],TipoLogica.NOT,this._$.first_line,this._$.first_column);
break;
case 109:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.SENO,this._$.first_line,this._$.first_column)
break;
case 110:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.COSENO,this._$.first_line,this._$.first_column)
break;
case 111:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.LOGARITMO,this._$.first_line,this._$.first_column)
break;
case 112:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.TANGENTE,this._$.first_line,this._$.first_column)
break;
case 113:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.RAIZ,this._$.first_line,this._$.first_column)
break;
case 114:
this.$ = new Aritmetica($$[$0-3],$$[$0-1],TipoAritmetica.POW,this._$.first_line,this._$.first_column)
break;
case 117:
 var a = $$[$0-2]; var al=a.length; var b = $$[$0]; var bl = b.length; var c = a.substring(1,al-1); var d = b.substring(1,bl-1); var total = c+d;  this.$ = total;
break;
case 118:
 this.$ = new Potencia($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 120:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO,this._$.first_line,this._$.first_column);
break;
case 121:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 123:
this.$ = $$[$0];
break;
case 124:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,false);
break;
case 125:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,true);
break;
case 126:
this.$ = new Print( new ExpComa($$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,false);
break;
case 127:
this.$ = new Print( new ExpComa($$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,true);
break;
case 128:
new AccesoStruct
break;
case 129: case 130:
new AccessoArray
break;
case 132:
new Acceso
break;
case 133:
this.$ = new Asignacion($$[$0-1],this._$.first_line,this._$.first_column,$$[$0-3])
break;
case 141: case 142:
console.log("si es correcto")
break;
case 157:
this.$ = new Funcion($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 158:
this.$ = new Funcion($$[$0-7],$$[$0-6],[new Parametro($$[$0-4],null,null,this._$.first_line,this._$.first_column)],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 159:
var nuevo = new Parametro($$[$0-5],null,null,this._$.first_line,this._$.first_column);
																																			 this.$ = new Funcion($$[$0-8],$$[$0-7],[nuevo].concat($$[$0-4]),$$[$0-2],this._$.first_line,this._$.first_column);
break;
case 160:
this.$ = new Funcion($$[$0-6],$$[$0-5],[],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 161:
this.$ = [new Parametro($$[$0],$$[$0-1],null,this._$.first_line,this._$.first_column)];
break;
case 162:
this.$ = [new Parametro($$[$0-1],$$[$0-2],null,this._$.first_line,this._$.first_column)].concat($$[$0]);
break;
case 163:
this.$ = [new Parametro($$[$0],Tipo.STRUCT,$$[$0-1],this._$.first_line,this._$.first_column)];
break;
case 164:
this.$ = [new Parametro($$[$0-1],Tipo.STRUCT,$$[$0-2],this._$.first_line,this._$.first_column)].concat($$[$0]);
break;
case 165:
this.$ = $$[$0-3].push(new Parametro($$[$0],$$[$0-1],null,this._$.first_line,this._$.first_column));
break;
case 166:
this.$ = $$[$0-3].push(new Parametro($$[$0-1],Tipo.STRUCT,$$[$0-1],this._$.first_line,this._$.first_column));
break;
case 167:
this.$ = $$[$0-2].push(new Parametro($$[$0],null,null,this._$.first_line,this._$.first_column));
break;
case 168:
this.$ = [new Parametro($$[$0-1],$$[$0-2],null,this._$.first_line,this._$.first_column)];
break;
case 169:
this.$ = [new Parametro($$[$0-1],Tipo.STRUCT,$$[$0-2],this._$.first_line,this._$.first_column)];
break;
case 170:
this.$ = [new Parametro($$[$0],null,null,this._$.first_line,this._$.first_column)];
break;
case 174:
this.$ = new Break(this._$.first_line,this._$.first_column);
break;
case 175:
this.$ = new Continue(this._$.first_line,this._$.first_column);
break;
case 176: case 177:
this.$ = $$[$0]
break;
case 178:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 179: case 180:
$$[$0-2].nombre = "AmbienteIf"; this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 181:
$$[$0].nombre = "AmbienteIf"; this.$ = new If($$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column)
break;
case 182: case 183:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-3],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column)
break;
case 184:

																																									$$[$0-1].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column); 
																																									var valorcondicion = $$[$0-7];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse; 
																																									this.$ = $$[$0-7]
																																								
break;
case 185:

																																									$$[$0-2].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
																																									var valorcondicion = $$[$0-8];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse;
																																									this.$ = $$[$0-8]
																																								
break;
case 186:
$$[$0-2].nombre = "AmbienteElseIf"; 
																																								this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 187:
$$[$0-1].nombre = "AmbienteElseIf";
																																								this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 188:
$$[$0-1].nombre = "AmbienteElse";this.$ = $$[$0-1]
break;
case 189:
$$[$0].nombre = "AmbienteElse";this.$ = $$[$0]
break;
case 190:
$$[$0-1].nombre= "AmbienteSwitch";
																																																											this.$ = new Switch($$[$0-7],$$[$0-3],$$[$0-1],null,this._$.first_line,this._$.first_column);
																																																											
break;
case 191:
$$[$0-2].nombre= "AmbienteSwitch"; 
																																																											var sentenciascase = $$[$0-1];
																																																											while(sentenciascase!= null){
																																																												sentenciascase.condicionswitch = $$[$0-8];
																																																												sentenciascase = sentenciascase.condiciondefault;
																																																											}
																																																											this.$ = new Switch( $$[$0-8],$$[$0-4],$$[$0-2],$$[$0-1],this._$.first_line,this._$.first_column);
																																																											
break;
case 192:
$$[$0-4].nombre= "AmbienteSwitch";
																																																											$$[$02].condicionswitch = $$[$0-10];  this.$ = new Switch( $$[$0-10],$$[$0-6],$$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column);
																																																											
break;
case 193:

																																			console.log("entra en case:");
																																			$$[$0-1].nombre= "AmbienteCase";
																																			var Vcase = new Switch($$[$0-4].condicionswitch,$$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-4];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			$$[$0-4].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			console.log("sube el valor nulo creo: "+$$[$0-4].condicionswitch+"  aca tambien vacio creo anterior "+valorcondicion.condicionswitch);
																																			this.$ = $$[$0-4];
																																		
break;
case 194:

																																			//console.log("case: "+$$[$0-6].valor);
																																			$$[$0-4].nombre= "AmbienteCase";
																																			var Vcase = new Switch($$[$0-7].condicionswitch,$$[$0-5],$$[$0-3],$$[$02],this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-7];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			if(valorcondicion.condicionswitch == null){
																																				console.log("la condicion switch de la ultima iteracion es null")
																																			}
																																			$$[$0-7].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			this.$ = $$[$0-7];
																																		
break;
case 195:
console.log("entra al solitario case");$$[$0].nombre= "AmbienteCase";this.$ = new Switch(null,$$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column)
break;
case 199:
this.$ = new While($$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 200:
this.$ = new DoWhile($$[$0-2],$$[$0-6],this._$.first_line,this._$.first_column);
break;
case 201:
this.$ = new For($$[$0-8].id,$$[$0-8],$$[$0-7],TipoAumento.INCREMENTO,TipoFor.CLASICO,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 202:
this.$ = new For($$[$0-8].id,$$[$0-8],$$[$0-7],TipoAumento.DECREMENTO,TipoFor.CLASICO,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 203:
console.log("Tipo en forin: "+$$[$0-3].tipo);this.$ = new For($$[$0-5],0,$$[$0-3],TipoAumento.DECREMENTO,TipoFor.FORIN,$$[$0-1],this._$.first_line,this._$.first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,15:7,17:6,19:8,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,99:9,107:$V8},{1:[3]},{5:[1,20]},{5:[2,2],7:21,15:7,17:6,19:8,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,99:9,107:$V8},{6:22,8:$V0,15:24,17:23,19:25,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,99:9,107:$V8},{9:[1,26]},o($V9,[2,29]),o($V9,[2,30]),o($V9,[2,31]),{10:[1,30],28:[1,33],32:28,38:[1,27],41:$Va,50:[1,34],73:[1,36],74:[1,37],75:[1,38],76:[1,39],77:[1,40],78:[1,41],79:[1,32],80:[1,31],101:29},{10:[1,44],27:42,28:[1,43],35:[1,45],44:46,50:[1,47]},o($Vb,[2,42]),{35:[1,48]},o($Vc,[2,131],{35:[1,49]}),o($Vd,[2,62]),o($Vd,[2,63]),o($Vd,[2,64]),o($Vd,[2,65]),o($Vd,[2,66]),{35:[1,50]},{1:[2,1]},{5:[2,4],15:24,17:23,19:25,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,99:9,107:$V8},{5:[2,3],7:51,15:7,17:6,19:8,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,99:9,107:$V8},o($V9,[2,26]),o($V9,[2,27]),o($V9,[2,28]),{10:[1,52]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:53,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($Vb,[2,134]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:86,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,11:[1,88],18:83,29:$Vf,30:$Vg,31:87,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{32:89,41:$Va},{32:90,41:$Va},{35:[1,91]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:92,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($Vb,[2,61]),o($VI,[2,146]),o($VI,[2,147]),o($VI,[2,148]),o($VI,[2,149]),o($VI,[2,150]),o($VI,[2,151]),o($Vb,[2,39]),{29:[1,93]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:94,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:[1,97],32:98,38:[1,95],40:[1,99],41:$Va,42:96},{35:[1,100]},{51:[1,101]},{10:[1,102]},o($Vc,[2,132]),{12:[1,103]},{5:[2,5],15:24,17:23,19:25,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,99:9,107:$V8},{11:[1,104]},{28:$VJ,32:105,41:$Va,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{10:$Ve,18:83,29:$Vf,30:$Vg,31:126,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:127,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:128,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:[1,129]},{10:[1,130]},{10:[1,131]},{10:[1,132]},{10:[1,133]},{10:[1,134]},{10:[1,135]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:136,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:138,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:137,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($V11,[2,123]),o($V11,[2,68]),o($V11,[2,69]),o($V11,[2,70]),o($V11,[2,71]),o($V11,[2,72]),o($V11,$V21,{58:140,10:$V31,50:$V41}),o($V11,[2,77]),o($V11,[2,78]),o($V11,[2,79]),o($V11,[2,80]),{10:[1,142]},{10:[1,143]},{10:[1,144]},{10:[1,145]},{10:[1,146]},{10:[1,147]},o($V11,[2,87]),{10:[1,148]},{10:[1,149]},{28:$VJ,32:150,41:$Va,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,151],28:$VJ,40:$V51,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,100:152},{32:154,41:$Va},o($Vb,[2,139]),o($Vb,[2,140]),o($Vc,[2,128]),{28:$VJ,40:$V51,51:[1,155],70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,100:156},{10:[1,157]},{11:[1,158],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{10:$Ve,18:83,29:$Vf,30:$Vg,31:159,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{32:160,40:[1,161],41:$Va},{26:163,35:[1,164],43:162,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},o($Vb,[2,58]),{35:[1,165]},{32:167,38:[1,166],41:$Va},{35:[2,67]},{11:[1,170],26:163,35:[1,169],43:168,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{14:[1,171],26:174,35:$V61,36:172,37:173,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{12:[1,176]},o($Vb,[2,133]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:177,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:178,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:179,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:180,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:181,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:182,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:183,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:184,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($V11,[2,100]),o($V11,[2,101]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:185,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:186,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{83:[1,187]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:188,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:189,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:190,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:191,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:192,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:193,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:194,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($V11,[2,91]),{11:[1,195],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},o($V71,[2,108],{79:$VT,80:$VU}),{10:$Ve,18:83,29:$Vf,30:$Vg,31:196,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:197,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:198,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:199,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:200,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:201,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:202,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($V71,[2,116],{79:$VT,80:$VU}),{40:$V81,51:[1,203]},o($V91,[2,90],{28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01}),{10:$Ve,11:$Va1,18:83,29:$Vf,30:$Vg,31:208,35:$Vh,40:$Vb1,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,57:206,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($V11,[2,76]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:138,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:209,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{18:83,30:$Vg,35:$Vh,52:210,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,105:$VG,106:$VH},{11:[1,211]},{18:83,30:$Vg,35:$Vh,52:212,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,105:$VG,106:$VH},{11:[1,213]},{11:[1,214]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:215,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:216,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:217,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($Vb,[2,135]),{32:218,41:$Va},{11:[1,219],40:$Vc1},{10:$Ve,18:83,29:$Vf,30:$Vg,31:221,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($Vb,[2,138]),o($Vc,[2,129]),{40:$Vc1,51:[1,222]},{30:[1,223]},{32:224,41:$Va},{28:$VJ,32:225,41:$Va,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},o($Vb,[2,54]),{35:[1,226]},{11:[1,227]},{35:[1,228]},{35:$Vd1},o($Ve1,[2,60]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:230,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($Vb,[2,57]),{11:[1,231]},{11:[1,232],35:$Vd1,40:$Vf1,108:233},{12:[1,235]},{32:236,41:$Va},{14:[1,237],26:174,35:$V61,37:238,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},o($Vg1,[2,46]),{35:[1,239]},{35:[1,240]},{13:241,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},o([11,12,28,40,41,51,71,72,95,96],[2,92],{70:$VK,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$}),o([11,12,28,40,41,51,72,95,96],[2,93],{70:$VK,71:$VL,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$}),o($Vr1,[2,94],{70:$VK,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,94:$V$}),o($Vr1,[2,95],{70:$VK,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,94:$V$}),o($Vr1,[2,96],{70:$VK,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,94:$V$}),o($Vr1,[2,97],{70:$VK,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,94:$V$}),o($Vs1,[2,98],{70:$VK,73:$VN,74:$VO,75:$VP,76:$VQ,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,94:$V$}),o($Vs1,[2,99],{70:$VK,73:$VN,74:$VO,75:$VP,76:$VQ,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,94:$V$}),o($Vt1,[2,102],{79:$VT,80:$VU,82:$VW,83:$VX,84:$VY,94:$V$}),o($Vt1,[2,103],{79:$VT,80:$VU,82:$VW,83:$VX,84:$VY,94:$V$}),{10:$Ve,18:83,29:$Vf,30:$Vg,31:266,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($Vu1,[2,105],{79:$VT,80:$VU,82:$VW}),o($Vu1,[2,106],{79:$VT,80:$VU,82:$VW}),o([11,12,28,40,41,51,71,72,92,93,95,96],[2,117],{70:$VK,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,94:$V$}),o([11,12,28,40,41,51,71,72,93,95,96],[2,118],{70:$VK,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,94:$V$}),o([11,12,28,40,41,51,96],[2,119],{70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01}),o($Vu1,[2,120],{79:$VT,80:$VU,82:$VW}),{28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,96:[1,267]},o($V11,[2,107]),{11:[1,268],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,269],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,270],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,271],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,272],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{28:$VJ,40:[1,273],70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,274],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},o($V11,[2,122]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:275,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($V11,[2,74]),{11:[1,276],40:[1,277]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:278,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($Vv1,[2,154],{28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01}),{40:$V81,51:[1,279]},{11:[1,280]},o($V11,[2,82]),{40:[1,281]},o($V11,[2,84]),o($V11,[2,85]),{11:[1,282],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,283],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,284],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},o($Vb,[2,136]),{32:285,41:$Va},{10:$Ve,18:83,29:$Vf,30:$Vg,31:286,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($Vw1,[2,142],{28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01}),o($Vc,[2,130]),{11:[1,287]},o($Vb,[2,41]),o($Vb,[2,53]),o($Ve1,[2,59]),{12:[1,288]},{11:[2,161],40:$Vf1,108:289},{11:[2,163],40:$Vf1,108:290},{28:$VJ,32:291,41:$Va,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{12:[1,292]},{12:[1,293]},{11:[1,294],40:$Vx1},{26:296,35:[1,297],45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{13:298,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},o($Vb,[2,43]),{32:299,41:$Va},o($Vg1,[2,45]),{38:[1,300],39:301,40:$Vy1,41:$Vz1},{38:[1,304],39:305,40:$Vy1,41:$Vz1},{14:[1,306],15:307,16:308,17:309,18:310,19:311,20:312,21:313,22:314,23:315,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},o($VA1,[2,16]),o($VA1,[2,17]),o($VA1,[2,18]),o($VA1,[2,19]),o($VA1,[2,20]),o($VA1,[2,21]),o($VA1,[2,22]),o($VA1,[2,23]),o($VA1,[2,24]),{10:[1,316]},{10:[1,317]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:318,32:320,35:[1,319],41:$Va,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{41:[1,321]},{41:[1,322]},o($VA1,[2,176]),o($VA1,[2,177]),o($VB1,[2,196]),o($VB1,[2,197]),o($VB1,[2,198]),{10:[1,323]},{10:[1,324]},{10:[1,325]},{12:[1,326]},{10:[1,327],35:[1,328]},o($V71,[2,104],{79:$VT,80:$VU}),{10:$Ve,18:83,29:$Vf,30:$Vg,31:329,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($V11,[2,109]),o($V11,[2,110]),o($V11,[2,111]),o($V11,[2,112]),o($V11,[2,113]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:330,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($V11,[2,115]),o($V91,[2,89],{28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01}),o($V11,[2,75]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:331,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($Vv1,[2,153],{28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01}),o($V11,[2,88]),o($V11,[2,81]),{18:83,30:$Vg,35:$Vh,52:332,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,105:$VG,106:$VH},o($V11,[2,86]),o($VC1,[2,155]),o($VC1,[2,156]),o($Vb,[2,137]),o($Vw1,[2,141],{28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01}),o($Vb,[2,40]),{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:333,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{11:[2,162],40:$Vx1},{11:[2,164],40:$Vx1},o($Vb,[2,56]),{13:335,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{13:336,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{12:[1,337]},{26:338,35:[1,339],45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{35:[1,340]},o($Vv1,[2,170],{35:[1,341]}),{14:[1,342],15:307,16:308,17:309,18:310,19:311,20:312,21:313,22:314,23:315,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},o($Vb,[2,44]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:343,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($Vg1,[2,48]),o($Vg1,[2,51]),o($Vg1,[2,52]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:344,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($Vg1,[2,50]),o([5,34,35,45,46,47,48,49,107],[2,6]),o($VA1,[2,7]),o($VA1,[2,8]),o($VA1,[2,9]),o($VA1,[2,10]),o($VA1,[2,11]),o($VA1,[2,12]),o($VA1,[2,13]),o($VA1,[2,14]),o($VA1,[2,15]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:345,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:346,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{28:$VJ,32:347,41:$Va,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},o([28,41,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,94,95],$V21,{58:140,10:[1,348],50:$V41}),o($VB1,[2,173]),o($VA1,[2,174]),o($VA1,[2,175]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:349,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:350,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:351,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:352,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{15:353,17:354,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,99:9},{129:[1,355]},o([11,12,28,40,41,51,95,96],[2,121],{70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$}),{11:[1,356],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},o($Vv1,[2,152],{28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01}),{11:[1,357]},{14:[1,358]},o([14,120,122],[2,25],{99:9,26:10,33:11,112:256,113:257,123:258,124:259,125:260,15:307,16:308,17:309,18:310,19:311,20:312,21:313,22:314,23:315,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,114:$Vm1,119:$Vn1,126:$Vo1,127:$Vp1,128:$Vq1}),{14:[1,359],15:307,16:308,17:309,18:310,19:311,20:312,21:313,22:314,23:315,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{14:[1,360],15:307,16:308,17:309,18:310,19:311,20:312,21:313,22:314,23:315,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{13:361,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{35:[1,362]},o($Vv1,[2,167],{35:[1,363]}),o($Vv1,[2,168]),o($Vv1,[2,169]),o($VD1,[2,160]),{28:$VJ,39:364,40:$Vy1,41:$Vz1,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{28:$VJ,39:365,40:$Vy1,41:$Vz1,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,366],28:$VJ,40:[1,367],70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,368],28:$VJ,40:[1,369],70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},o($VB1,[2,171]),{10:$Ve,11:$Va1,18:83,26:163,29:$Vf,30:$Vg,31:208,35:[1,371],40:$Vb1,43:370,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,57:206,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{11:[1,372],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,373],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,374],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{14:[1,375]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:376,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:377,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{10:$Ve,18:83,29:$Vf,30:$Vg,31:378,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},o($V11,[2,114]),o($V11,[2,83]),o($Vb,[2,55]),o($VD1,[2,157]),o($VD1,[2,158]),{14:[1,379],15:307,16:308,17:309,18:310,19:311,20:312,21:313,22:314,23:315,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},o($Vv1,[2,165]),o($Vv1,[2,166]),o($Vg1,[2,47]),o($Vg1,[2,49]),{32:380,41:$Va},{10:$Ve,18:83,29:$Vf,30:$Vg,31:381,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{32:382,41:$Va},{10:$Ve,18:83,29:$Vf,30:$Vg,31:383,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{11:[1,384]},o([11,28,40,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,94,95],$V21,{58:140,10:$V31,35:$Vd1,50:$V41}),{12:[1,385],15:387,16:388,17:389,18:390,19:391,21:392,23:393,25:386,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{12:[1,394]},{12:[1,395]},{126:[1,396]},{28:$VJ,41:[1,397],70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{28:$VJ,41:[1,398],70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{12:[1,399],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},o($VD1,[2,159]),o($VB1,[2,124]),{11:[1,400],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},o($VB1,[2,125]),{11:[1,401],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{32:402,41:$Va},{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:403,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},o($VA1,[2,181],{115:404,116:405,117:$VE1,118:$VF1}),o($VB1,[2,32]),o($VB1,[2,33]),o($VB1,[2,34]),o($VB1,[2,35]),o($VB1,[2,36]),o($VB1,[2,37]),o($VB1,[2,38]),{120:[1,408]},{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:409,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{10:[1,410]},{35:[1,411]},{35:[1,412]},{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:413,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{32:414,41:$Va},{32:415,41:$Va},o($VB1,[2,172]),{14:[1,416]},o($VA1,[2,182],{117:$VG1}),o($VA1,[2,183]),{10:[1,418]},{12:[1,419],15:387,16:388,17:389,18:390,19:391,21:392,23:393,25:420,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{10:$Ve,18:83,29:$Vf,30:$Vg,31:421,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{14:[1,422]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:423,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{79:[1,424]},{80:[1,425]},{14:[1,426]},o($VB1,[2,126]),o($VB1,[2,127]),o($VA1,[2,178],{115:427,116:428,117:$VE1,118:$VF1}),{10:[1,429]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:430,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{15:387,16:388,17:389,18:390,19:391,21:392,23:393,25:431,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},o($VH1,[2,189]),{28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,96:[1,432]},o($VB1,[2,199]),{11:[1,433],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{11:[1,434]},{11:[1,435]},o($VB1,[2,203]),o($VA1,[2,179],{117:$VG1}),o($VA1,[2,180]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:436,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{11:[1,437],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{14:[1,438]},{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:439,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{41:[1,440]},{12:[1,441]},{12:[1,442]},{11:[1,443],28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01},{12:[1,444]},o($VH1,[2,188]),{14:[1,445],120:[1,448],121:446,122:[1,447]},o($VB1,[2,200]),{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:449,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:450,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{12:[1,451]},{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:452,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},o($VA1,[2,190]),{14:[1,453],120:[1,454]},{96:[1,455]},{10:$Ve,18:83,29:$Vf,30:$Vg,31:456,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{14:[1,457]},{14:[1,458]},{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:459,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{14:[1,460]},o($VA1,[2,191]),{10:$Ve,18:83,29:$Vf,30:$Vg,31:461,35:$Vh,50:$Vi,52:66,53:$Vj,54:$Vk,55:$Vl,56:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:$Vx,82:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,105:$VG,106:$VH},{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:462,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},{28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,96:[1,463]},o($VB1,[2,201]),o($VB1,[2,202]),{14:[1,464]},o($VH1,[2,187],{116:465,118:$VF1}),{28:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,84:$VY,92:$VZ,93:$V_,94:$V$,95:$V01,96:[1,466]},{14:[1,467]},{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:468,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},o($VH1,[2,184],{116:469,118:$VF1}),o($VH1,[2,186]),{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:470,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},o($VA1,[2,192]),o($VI1,[2,195]),o($VH1,[2,185]),o($VI1,[2,193],{122:[1,471]}),{96:[1,472]},{13:334,15:242,16:243,17:244,18:245,19:246,20:248,21:247,22:249,23:250,24:473,26:10,33:11,34:$V1,35:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,97:$Vh1,98:$Vi1,99:9,105:$VG,106:$VH,107:$V8,109:$Vj1,110:$Vk1,111:$Vl1,112:256,113:257,114:$Vm1,119:$Vn1,123:258,124:259,125:260,126:$Vo1,127:$Vp1,128:$Vq1},o($VI1,[2,194])],
defaultActions: {20:[2,1],101:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	//para el objeto de impresion
	function FImpresion(_tipoimpresion,_valorimpresion,_raro){
		return {tipo:_tipoimpresion, valor:_valorimpresion,What:_raro};
	}

	//para declaraciones de funciones
	function FDeclaracion(_tipo,_nombre,_valor){
		return {tipo:_tipo,nombre:_nombre,valorvar:_valor};
	}

	//almacenamiento de errores
	function FErrores(_tipo,_caracter,_fila,_columna,_descrip){
		return{tipo:_tipo,Caracter:_caracter,Fila:_fila,Columna:_columna,Descripcion:_descrip};
	}

	var GexpresionSwitch ;


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://return 'TK_COMENTARIO';// comentario simple línea
break;
case 1://return 'TK_COMENTARIO_MULTI';//; comentario multiple líneas
break;
case 2:return 53;
break;
case 3:return 46;
break;
case 4:return 48;
break;
case 5:return 47;
break;
case 6:return 49;
break;
case 7:return 45;
break;
case 8:return 34;
break;
case 9:return 91;
break;
case 10:return 90;
break;
case 11:return 86;
break;
case 12:return 87;
break;
case 13:return 89;
break;
case 14:return 88;
break;
case 15:return 63;
break;
case 16:return 65;
break;
case 17:return 67;
break;
case 18:return 66;
break;
case 19:return 64;
break;
case 20:return 97;
break;
case 21:return 98;
break;
case 22:return 29;
break;
case 23:return 105;
break;
case 24:return 106;
break;
case 25:return 68;
break;
case 26:return 107;
break;
case 27:return 109;
break;
case 28:return 114;
break;
case 29:return 117;
break;
case 30:return 118;
break;
case 31:return 119;
break;
case 32:return 120;
break;
case 33:return 122;
break;
case 34:return 110;
break;
case 35:return 126;
break;
case 36:return 127;
break;
case 37:return 128;
break;
case 38:return 129;
break;
case 39:return 103;
break;
case 40:return 104;
break;
case 41:return 61;
break;
case 42:return 62;
break;
case 43:return 111;
break;
case 44:return 54;
break;
case 45:return 55;
break;
case 46:return 9;
break;
case 47:return 8;
break;
case 48:return 79
break;
case 49:return 80
break;
case 50:return 81;
break;
case 51:return 70;
break;
case 52:return 83;
break;
case 53:return 84;
break;
case 54:return 94
break;
case 55:return 10;
break;
case 56:return 11;
break;
case 57:return 12;
break;
case 58:return 14;
break;
case 59:return 50;
break;
case 60:return 51;
break;
case 61:return 96;
break;
case 62:return 41;
break;
case 63:return 40;
break;
case 64:return 28;
break;
case 65:return 77;
break;
case 66:return 38;
break;
case 67:return 78;
break;
case 68:return 73;
break;
case 69:return 74;
break;
case 70:return 76;
break;
case 71:return 75;
break;
case 72:return 71;
break;
case 73:return 72;
break;
case 74:return 85;
break;
case 75:return 92;
break;
case 76:return 93;
break;
case 77:return 82;
break;
case 78:return 'TK_dolar';
break;
case 79:return 95;
break;
case 80://return 'TK_SALTO_LINEA'
break;
case 81:// se ignoran espacios en blanco
break;
case 82:return 60; 
break;
case 83:return 59;   
break;
case 84:return 30;
break;
case 85:return 56;
break;
case 86:return 35;
break;
case 87:return 5;
break;
case 88:lisErr.push({err: 'Error Lexico', lex: yy_.yytext, fil: yy_.yylloc.first_line, col: yy_.yylloc.first_column, des:'Simbolo Desconocido'}); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*(\*(?!\/)|[^*])*\*\/\n)/i,/^(?:null\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:struct\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:log10\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:subString\b)/i,/^(?:length\b)/i,/^(?:toUppercase\b)/i,/^(?:toLowercase\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:parse\b)/i,/^(?:toInt\b)/i,/^(?:toDouble\b)/i,/^(?:typeof\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:else if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:continue\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
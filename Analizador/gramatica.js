/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,18],$V2=[1,9],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,12],$V9=[5,8,33,34,44,45,46,47,48,106],$Va=[5,8,10,14,28,29,33,34,44,45,46,47,48,49,52,53,54,55,57,58,59,60,61,62,63,64,65,66,69,81,84,85,86,87,88,89,90,96,97,104,105,106,108,111,114,115,116,117,118,124,125,126],$Vb=[10,27,34,49],$Vc=[1,55],$Vd=[1,63],$Ve=[1,67],$Vf=[1,72],$Vg=[1,65],$Vh=[1,68],$Vi=[1,69],$Vj=[1,70],$Vk=[1,71],$Vl=[1,73],$Vm=[1,74],$Vn=[1,75],$Vo=[1,76],$Vp=[1,77],$Vq=[1,78],$Vr=[1,79],$Vs=[1,80],$Vt=[1,81],$Vu=[1,82],$Vv=[1,54],$Vw=[1,64],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[1,60],$VC=[1,61],$VD=[1,62],$VE=[1,84],$VF=[1,85],$VG=[1,88],$VH=[10,28,29,34,49,52,53,54,55,57,58,59,60,61,62,63,64,65,66,69,81,84,85,86,87,88,89,90,104,105],$VI=[1,135],$VJ=[1,129],$VK=[1,118],$VL=[1,119],$VM=[1,120],$VN=[1,121],$VO=[1,122],$VP=[1,123],$VQ=[1,124],$VR=[1,125],$VS=[1,126],$VT=[1,127],$VU=[1,128],$VV=[1,130],$VW=[1,131],$VX=[1,132],$VY=[1,133],$VZ=[1,134],$V_=[1,136],$V$=[1,137],$V01=[11,12,27,39,40,50,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,92,93,94,95],$V11=[2,71],$V21=[1,150],$V31=[1,168],$V41=[39,50],$V51=[27,37],$V61=[1,190],$V71=[11,12,27,39,40,50,69,70,71,72,73,74,75,76,77,80,81,82,83,91,92,93,94,95],$V81=[1,219],$V91=[1,221],$Va1=[1,246],$Vb1=[39,40],$Vc1=[1,251],$Vd1=[14,34,44,45,46,47,48],$Ve1=[1,267],$Vf1=[1,268],$Vg1=[1,269],$Vh1=[1,275],$Vi1=[1,276],$Vj1=[1,277],$Vk1=[1,278],$Vl1=[1,279],$Vm1=[11,12,27,39,40,50,70,71,72,73,74,75,76,77,91,92,94,95],$Vn1=[11,12,27,39,40,50,70,71,76,77,91,92,94,95],$Vo1=[11,12,27,39,40,50,69,70,71,72,73,74,75,76,77,80,91,92,94,95],$Vp1=[11,12,27,39,40,50,69,70,71,72,73,74,75,76,77,80,82,83,91,92,93,94,95],$Vq1=[11,39],$Vr1=[1,308],$Vs1=[1,315],$Vt1=[1,316],$Vu1=[14,33,34,44,45,46,47,48,96,97,104,105,106,108,111,116,117,118,124,125,126],$Vv1=[14,33,34,44,45,46,47,48,96,97,104,105,106,108,111,114,115,116,117,118,124,125,126],$Vw1=[11,12,14,27,33,34,39,40,44,45,46,47,48,50,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,92,93,94,95,96,97,104,105,106,108,111,114,115,116,117,118,124,125,126],$Vx1=[5,8,14,33,34,44,45,46,47,48,96,97,104,105,106,108,111,114,115,116,117,118,124,125,126],$Vy1=[1,417],$Vz1=[1,418],$VA1=[1,428],$VB1=[14,33,34,44,45,46,47,48,96,97,104,105,106,108,111,114,116,117,118,124,125,126],$VC1=[1,459],$VD1=[1,466],$VE1=[14,117];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCIONES_GLOBALES":6,"VOID_MAIN":7,"TK_VOID":8,"TK_MAIN":9,"TK_par_apertura":10,"TK_par_cierre":11,"TK_corchete_apertura":12,"INSTRUCCION":13,"TK_corchete_cierre":14,"DECLARACION":15,"IMPRESION":16,"ASIGNACION":17,"FUNCIONES_NATIVAS":18,"FUNCIONES":19,"RETURN":20,"CONDICIONALES":21,"BUCLES":22,"LISTA_INSTRUCCIONES":23,"INSTRUCCION2":24,"TIPO_VALOR":25,"TIPO_DECLARACION":26,"TK_punto":27,"TK_PARSE":28,"TK_CADENA":29,"EXPRESIONARIT":30,"FIN_LINEA":31,"STRUCT":32,"TK_STRUCT":33,"TK_ID":34,"CUERPO_STRUCT":35,"CONTENIDO_STRUCT":36,"TK_igual":37,"FIN_LINEA_STRUCT":38,"TK_coma":39,"TK_pcoma":40,"MAS_VARIABLES":41,"PARAMETRO_FUNSION":42,"COND_ARREGLO":43,"TK_STRING":44,"TK_INT":45,"TK_BOOLEAN":46,"TK_DOUBLE":47,"TK_CHAR":48,"TK_llave_apertura":49,"TK_llave_cierre":50,"VALORES":51,"TK_NULL":52,"TK_TRUE":53,"TK_FALSE":54,"TK_CARACTER":55,"PARAMETROS":56,"TK_ENTERO":57,"TK_DECIMAL":58,"TK_BEGIN":59,"TK_END":60,"TK_CARETER_OF_POSITION":61,"TK_TOLOWERCASE":62,"TK_SUBSTRING":63,"TK_TOUPPERCASE":64,"TK_LENGTH":65,"TK_TYPEOF":66,"ARREGLO":67,"LISTA_ARREGLO":68,"TK_MENOS":69,"TK_and":70,"TK_or":71,"TK_mayor_igual":72,"TK_menor_igual":73,"TK_mayor":74,"TK_menor":75,"TK_igualacion":76,"TK_desigual":77,"TK_INCREMENTO":78,"TK_DECREMENTO":79,"TK_MAS":80,"TK_numeral":81,"TK_POR":82,"TK_DIVIDIDO":83,"TK_not":84,"TK_SIN":85,"TK_COS":86,"TK_LOG":87,"TK_TAN":88,"TK_SQRT":89,"TK_POW":90,"TK_concat":91,"TK_potencia":92,"TK_MODULO":93,"TK_pregunta":94,"TK_dos_puntos":95,"TK_PRINT":96,"TK_PRINTLN":97,"MAS_ATRIBUTOS":98,"SIGNOS_COMPARACION":99,"PARAMETROS_EXTRA":100,"FUNCIONES_ARREGLO":101,"TK_PUSH":102,"TK_POP":103,"TK_TOINT":104,"TK_TODOUBLE":105,"TK_FUNCTION":106,"MAS_PARAMETROS_FUNSION":107,"TK_RETURN":108,"FUNCION_IF":109,"FUNCION_SWITCH":110,"TK_IF":111,"FUNCION_ELSEIF":112,"FUNCION_ELSE":113,"TK_ELSEIF":114,"TK_ELSE":115,"TK_SWITCH":116,"TK_CASE":117,"TK_BREAK":118,"SENTENCIAS_CASE":119,"TK_DEFAULT":120,"BUCLE_WHILE":121,"BUCLE_DO_WHILE":122,"BUCLE_FOR":123,"TK_WHILE":124,"TK_DO":125,"TK_FOR":126,"TK_IN":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_VOID",9:"TK_MAIN",10:"TK_par_apertura",11:"TK_par_cierre",12:"TK_corchete_apertura",14:"TK_corchete_cierre",27:"TK_punto",28:"TK_PARSE",29:"TK_CADENA",33:"TK_STRUCT",34:"TK_ID",37:"TK_igual",39:"TK_coma",40:"TK_pcoma",44:"TK_STRING",45:"TK_INT",46:"TK_BOOLEAN",47:"TK_DOUBLE",48:"TK_CHAR",49:"TK_llave_apertura",50:"TK_llave_cierre",52:"TK_NULL",53:"TK_TRUE",54:"TK_FALSE",55:"TK_CARACTER",57:"TK_ENTERO",58:"TK_DECIMAL",59:"TK_BEGIN",60:"TK_END",61:"TK_CARETER_OF_POSITION",62:"TK_TOLOWERCASE",63:"TK_SUBSTRING",64:"TK_TOUPPERCASE",65:"TK_LENGTH",66:"TK_TYPEOF",69:"TK_MENOS",70:"TK_and",71:"TK_or",72:"TK_mayor_igual",73:"TK_menor_igual",74:"TK_mayor",75:"TK_menor",76:"TK_igualacion",77:"TK_desigual",78:"TK_INCREMENTO",79:"TK_DECREMENTO",80:"TK_MAS",81:"TK_numeral",82:"TK_POR",83:"TK_DIVIDIDO",84:"TK_not",85:"TK_SIN",86:"TK_COS",87:"TK_LOG",88:"TK_TAN",89:"TK_SQRT",90:"TK_POW",91:"TK_concat",92:"TK_potencia",93:"TK_MODULO",94:"TK_pregunta",95:"TK_dos_puntos",96:"TK_PRINT",97:"TK_PRINTLN",102:"TK_PUSH",103:"TK_POP",104:"TK_TOINT",105:"TK_TODOUBLE",106:"TK_FUNCTION",108:"TK_RETURN",111:"TK_IF",114:"TK_ELSEIF",115:"TK_ELSE",116:"TK_SWITCH",117:"TK_CASE",118:"TK_BREAK",120:"TK_DEFAULT",124:"TK_WHILE",125:"TK_DO",126:"TK_FOR",127:"TK_IN"},
productions_: [0,[3,2],[4,3],[4,2],[4,2],[4,1],[7,7],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[23,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[15,2],[15,6],[15,5],[15,1],[32,5],[32,6],[35,2],[35,1],[36,5],[36,3],[36,5],[36,3],[38,1],[38,1],[26,4],[26,3],[26,7],[26,5],[26,3],[26,2],[41,3],[41,2],[31,1],[25,1],[25,1],[25,1],[25,1],[25,1],[43,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,3],[51,4],[51,1],[51,1],[51,1],[51,1],[51,4],[51,3],[51,6],[51,3],[51,3],[51,4],[51,1],[67,3],[68,3],[68,1],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,3],[30,3],[30,4],[30,3],[30,3],[30,3],[30,2],[30,4],[30,4],[30,4],[30,4],[30,4],[30,6],[30,4],[30,2],[30,3],[30,3],[30,3],[30,3],[30,5],[30,3],[30,1],[16,5],[16,5],[16,7],[16,7],[17,4],[17,3],[17,5],[17,5],[17,4],[17,5],[17,4],[17,3],[17,3],[17,2],[17,3],[17,5],[17,2],[100,1],[100,3],[98,3],[98,2],[101,6],[101,5],[101,5],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[56,3],[56,2],[56,1],[18,4],[18,4],[19,8],[19,8],[19,9],[19,7],[42,2],[42,3],[42,2],[42,3],[107,4],[107,4],[107,3],[107,3],[107,3],[107,2],[20,3],[20,6],[20,2],[21,1],[21,1],[109,7],[109,8],[109,8],[109,5],[109,6],[109,6],[112,8],[112,9],[112,8],[112,7],[113,4],[113,2],[110,12],[110,10],[110,13],[110,11],[110,15],[119,7],[119,10],[119,6],[22,1],[22,1],[22,1],[121,7],[122,9],[123,11],[123,11],[123,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log($$[$0-1]); return $$[$0-1];
break;
case 2:
$$[$0-2].concat($$[$0-1]); $$[$0-2].concat($$[$0]); this.$ = $$[$0-2]
break;
case 3:
this.$ = $$[$0].concat($$[$0-1]);
break;
case 4:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 5:
this.$ =  [$$[$0]]
break;
case 6:
this.$ = new Instrucciones($$[$0-1],this._$.first_line,this._$.first_column,"MAIN")
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 24: case 25: case 26:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 27: case 28: case 29:
this.$ = [$$[$0]]
break;
case 23:
this.$ = new Instrucciones($$[$0],this._$.first_line,this._$.first_column,null)
break;
case 30: case 31: case 32: case 33: case 34: case 35: case 36:
this.$ = new Instrucciones([$$[$0]],this._$.first_line,this._$.first_column,null)
break;
case 37:
	var asignacion = $$[$0]; console.log(asignacion.expresion);
																							if(!Array.isArray(asignacion)){
																								console.log("entra al if");
																								 asignacion.tipo = $$[$0-1]; 
																								this.$ = asignacion;
																							}
																							else{
																								var tam = asignacion.length; console.log("el tamaño del vector es:" +tam);
																								//var inst = new Instrucciones([asignacion[0]],this._$.first_line,this._$.first_column,null);
																								for(var i=0;i<tam;i++){
																								console.log("DENTRO DEL FOR");
																								asignacion[i].tipo = $$[$0-1];
																								//var rec = asignacion[i];
																								//console.log(asignacion[i].tipo+" "+asignacion[i].id);
																								//this.$ = asignacion[i];
																								//console.log("el valor en inst es null = ")
																								//inst.instrucciones.push(asignacion[i]);
																								//this.$ = inst;
																								}
																								this.$ = asignacion;
																								//this.$ = asignacion;
																								//this.$ = new Instrucciones([asignacion],this._$.first_line,this._$.first_column,null);
																							}
																							
																						
break;
case 51:
this.$ = new Declaracion($$[$0-1],this._$.first_line,this._$.first_column,null,$$[$0-3])
break;
case 52:
var vec = $$[$0-1]; vec.push(new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0-2])); this.$ = vec;
break;
case 56:
this.$ = new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0-1]);
break;
case 57:
var vec = $$[$0-2]; vec.push(new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0])); this.$ = vec;
break;
case 58:
var vec = [new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0])]; this.$ = vec;
break;
case 60:
this.$= Tipo.STRING
break;
case 61:
this.$= Tipo.INTEGER
break;
case 62:
this.$= Tipo.BOOLEAN
break;
case 63:
this.$= Tipo.DOUBLE
break;
case 64:
this.$= Tipo.CHAR
break;
case 66:
console.log("cadena"+$$[$0]);var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.STRING,this._$.first_line,this._$.first_column);
break;
case 68:
this.$ = new Literal(true,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 69:
this.$ = new Literal(false,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 70:
var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.CHAR,this._$.first_line,this._$.first_column);
break;
case 71:
this.$ = new Acceso($$[$0],this._$.first_line,this._$.first_column);
break;
case 74:
this.$ = new Literal(parseInt($$[$0]),Tipo.INTEGER,this._$.first_line,this._$.first_column)
break;
case 75:
this.$ = new Literal(parseFloat($$[$0]),Tipo.DOUBLE,this._$.first_line,this._$.first_column);
break;
case 85:
this.$=$$[$0-1];
break;
case 86:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 87:
this.$=[$$[$0]]
break;
case 88:
this.$ = new Aritmetica( new Literal(-1,Tipo.INTEGER,this._$.first_line,this._$.first_column) ,$$[$0],TipoAritmetica.MULTIPLICACION,this._$.first_line,this._$.first_column)
break;
case 89:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.AND,this._$.first_line,this._$.first_column);
break;
case 90:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.OR,this._$.first_line,this._$.first_column);
break;
case 91:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 92:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 93:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_QUE,this._$.first_line,this._$.first_column);
break;
case 94:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_QUE,this._$.first_line,this._$.first_column);
break;
case 95:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALDAD,this._$.first_line,this._$.first_column);
break;
case 96:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.DESIGUALDAD,this._$.first_line,this._$.first_column);
break;
case 99:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA,this._$.first_line,this._$.first_column)
break;
case 100:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA,this._$.first_line,this._$.first_column)
break;
case 102:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION,this._$.first_line,this._$.first_column)
break;
case 103:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION,this._$.first_line,this._$.first_column)
break;
case 104:
this.$ = $$[$0-1]
break;
case 105:
this.$ = new Logica($$[$0],$$[$0],TipoLogica.NOT,this._$.first_line,this._$.first_column);
break;
case 106:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.SENO,this._$.first_line,this._$.first_column)
break;
case 107:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.COSENO,this._$.first_line,this._$.first_column)
break;
case 108:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.LOGARITMO,this._$.first_line,this._$.first_column)
break;
case 109:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.TANGENTE,this._$.first_line,this._$.first_column)
break;
case 110:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.RAIZ,this._$.first_line,this._$.first_column)
break;
case 111:
this.$ = new Aritmetica($$[$0-3],$$[$0-1],TipoAritmetica.POW,this._$.first_line,this._$.first_column)
break;
case 114:
 var a = $$[$0-2]; var al=a.length; var b = $$[$0]; var bl = b.length; var c = a.substring(1,al-1); var d = b.substring(1,bl-1); var total = c+d;  this.$ = total;
break;
case 115:
 this.$ = new Potencia($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 117:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO,this._$.first_line,this._$.first_column);
break;
case 118:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 120:
this.$ = $$[$0];
break;
case 121:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,false);
break;
case 122:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,true);
break;
case 123:
this.$ = new Print( new ExpComa($$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,false);
break;
case 124:
this.$ = new Print( new ExpComa($$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,true);
break;
case 125:
this.$ = new Asignacion($$[$0-1],this._$.first_line,this._$.first_column,$$[$0-3])
break;
case 136:
this.$ = new AsignarValorArray($$[$01],new AccesoArray($$[$0-2],new Acceso($$[$0-4],this._$.first_line,this._$.first_column), this._$.first_line,this._$.first_column), this._$.first_line,this._$.first_column);
break;
case 138: case 139:
console.log("si es correcto")
break;
case 156:
this.$ = new Funcion($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 157:
this.$ = new Funcion($$[$0-7],$$[$0-6],[new Parametro($$[$0-4],null,null,this._$.first_line,this._$.first_column)],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 158:
var nuevo = new Parametro($$[$0-5],null,null,this._$.first_line,this._$.first_column);
																																			 this.$ = new Funcion($$[$0-8],$$[$0-7],[nuevo].concat($$[$0-4]),$$[$0-2],this._$.first_line,this._$.first_column);
break;
case 159:
this.$ = new Funcion($$[$0-6],$$[$0-5],[],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 160:
this.$ = [new Parametro($$[$0],$$[$0-1],null,this._$.first_line,this._$.first_column)];
break;
case 161:
this.$ = [new Parametro($$[$0-1],$$[$0-2],null,this._$.first_line,this._$.first_column)].concat($$[$0]);
break;
case 162:
this.$ = [new Parametro($$[$0],Tipo.STRUCT,$$[$0-1],this._$.first_line,this._$.first_column)];
break;
case 163:
this.$ = [new Parametro($$[$0-1],Tipo.STRUCT,$$[$0-2],this._$.first_line,this._$.first_column)].concat($$[$0]);
break;
case 164:
this.$ = $$[$0-3].push(new Parametro($$[$0],$$[$0-1],null,this._$.first_line,this._$.first_column));
break;
case 165:
this.$ = $$[$0-3].push(new Parametro($$[$0-1],Tipo.STRUCT,$$[$0-1],this._$.first_line,this._$.first_column));
break;
case 166:
this.$ = $$[$0-2].push(new Parametro($$[$0],null,null,this._$.first_line,this._$.first_column));
break;
case 167:
this.$ = [new Parametro($$[$0-1],$$[$0-2],null,this._$.first_line,this._$.first_column)];
break;
case 168:
this.$ = [new Parametro($$[$0-1],Tipo.STRUCT,$$[$0-2],this._$.first_line,this._$.first_column)];
break;
case 169:
this.$ = [new Parametro($$[$0],null,null,this._$.first_line,this._$.first_column)];
break;
case 173: case 174:
this.$ = $$[$0]
break;
case 175:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 176: case 177:
$$[$0-2].nombre = "AmbienteIf"; this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 178:
$$[$0].nombre = "AmbienteIf"; this.$ = new If($$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column)
break;
case 179: case 180:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-3],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column)
break;
case 181:

																																									$$[$0-1].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column); 
																																									var valorcondicion = $$[$0-7];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse; 
																																									this.$ = $$[$0-7]
																																								
break;
case 182:

																																									$$[$0-2].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
																																									var valorcondicion = $$[$0-8];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse;
																																									this.$ = $$[$0-8]
																																								
break;
case 183:
$$[$0-2].nombre = "AmbienteElseIf"; 
																																								this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 184:
$$[$0-1].nombre = "AmbienteElseIf";
																																								this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 185:
$$[$0-1].nombre = "AmbienteElse";this.$ = $$[$0-1]
break;
case 186:
$$[$0].nombre = "AmbienteElse";this.$ = $$[$0]
break;
case 187:
$$[$0-3].nombre= "AmbienteSwitch";
																																																											this.$ = new Switch( $$[$0-9],$$[$0-5],$$[$0-3],null,this._$.first_line,this._$.first_column);
																																																											
break;
case 188:
$$[$0-1].nombre= "AmbienteSwitch";
																																																											this.$ = new Switch( $$[$0-7],$$[$0-3],$$[$0-1],null,this._$.first_line,this._$.first_column);
																																																											
break;
case 189:
$$[$0-4].nombre= "AmbienteSwitch"; 
																																																											var sentenciascase = $$[$0-1];
																																																											while(sentenciascase!= null){
																																																												sentenciascase.condicionswitch = $$[$0-10];
																																																												sentenciascase = sentenciascase.condiciondefault;
																																																											}
																																																											this.$ = new Switch( $$[$0-10],$$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column);
																																																											
break;
case 190:
$$[$0-2].nombre= "AmbienteSwitch"; 
																																																											var sentenciascase = $$[$0-1];
																																																											var expresiones = $$[$0-8];
																																																											while(sentenciascase!= null){
																																																												sentenciascase.condicionswitch = $$[$0-8];
																																																												expresiones.push(sentenciascase.instrucciones);
																																																												sentenciascase = sentenciascase.condiciondefault;
																																																											}
																																																											this.$ = new Switch( $$[$0-8],$$[$0-4],$$[$0-2],$$[$01],this._$.first_line,this._$.first_column);
																																																											
break;
case 191:
$$[$0-6].nombre= "AmbienteSwitch";
																																																											$$[$0].condicionswitch = $$[$0-12];  this.$ = new Switch( $$[$0-12],$$[$0-8],$$[$0-6],$$[$0],this._$.first_line,this._$.first_column);
																																																											
break;
case 192:

																																			console.log("entra en case:");
																																			$$[$0-3].nombre= "AmbienteCase";
																																			var Vcase = new Switch($$[$0-6].condicionswitch,$$[$0-4],$$[$0-2],null,this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-6];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			$$[$0-6].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			console.log("sube el valor nulo creo: "+$$[$0-6].condicionswitch+"  aca tambien vacio creo anterior "+valorcondicion.condicionswitch);
																																			this.$ = $$[$0-6];
																																		
break;
case 193:

																																			//console.log("case: "+$$[$0-8].valor);
																																			$$[$0-6].nombre= "AmbienteCase";
																																			var Vcase = new Switch($$[$0-9].condicionswitch,$$[$0-7],$$[$0-5],$$[$0],this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-9];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			if(valorcondicion.condicionswitch == null){
																																				console.log("la condicion switch de la ultima iteracion es null")
																																			}
																																			$$[$0-9].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			this.$ = $$[$0-9];
																																		
break;
case 194:
console.log("entra al solitario case");$$[$0-2].nombre= "AmbienteCase";this.$ = new Switch(null,$$[$0-4],$$[$0-2],null,this._$.first_line,this._$.first_column)
break;
case 198:
this.$ = new While($$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 199:
this.$ = new DoWhile($$[$0-2],$$[$0-6],this._$.first_line,this._$.first_column);
break;
case 200:
this.$ = new For($$[$0-8].id,$$[$0-8],$$[$0-7],TipoAumento.INCREMENTO,TipoFor.CLASICO,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 201:
this.$ = new For($$[$0-8].id,$$[$0-8],$$[$0-7],TipoAumento.DECREMENTO,TipoFor.CLASICO,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 202:
console.log("Tipo en forin: "+$$[$0-3].tipo);this.$ = new For($$[$0-5],0,$$[$0-3],TipoAumento.DECREMENTO,TipoFor.FORIN,$$[$0-1],this._$.first_line,this._$.first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,15:6,17:5,19:7,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,106:$V8},{1:[3]},{5:[1,19]},{7:20,8:$V0,15:22,17:21,19:23,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,106:$V8},{5:[2,5],6:24,15:6,17:5,19:7,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,106:$V8},o($V9,[2,27]),o($V9,[2,28]),o($V9,[2,29]),{9:[1,25]},{10:[1,30],27:[1,36],34:[1,27],37:[1,26],49:[1,34],67:33,72:[1,37],73:[1,38],74:[1,39],75:[1,40],76:[1,41],77:[1,42],78:[1,32],79:[1,31],98:28,99:29,101:35},{10:[1,45],26:43,27:[1,44],34:[1,46],43:47,49:[1,48]},o($Va,[2,40]),{34:[1,49]},o($Vb,[2,60]),o($Vb,[2,61]),o($Vb,[2,62]),o($Vb,[2,63]),o($Vb,[2,64]),{34:[1,50]},{1:[2,1]},{5:[2,4],6:51,15:6,17:5,19:7,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,106:$V8},o($V9,[2,24]),o($V9,[2,25]),o($V9,[2,26]),{5:[2,3],15:22,17:21,19:23,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,106:$V8},{10:[1,52]},{10:$Vc,18:83,28:$Vd,29:$Ve,30:53,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{31:86,37:[1,87],40:$VG},{27:[1,90],37:[1,89]},{10:$Vc,18:83,28:$Vd,29:$Ve,30:91,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,11:[1,93],18:83,28:$Vd,29:$Ve,30:94,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,100:92,104:$VE,105:$VF},{31:95,40:$VG},{31:96,40:$VG},o($Va,[2,134],{37:[1,97]}),{10:$Vc,18:83,28:$Vd,29:$Ve,30:100,34:$Vf,49:$Vg,50:[1,98],51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,68:99,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($Va,[2,137]),{34:[1,101],65:[1,104],102:[1,102],103:[1,103]},o($VH,[2,145]),o($VH,[2,146]),o($VH,[2,147]),o($VH,[2,148]),o($VH,[2,149]),o($VH,[2,150]),o($Va,[2,37]),{28:[1,105]},{10:$Vc,18:83,28:$Vd,29:$Ve,30:106,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:[1,109],31:110,37:[1,107],39:[1,111],40:$VG,41:108},{34:[1,112]},{50:[1,113]},{10:[1,114]},{12:[1,115]},{5:[2,2],15:22,17:21,19:23,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,106:$V8},{11:[1,116]},{27:$VI,31:117,40:$VG,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{10:$Vc,18:83,28:$Vd,29:$Ve,30:138,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:139,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:140,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:[1,141]},{10:[1,142]},{10:[1,143]},{10:[1,144]},{10:[1,145]},{10:[1,146]},{10:[1,147]},{10:$Vc,18:83,28:$Vd,29:$Ve,30:148,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:100,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,68:149,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($V01,[2,120]),o($V01,[2,66]),o($V01,[2,67]),o($V01,[2,68]),o($V01,[2,69]),o($V01,[2,70]),o($V01,$V11,{10:$V21}),o($V01,[2,74]),o($V01,[2,75]),o($V01,[2,76]),o($V01,[2,77]),{10:[1,151]},{10:[1,152]},{10:[1,153]},{10:[1,154]},{10:[1,155]},{10:[1,156]},o($V01,[2,84]),{10:[1,157]},{10:[1,158]},o($Va,[2,126]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:159,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($Va,[2,59]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:160,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{34:[1,161]},{27:$VI,31:162,40:$VG,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,163]},{31:164,40:$VG},{11:[2,138],27:$VI,39:[1,165],69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o($Va,[2,132]),o($Va,[2,133]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:166,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($Va,[2,135]),{39:$V31,50:[1,167]},o($V41,[2,87],{27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$}),o($V51,[2,141]),{10:[1,169]},{10:[1,170]},{10:[1,171]},{10:[1,172]},{11:[1,173],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{10:$Vc,18:83,28:$Vd,29:$Ve,30:174,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{31:175,39:[1,176],40:$VG},{25:178,34:[1,179],42:177,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7},o($Va,[2,56]),{34:[1,180]},{31:182,37:[1,181],40:$VG},{34:[2,65]},{11:[1,185],25:178,34:[1,184],42:183,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7},{14:[1,186],25:189,34:$V61,35:187,36:188,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7},{12:[1,191]},o($Va,[2,125]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:192,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:193,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:194,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:195,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:196,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:197,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:198,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:199,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($V01,[2,97]),o($V01,[2,98]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:200,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:201,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{82:[1,202]},{10:$Vc,18:83,28:$Vd,29:$Ve,30:203,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:204,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:205,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:206,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:207,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:208,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:209,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($V01,[2,88]),{11:[1,210],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o($V71,[2,105],{78:$VS,79:$VT}),{10:$Vc,18:83,28:$Vd,29:$Ve,30:211,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:212,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:213,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:214,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:215,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:216,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:217,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($V71,[2,113],{78:$VS,79:$VT}),{39:$V31,50:[1,218]},{10:$Vc,11:$V81,18:83,28:$Vd,29:$Ve,30:222,34:$Vf,39:$V91,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:220,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{18:83,29:$Ve,34:$Vf,51:223,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,104:$VE,105:$VF},{11:[1,224]},{18:83,29:$Ve,34:$Vf,51:225,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,104:$VE,105:$VF},{11:[1,226]},{11:[1,227]},{10:$Vc,18:83,28:$Vd,29:$Ve,30:228,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:229,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:230,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{27:$VI,31:231,40:$VG,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{27:$VI,31:232,40:$VG,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o($V51,[2,140]),o($Va,[2,129]),{31:233,40:$VG},o($Va,[2,131]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:94,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,100:234,104:$VE,105:$VF},{27:$VI,31:235,40:$VG,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o([5,8,10,14,28,29,33,34,37,44,45,46,47,48,49,52,53,54,55,57,58,59,60,61,62,63,64,65,66,69,81,84,85,86,87,88,89,90,96,97,104,105,106,108,111,114,115,116,117,118,124,125,126],[2,85]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:236,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:237,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{11:[1,238]},{11:[1,239]},{29:[1,240]},{31:241,40:$VG},{27:$VI,31:242,40:$VG,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o($Va,[2,52]),{34:[1,243]},{11:[1,244]},{34:[1,245]},{34:$Va1},o($Vb1,[2,58]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:247,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($Va,[2,55]),{11:[1,248]},{11:[1,249],34:$Va1,39:$Vc1,107:250},{12:[1,252]},{31:253,40:$VG},{14:[1,254],25:189,34:$V61,36:255,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7},o($Vd1,[2,44]),{34:[1,256]},{34:[1,257]},{13:258,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},o([11,12,27,39,40,50,70,71,94,95],[2,89],{69:$VJ,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_}),o([11,12,27,39,40,50,71,94,95],[2,90],{69:$VJ,70:$VK,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_}),o($Vm1,[2,91],{69:$VJ,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,93:$V_}),o($Vm1,[2,92],{69:$VJ,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,93:$V_}),o($Vm1,[2,93],{69:$VJ,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,93:$V_}),o($Vm1,[2,94],{69:$VJ,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,93:$V_}),o($Vn1,[2,95],{69:$VJ,72:$VM,73:$VN,74:$VO,75:$VP,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,93:$V_}),o($Vn1,[2,96],{69:$VJ,72:$VM,73:$VN,74:$VO,75:$VP,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,93:$V_}),o($Vo1,[2,99],{78:$VS,79:$VT,81:$VV,82:$VW,83:$VX,93:$V_}),o($Vo1,[2,100],{78:$VS,79:$VT,81:$VV,82:$VW,83:$VX,93:$V_}),{10:$Vc,18:83,28:$Vd,29:$Ve,30:280,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($Vp1,[2,102],{78:$VS,79:$VT,81:$VV}),o($Vp1,[2,103],{78:$VS,79:$VT,81:$VV}),o([11,12,27,39,40,50,70,71,91,92,94,95],[2,114],{69:$VJ,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,93:$V_}),o([11,12,27,39,40,50,70,71,92,94,95],[2,115],{69:$VJ,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,93:$V_}),o([11,12,27,39,40,50,95],[2,116],{69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$}),o($Vp1,[2,117],{78:$VS,79:$VT,81:$VV}),{27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$,95:[1,281]},o($V01,[2,104]),{11:[1,282],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,283],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,284],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,285],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,286],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{27:$VI,39:[1,287],69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,288],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o($V01,[2,119]),o($V01,[2,72]),{11:[1,289],39:[1,290]},{10:$Vc,18:83,28:$Vd,29:$Ve,30:291,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($Vq1,[2,153],{27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$}),{11:[1,292]},o($V01,[2,79]),{39:[1,293]},o($V01,[2,81]),o($V01,[2,82]),{11:[1,294],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,295],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,296],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o($Va,[2,127]),o($Va,[2,128]),o($Va,[2,130]),{11:[2,139]},o($Va,[2,136]),o($V41,[2,86],{27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$}),{11:[1,297],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{40:[1,298]},{40:[1,299]},{11:[1,300]},o($Va,[2,39]),o($Va,[2,51]),o($Vb1,[2,57]),{12:[1,301]},{11:[2,160],39:$Vc1,107:302},{11:[2,162],39:$Vc1,107:303},{27:$VI,31:304,40:$VG,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{12:[1,305]},{12:[1,306]},{11:[1,307],39:$Vr1},{25:309,34:[1,310],44:$V3,45:$V4,46:$V5,47:$V6,48:$V7},{13:311,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},o($Va,[2,41]),{31:312,40:$VG},o($Vd1,[2,43]),{37:[1,313],38:314,39:$Vs1,40:$Vt1},{37:[1,317],38:318,39:$Vs1,40:$Vt1},{14:[1,319],15:320,16:321,17:322,18:323,19:324,20:325,21:326,22:327,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},o($Vu1,[2,15]),o($Vu1,[2,16]),o($Vu1,[2,17]),o($Vu1,[2,18]),o($Vu1,[2,19]),o($Vu1,[2,20]),o($Vu1,[2,21]),o($Vu1,[2,22]),{10:[1,328]},{10:[1,329]},{10:$Vc,18:83,28:$Vd,29:$Ve,30:330,31:332,34:[1,331],40:$VG,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($Vu1,[2,173]),o($Vu1,[2,174]),o($Vv1,[2,195]),o($Vv1,[2,196]),o($Vv1,[2,197]),{10:[1,333]},{10:[1,334]},{10:[1,335]},{12:[1,336]},{10:[1,337],34:[1,338]},o($V71,[2,101],{78:$VS,79:$VT}),{10:$Vc,18:83,28:$Vd,29:$Ve,30:339,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($V01,[2,106]),o($V01,[2,107]),o($V01,[2,108]),o($V01,[2,109]),o($V01,[2,110]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:340,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($V01,[2,112]),o($V01,[2,73]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:341,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($Vq1,[2,152],{27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$}),o($V01,[2,78]),{18:83,29:$Ve,34:$Vf,51:342,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,104:$VE,105:$VF},o($V01,[2,83]),o($Vw1,[2,154]),o($Vw1,[2,155]),{40:[1,343]},o($Va,[2,143]),o($Va,[2,144]),o($Va,[2,38]),{13:344,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{11:[2,161],39:$Vr1},{11:[2,163],39:$Vr1},o($Va,[2,54]),{13:345,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{13:346,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{12:[1,347]},{25:348,34:[1,349],44:$V3,45:$V4,46:$V5,47:$V6,48:$V7},{34:[1,350]},o($Vq1,[2,169],{34:[1,351]}),{14:[1,352],15:320,16:321,17:322,18:323,19:324,20:325,21:326,22:327,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},o($Va,[2,42]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:353,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($Vd1,[2,46]),o($Vd1,[2,49]),o($Vd1,[2,50]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:354,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($Vd1,[2,48]),o([5,33,34,44,45,46,47,48,106],[2,6]),o($Vu1,[2,7]),o($Vu1,[2,8]),o($Vu1,[2,9]),o($Vu1,[2,10]),o($Vu1,[2,11]),o($Vu1,[2,12]),o($Vu1,[2,13]),o($Vu1,[2,14]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:355,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:356,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{27:$VI,31:357,40:$VG,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o([27,40,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,92,93,94],$V11,{10:[1,358]}),o($Vv1,[2,172]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:359,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:360,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:361,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:362,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{15:364,17:365,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7},{127:[1,366]},o([11,12,27,39,40,50,94,95],[2,118],{69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_}),{11:[1,367],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o($Vq1,[2,151],{27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$}),{11:[1,368]},o($Va,[2,142]),{14:[1,369],15:320,16:321,17:322,18:323,19:324,20:325,21:326,22:327,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{14:[1,370],15:320,16:321,17:322,18:323,19:324,20:325,21:326,22:327,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{14:[1,371],15:320,16:321,17:322,18:323,19:324,20:325,21:326,22:327,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{13:372,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{34:[1,373]},o($Vq1,[2,166],{34:[1,374]}),o($Vq1,[2,167]),o($Vq1,[2,168]),o($Vx1,[2,159]),{27:$VI,38:375,39:$Vs1,40:$Vt1,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{27:$VI,38:376,39:$Vs1,40:$Vt1,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,377],27:$VI,39:[1,378],69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,379],27:$VI,39:[1,380],69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o($Vv1,[2,170]),{10:$Vc,11:$V81,18:83,25:178,28:$Vd,29:$Ve,30:222,34:[1,382],39:$V91,42:381,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:220,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{11:[1,383],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,384],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,385],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{14:[1,386]},o([14,117,118],[2,23],{25:10,32:11,109:270,110:271,121:272,122:273,123:274,15:320,16:321,17:322,18:323,19:324,20:325,21:326,22:327,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,111:$Vh1,116:$Vi1,124:$Vj1,125:$Vk1,126:$Vl1}),{10:$Vc,18:83,28:$Vd,29:$Ve,30:387,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:388,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{10:$Vc,18:83,28:$Vd,29:$Ve,30:389,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},o($V01,[2,111]),o($V01,[2,80]),o($Va,[2,53]),o($Vx1,[2,156]),o($Vx1,[2,157]),{14:[1,390],15:320,16:321,17:322,18:323,19:324,20:325,21:326,22:327,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},o($Vq1,[2,164]),o($Vq1,[2,165]),o($Vd1,[2,45]),o($Vd1,[2,47]),{31:391,40:$VG},{10:$Vc,18:83,28:$Vd,29:$Ve,30:392,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{31:393,40:$VG},{10:$Vc,18:83,28:$Vd,29:$Ve,30:394,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{11:[1,395]},o([11,27,39,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,92,93,94],$V11,{10:$V21,34:$Va1}),{12:[1,396],15:398,16:399,17:400,18:401,19:402,20:403,22:404,24:397,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{12:[1,405]},{12:[1,406]},{124:[1,407]},{27:$VI,40:[1,408],69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{27:$VI,40:[1,409],69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{12:[1,410],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o($Vx1,[2,158]),o($Vv1,[2,121]),{11:[1,411],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},o($Vv1,[2,122]),{11:[1,412],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{31:413,40:$VG},{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:414,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},o($Vu1,[2,178],{112:415,113:416,114:$Vy1,115:$Vz1}),o($Vv1,[2,30]),o($Vv1,[2,31]),o($Vv1,[2,32]),o($Vv1,[2,33]),o($Vv1,[2,34]),o($Vv1,[2,35]),o($Vv1,[2,36]),{117:[1,419]},{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:420,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{10:[1,421]},{34:[1,422]},{34:[1,423]},{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:424,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{31:425,40:$VG},{31:426,40:$VG},o($Vv1,[2,171]),{14:[1,427]},o($Vu1,[2,179],{114:$VA1}),o($Vu1,[2,180]),{10:[1,429]},{12:[1,430],15:398,16:399,17:400,18:401,19:402,20:403,22:404,24:431,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{10:$Vc,18:83,28:$Vd,29:$Ve,30:432,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{14:[1,433]},{10:$Vc,18:83,28:$Vd,29:$Ve,30:434,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{78:[1,435]},{79:[1,436]},{14:[1,437]},o($Vv1,[2,123]),o($Vv1,[2,124]),o($Vu1,[2,175],{112:438,113:439,114:$Vy1,115:$Vz1}),{10:[1,440]},{10:$Vc,18:83,28:$Vd,29:$Ve,30:441,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{15:398,16:399,17:400,18:401,19:402,20:403,22:404,24:442,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},o($VB1,[2,186]),{27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$,95:[1,443]},o($Vv1,[2,198]),{11:[1,444],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{11:[1,445]},{11:[1,446]},o($Vv1,[2,202]),o($Vu1,[2,176],{114:$VA1}),o($Vu1,[2,177]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:447,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{11:[1,448],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{14:[1,449]},{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:450,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{40:[1,451]},{12:[1,452]},{12:[1,453]},{11:[1,454],27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$},{12:[1,455]},o($VB1,[2,185]),{14:[1,457],117:$VC1,118:[1,456],119:458},o($Vv1,[2,199]),{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:460,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:461,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{12:[1,462]},{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:463,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{40:[1,464]},o($Vu1,[2,188]),{14:[1,465],117:$VD1},{10:$Vc,18:83,28:$Vd,29:$Ve,30:467,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{14:[1,468]},{14:[1,469]},{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:470,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{14:[1,471]},{14:[1,472],117:$VC1,119:473,120:[1,474]},o($Vu1,[2,190]),{10:$Vc,18:83,28:$Vd,29:$Ve,30:475,34:$Vf,49:$Vg,51:66,52:$Vh,53:$Vi,54:$Vj,55:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,69:$Vv,81:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,104:$VE,105:$VF},{27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$,95:[1,476]},o($Vv1,[2,200]),o($Vv1,[2,201]),{14:[1,477]},o($VB1,[2,184],{113:478,115:$Vz1}),o($Vu1,[2,187]),{14:[1,479],117:$VD1},{95:[1,480]},{27:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX,91:$VY,92:$VZ,93:$V_,94:$V$,95:[1,481]},{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:482,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},o($VB1,[2,181],{113:483,115:$Vz1}),o($VB1,[2,183]),o($Vu1,[2,189]),{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:484,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:485,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},{118:[1,486]},o($VB1,[2,182]),{14:[1,487]},{118:[1,488]},{40:[1,489]},o($Vu1,[2,191]),{40:[1,490]},o($VE1,[2,194]),o($VE1,[2,192],{120:[1,491]}),{95:[1,492]},{13:363,15:259,16:260,17:261,18:262,19:263,20:264,21:265,22:266,23:493,25:10,32:11,33:$V1,34:$V2,44:$V3,45:$V4,46:$V5,47:$V6,48:$V7,96:$Ve1,97:$Vf1,104:$VE,105:$VF,106:$V8,108:$Vg1,109:270,110:271,111:$Vh1,116:$Vi1,121:272,122:273,123:274,124:$Vj1,125:$Vk1,126:$Vl1},o($VE1,[2,193])],
defaultActions: {19:[2,1],113:[2,65],234:[2,139]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	//para el objeto de impresion
	function FImpresion(_tipoimpresion,_valorimpresion,_raro){
		return {tipo:_tipoimpresion, valor:_valorimpresion,What:_raro};
	}

	//para declaraciones de funciones
	function FDeclaracion(_tipo,_nombre,_valor){
		return {tipo:_tipo,nombre:_nombre,valorvar:_valor};
	}

	//almacenamiento de errores
	function FErrores(_tipo,_caracter,_fila,_columna,_descrip){
		return{tipo:_tipo,Caracter:_caracter,Fila:_fila,Columna:_columna,Descripcion:_descrip};
	}

	var GexpresionSwitch ;


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://return 'TK_COMENTARIO';// comentario simple línea
break;
case 1://return 'TK_COMENTARIO_MULTI';//; comentario multiple líneas
break;
case 2:return 52;
break;
case 3:return 45;
break;
case 4:return 47;
break;
case 5:return 46;
break;
case 6:return 48;
break;
case 7:return 44;
break;
case 8:return 33;
break;
case 9:return 90;
break;
case 10:return 89;
break;
case 11:return 85;
break;
case 12:return 86;
break;
case 13:return 88;
break;
case 14:return 87;
break;
case 15:return 61;
break;
case 16:return 63;
break;
case 17:return 65;
break;
case 18:return 64;
break;
case 19:return 62;
break;
case 20:return 96;
break;
case 21:return 97;
break;
case 22:return 28;
break;
case 23:return 104;
break;
case 24:return 105;
break;
case 25:return 66;
break;
case 26:return 106;
break;
case 27:return 108;
break;
case 28:return 111;
break;
case 29:return 114;
break;
case 30:return 115;
break;
case 31:return 116;
break;
case 32:return 117;
break;
case 33:return 120;
break;
case 34:return 118;
break;
case 35:return 124;
break;
case 36:return 125;
break;
case 37:return 126;
break;
case 38:return 127;
break;
case 39:return 102;
break;
case 40:return 103;
break;
case 41:return 59;
break;
case 42:return 60;
break;
case 43:return 'TK_CONTINUE';
break;
case 44:return 53;
break;
case 45:return 54;
break;
case 46:return 9;
break;
case 47:return 8;
break;
case 48:return 78
break;
case 49:return 79
break;
case 50:return 80;
break;
case 51:return 69;
break;
case 52:return 82;
break;
case 53:return 83;
break;
case 54:return 93
break;
case 55:return 10;
break;
case 56:return 11;
break;
case 57:return 12;
break;
case 58:return 14;
break;
case 59:return 49;
break;
case 60:return 50;
break;
case 61:return 95;
break;
case 62:return 40;
break;
case 63:return 39;
break;
case 64:return 27;
break;
case 65:return 76;
break;
case 66:return 37;
break;
case 67:return 77;
break;
case 68:return 72;
break;
case 69:return 73;
break;
case 70:return 75;
break;
case 71:return 74;
break;
case 72:return 70;
break;
case 73:return 71;
break;
case 74:return 84;
break;
case 75:return 91;
break;
case 76:return 92;
break;
case 77:return 81;
break;
case 78:return 'TK_dolar';
break;
case 79:return 94;
break;
case 80://return 'TK_SALTO_LINEA'
break;
case 81:// se ignoran espacios en blanco
break;
case 82:return 58; 
break;
case 83:return 57;   
break;
case 84:return 29;
break;
case 85:return 55;
break;
case 86:return 34;
break;
case 87:return 5;
break;
case 88:lisErr.push({err: 'Error Lexico', lex: yy_.yytext, fil: yy_.yylloc.first_line, col: yy_.yylloc.first_column, des:'Simbolo Desconocido'}); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*(\*(?!\/)|[^*])*\*\/\n)/i,/^(?:null\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:struct\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:log10\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:subString\b)/i,/^(?:length\b)/i,/^(?:toUppercase\b)/i,/^(?:toLowercase\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:parse\b)/i,/^(?:toInt\b)/i,/^(?:toDouble\b)/i,/^(?:typeof\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:else if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:continue\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,12],$V2=[1,9],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,20],$V9=[10,28,33,43,52],$Va=[2,67],$Vb=[5,8,33,36,47,48,49,50,51],$Vc=[1,33],$Vd=[1,35],$Ve=[1,34],$Vf=[2,141],$Vg=[1,54],$Vh=[1,65],$Vi=[1,81],$Vj=[1,80],$Vk=[1,76],$Vl=[1,78],$Vm=[1,77],$Vn=[1,63],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,71],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,53],$Vy=[1,62],$Vz=[1,55],$VA=[1,56],$VB=[1,57],$VC=[1,58],$VD=[1,59],$VE=[1,60],$VF=[1,61],$VG=[1,82],$VH=[1,83],$VI=[5,8,10,14,30,33,36,38,47,48,49,50,51,52,55,56,57,58,60,61,62,63,64,68,80,83,84,85,86,87,88,89,95,96,107,108,109,110,111,114,117,118,119,120,122,126,127,128],$VJ=[10,30,33,47,48,49,50,52,55,56,57,58,60,61,62,63,64,68,80,83,84,85,86,87,88,89,107,108],$VK=[1,124],$VL=[1,113],$VM=[1,114],$VN=[1,115],$VO=[1,116],$VP=[1,117],$VQ=[1,118],$VR=[1,119],$VS=[1,120],$VT=[1,121],$VU=[1,122],$VV=[1,123],$VW=[1,125],$VX=[1,126],$VY=[1,127],$VZ=[1,128],$V_=[1,129],$V$=[1,130],$V01=[1,131],$V11=[11,12,40,41,53,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94],$V21=[1,161],$V31=[10,11,12,28,40,41,42,52,53,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94],$V41=[8,14,33,38,47,48,49,50,51],$V51=[11,12,40,41,53,68,69,70,71,72,73,74,75,76,79,80,81,82,90,91,92,93,94],$V61=[40,53],$V71=[1,231],$V81=[1,245],$V91=[40,41],$Va1=[1,251],$Vb1=[1,262],$Vc1=[1,263],$Vd1=[1,264],$Ve1=[1,265],$Vf1=[1,266],$Vg1=[1,272],$Vh1=[1,273],$Vi1=[1,274],$Vj1=[1,275],$Vk1=[1,276],$Vl1=[11,12,40,41,53,69,70,71,72,73,74,75,76,90,91,93,94],$Vm1=[11,12,40,41,53,69,70,75,76,90,91,93,94],$Vn1=[11,12,40,41,53,68,69,70,71,72,73,74,75,76,79,90,91,93,94],$Vo1=[11,12,40,41,53,68,69,70,71,72,73,74,75,76,79,81,82,90,91,92,93,94],$Vp1=[11,40,53],$Vq1=[1,310],$Vr1=[1,318],$Vs1=[8,14,33,47,48,49,50,51,95,96,107,108,109,110,111,114,119,120,122,126,127,128],$Vt1=[8,14,33,47,48,49,50,51,95,96,107,108,109,110,111,114,117,118,119,120,122,126,127,128],$Vu1=[11,12,40,41,53,94],$Vv1=[8,11,12,14,33,40,41,47,48,49,50,51,53,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,107,108,109,110,111,114,117,118,119,120,122,126,127,128],$Vw1=[11,40],$Vx1=[11,40,41],$Vy1=[1,415],$Vz1=[1,416],$VA1=[1,424],$VB1=[8,14,33,47,48,49,50,51,95,96,107,108,109,110,111,114,117,119,120,122,126,127,128],$VC1=[14,120];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"VOID_MAIN":6,"INSTRUCCIONES_GLOBALES":7,"TK_VOID":8,"TK_MAIN":9,"TK_par_apertura":10,"TK_par_cierre":11,"TK_corchete_apertura":12,"INSTRUCCION":13,"TK_corchete_cierre":14,"DECLARACION":15,"IMPRESION":16,"ASIGNACION":17,"FUNCIONES_NATIVAS":18,"BREAK":19,"RETURN":20,"CONDICIONALES":21,"BUCLES":22,"LISTA_INSTRUCCIONES":23,"STRUCT":24,"INSTRUCCION2":25,"TIPO_VALOR":26,"TIPO_DECLARACION":27,"TK_punto":28,"TK_PARSE":29,"TK_CADENA":30,"EXPRESIONARIT":31,"FIN_LINEA":32,"TK_ID":33,"PARAMETRO_FUNSION":34,"MAS_PARAMETROS_FUNSION":35,"TK_STRUCT":36,"CONTENIDO_STRUCT":37,"IMPRECION":38,"FIN_LINEA_STRUCT":39,"TK_coma":40,"TK_pcoma":41,"TK_igual":42,"TK_ID_":43,"MAS_VALORES_IMPRESION":44,"MAS_VARIABLES":45,"COND_ARREGLO":46,"TK_STRING":47,"TK_INT":48,"TK_BOOLEAN":49,"TK_DOUBLE":50,"TK_CHAR":51,"TK_llave_apertura":52,"TK_llave_cierre":53,"VALORES":54,"TK_NULL":55,"TK_TRUE":56,"TK_FALSE":57,"TK_CARACTER":58,"ACCESSOATRIBUTO":59,"TK_ENTERO":60,"TK_DECIMAL":61,"TK_BEGIN":62,"TK_END":63,"TK_TYPEOF":64,"PARAMETROS_EXTRA":65,"ARREGLO":66,"LISTA_ARREGLO":67,"TK_MENOS":68,"TK_and":69,"TK_or":70,"TK_mayor_igual":71,"TK_menor_igual":72,"TK_mayor":73,"TK_menor":74,"TK_igualacion":75,"TK_desigual":76,"TK_INCREMENTO":77,"TK_DECREMENTO":78,"TK_MAS":79,"TK_numeral":80,"TK_POR":81,"TK_DIVIDIDO":82,"TK_not":83,"TK_SIN":84,"TK_COS":85,"TK_LOG":86,"TK_TAN":87,"TK_SQRT":88,"TK_POW":89,"TK_concat":90,"TK_potencia":91,"TK_MODULO":92,"TK_pregunta":93,"TK_dos_puntos":94,"TK_PRINT":95,"TK_PRINTLN":96,"TK_CARETER_OF_POSITION":97,"TK_SUBSTRING":98,"TK_LENGTH":99,"TK_TOUPPERCASE":100,"TK_TOLOWERCASE":101,"SIGNOS_COMPARACION":102,"FUNCIONES_ARREGLO":103,"TK_PUSH":104,"TK_POP":105,"PARAMETROS":106,"TK_TOINT":107,"TK_TODOUBLE":108,"TK_RETURN":109,"TK_BREAK":110,"TK_CONTINUE":111,"FUNCION_IF":112,"FUNCION_SWITCH":113,"TK_IF":114,"FUNCION_ELSEIF":115,"FUNCION_ELSE":116,"TK_ELSEIF":117,"TK_ELSE":118,"TK_SWITCH":119,"TK_CASE":120,"SENTENCIAS_CASE":121,"TK_DEFAULT":122,"BUCLE_WHILE":123,"BUCLE_DO_WHILE":124,"BUCLE_FOR":125,"TK_WHILE":126,"TK_DO":127,"TK_FOR":128,"TK_IN":129,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_VOID",9:"TK_MAIN",10:"TK_par_apertura",11:"TK_par_cierre",12:"TK_corchete_apertura",14:"TK_corchete_cierre",28:"TK_punto",29:"TK_PARSE",30:"TK_CADENA",33:"TK_ID",36:"TK_STRUCT",38:"IMPRECION",40:"TK_coma",41:"TK_pcoma",42:"TK_igual",43:"TK_ID_",47:"TK_STRING",48:"TK_INT",49:"TK_BOOLEAN",50:"TK_DOUBLE",51:"TK_CHAR",52:"TK_llave_apertura",53:"TK_llave_cierre",55:"TK_NULL",56:"TK_TRUE",57:"TK_FALSE",58:"TK_CARACTER",60:"TK_ENTERO",61:"TK_DECIMAL",62:"TK_BEGIN",63:"TK_END",64:"TK_TYPEOF",68:"TK_MENOS",69:"TK_and",70:"TK_or",71:"TK_mayor_igual",72:"TK_menor_igual",73:"TK_mayor",74:"TK_menor",75:"TK_igualacion",76:"TK_desigual",77:"TK_INCREMENTO",78:"TK_DECREMENTO",79:"TK_MAS",80:"TK_numeral",81:"TK_POR",82:"TK_DIVIDIDO",83:"TK_not",84:"TK_SIN",85:"TK_COS",86:"TK_LOG",87:"TK_TAN",88:"TK_SQRT",89:"TK_POW",90:"TK_concat",91:"TK_potencia",92:"TK_MODULO",93:"TK_pregunta",94:"TK_dos_puntos",95:"TK_PRINT",96:"TK_PRINTLN",97:"TK_CARETER_OF_POSITION",98:"TK_SUBSTRING",99:"TK_LENGTH",100:"TK_TOUPPERCASE",101:"TK_TOLOWERCASE",104:"TK_PUSH",105:"TK_POP",107:"TK_TOINT",108:"TK_TODOUBLE",109:"TK_RETURN",110:"TK_BREAK",111:"TK_CONTINUE",114:"TK_IF",117:"TK_ELSEIF",118:"TK_ELSE",119:"TK_SWITCH",120:"TK_CASE",122:"TK_DEFAULT",126:"TK_WHILE",127:"TK_DO",128:"TK_FOR",129:"TK_IN"},
productions_: [0,[3,2],[4,1],[4,2],[4,2],[4,3],[6,7],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[23,1],[7,2],[7,2],[7,2],[7,1],[7,1],[7,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[15,2],[15,6],[15,5],[15,8],[15,8],[15,9],[15,7],[24,5],[24,6],[37,2],[37,2],[37,2],[37,1],[37,1],[37,1],[39,1],[39,1],[27,4],[27,5],[27,3],[27,5],[27,3],[27,2],[45,3],[45,2],[32,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[46,2],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,4],[54,4],[54,4],[54,4],[54,1],[54,4],[54,5],[54,4],[66,3],[67,3],[67,1],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,3],[31,3],[31,4],[31,3],[31,3],[31,3],[31,2],[31,4],[31,5],[31,4],[31,5],[31,4],[31,5],[31,4],[31,5],[31,4],[31,5],[31,6],[31,7],[31,2],[31,3],[31,3],[31,3],[31,5],[31,3],[31,1],[16,5],[16,5],[16,6],[16,6],[44,3],[44,2],[59,3],[59,6],[59,8],[59,5],[59,5],[59,5],[59,4],[59,5],[59,1],[17,4],[17,2],[17,4],[17,5],[17,6],[17,4],[17,3],[17,3],[65,3],[65,2],[103,6],[103,5],[103,5],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[106,3],[106,2],[106,1],[18,4],[18,4],[34,2],[34,3],[34,2],[34,3],[35,4],[35,4],[35,3],[35,3],[35,3],[35,2],[20,3],[20,2],[19,2],[19,2],[21,1],[21,1],[112,7],[112,8],[112,8],[112,5],[112,6],[112,6],[115,8],[115,9],[115,8],[115,7],[116,4],[116,2],[113,10],[113,11],[113,13],[121,5],[121,8],[121,4],[22,1],[22,1],[22,1],[123,7],[124,9],[125,11],[125,11],[125,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log($$[$0-1]); return $$[$0-1];
break;
case 2:
this.$ =  [$$[$0]]
break;
case 3:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 4:
this.$ = $$[$0].concat($$[$0-1]);
break;
case 5:
var inglo1 = []; 
																														for(var b = 0; b < $$[$0-2].length; b++){
																															 inglo1.push($$[$0-2][b]);
																														 }
																														 //inglo1.push($$[$0-1]);
																														 for(var a = 0; a < $$[$0].length; a++){
																															 inglo1.push($$[$0][a]);
																														 }
																														 inglo1.push($$[$0-1]);
																														 this.$ = inglo1;	
																														
break;
case 6:
this.$ = new Instrucciones($$[$0-1],this._$.first_line,this._$.first_column,"MAIN")
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 24: case 25: case 26:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 27: case 28: case 29: case 60:
this.$ = [$$[$0]]
break;
case 23:
this.$ = new Instrucciones($$[$0],this._$.first_line,this._$.first_column,null)
break;
case 30: case 31: case 32: case 33: case 34: case 35:
this.$ = new Instrucciones([$$[$0]],this._$.first_line,this._$.first_column,null)
break;
case 36:
	var asignacion = $$[$0]; console.log(asignacion.expresion);
																																							if(!Array.isArray(asignacion)){
																																								console.log("entra al if");
																																								asignacion.tipo = $$[$0-1]; 
																																								this.$ = asignacion;
																																							}
																																							else{
																																								var tam = asignacion.length; console.log("el tamaño del vector es:" +tam);
																																								//var inst = new Instrucciones([asignacion[0]],this._$.first_line,this._$.first_column,null);
																																								var decmul = new DeclaracionMultiple(this._$.first_line,this._$.first_column,$$[$0-1],[]);
																																								for(var i=0;i<tam;i++){
																																									decmul.arregloid.push(asignacion[i]);
																																								}
																																								//console.log("Fuera del for gramatica")
																																								//console.log(asignacion);
																																								this.$ = decmul;
																																								//this.$ = asignacion; 
																																								//this.$ = asignacion;
																																								//this.$ = new Instrucciones([asignacion],this._$.first_line,this._$.first_column,null);
																																							}
																																							
																																						
break;
case 39:
var listainst =$$[$0-1]; listainst.crearentorno=false; this.$ = new Funcion($$[$0-7],$$[$0-6],$$[$0-4],listainst,this._$.first_line,this._$.first_column);
break;
case 40:
var listainst =$$[$0-1]; listainst.crearentorno=false; this.$ = new Funcion($$[$0-7],$$[$0-6],[new Parametro($$[$0-4],null,null,this._$.first_line,this._$.first_column)],listainst,this._$.first_line,this._$.first_column);
break;
case 41:
var listainst =$$[$0-1]; listainst.crearentorno=false; var nuevo = new Parametro($$[$0-5],null,null,this._$.first_line,this._$.first_column);
																																			 			this.$ = new Funcion($$[$0-8],$$[$0-7],[nuevo].concat($$[$0-4]),listainst,this._$.first_line,this._$.first_column);
break;
case 42:
var listainst =$$[$0-1]; listainst.crearentorno=false;this.$ = new Funcion($$[$0-6],$$[$0-5],[],listainst,this._$.first_line,this._$.first_column);
break;
case 53:
this.$ = new Declaracion($$[$0-1],this._$.first_line,this._$.first_column,null,$$[$0-3])
break;
case 54:
this.$ = new Declaracion( new ExpComa($$[$0-2],$$[$0-1],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,null,$$[$0-4]);
break;
case 55:
 var arr=[$$[$0-2]];
																																		  for(var a=0; a<$$[$0-1].length;a++){
																																			  arr.push($$[$0-1][a]);
																																		  }
																																		  console.log(arr); this.$ = arr;
break;
case 56:
this.$ = new DeclararArray($$[$0-3], $$[$0-1],null,this._$.first_line,this._$.first_column);
break;
case 57:
this.$ = new DeclararArray($$[$0-1],null,null,this._$.first_line,this._$.first_column);
break;
case 58:
this.$ = new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0-1]);
break;
case 59:
this.$ = $$[$0-2].push($$[$0]);  this.$ = $$[$0-2];
break;
case 62:
this.$= Tipo.STRING
break;
case 63:
this.$= Tipo.INTEGER
break;
case 64:
this.$= Tipo.BOOLEAN
break;
case 65:
this.$= Tipo.DOUBLE
break;
case 66:
this.$= Tipo.CHAR
break;
case 67:
this.$= Tipo.VOID
break;
case 69:
var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.STRING,this._$.first_line,this._$.first_column);
break;
case 71:
this.$ = new Literal(true,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 72:
this.$ = new Literal(false,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 73:
var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.CHAR,this._$.first_line,this._$.first_column);
break;
case 74:
this.$ =$$[$0];
break;
case 75:
this.$ = new Literal(parseInt($$[$0]),Tipo.INTEGER,this._$.first_line,this._$.first_column)
break;
case 76:
this.$ = new Literal(parseFloat($$[$0]),Tipo.DOUBLE,this._$.first_line,this._$.first_column);
break;
case 79:
this.$ = new FuncionesNativas($$[$0-1],TipoFuncionNativa.TYPEOF,this._$.first_line,this._$.first_column)
break;
case 80:
this.$ = new FuncionesNativas($$[$0],TipoFuncionNativa.INTPARSE,this._$.first_line,this._$.first_column)
break;
case 81:
this.$ = new FuncionesNativas($$[$0],TipoFuncionNativa.DOUBLEPARSE,this._$.first_line,this._$.first_column)
break;
case 82:
this.$ = new FuncionesNativas($$[$0],TipoFuncionNativa.BOOLEANPARSE,this._$.first_line,this._$.first_column)
break;
case 84:
this.$ = new FuncionesNativas($$[$0-1],TipoFuncionNativa.STRING,this._$.first_line,this._$.first_column)
break;
case 85:
this.$ = new LlamadaFuncion(new Acceso($$[$0-4],this._$.first_line,this._$.first_column),true,[$$[$0-2]].concat($$[$0-1]),this._$.first_line,this._$.first_column);
break;
case 86:
this.$ = new LlamadaFuncion(new Acceso($$[$0-3],this._$.first_line,this._$.first_column),true,[$$[$0-1]],this._$.first_line,this._$.first_column);
break;
case 87:
this.$=$$[$0-1];
break;
case 88:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 89:
this.$=[$$[$0]]
break;
case 90:
this.$ = new Aritmetica( new Literal(-1,Tipo.INTEGER,this._$.first_line,this._$.first_column) ,$$[$0],TipoAritmetica.MULTIPLICACION,this._$.first_line,this._$.first_column)
break;
case 91:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.AND,this._$.first_line,this._$.first_column);
break;
case 92:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.OR,this._$.first_line,this._$.first_column);
break;
case 93:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 94:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 95:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_QUE,this._$.first_line,this._$.first_column);
break;
case 96:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_QUE,this._$.first_line,this._$.first_column);
break;
case 97:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALDAD,this._$.first_line,this._$.first_column);
break;
case 98:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.DESIGUALDAD,this._$.first_line,this._$.first_column);
break;
case 101:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA,this._$.first_line,this._$.first_column)
break;
case 102:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA,this._$.first_line,this._$.first_column)
break;
case 104:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION,this._$.first_line,this._$.first_column)
break;
case 105:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION,this._$.first_line,this._$.first_column)
break;
case 106:
this.$ = $$[$0-1]
break;
case 107:
this.$ = new Logica($$[$0],$$[$0],TipoLogica.NOT,this._$.first_line,this._$.first_column);
break;
case 108: case 109:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.SENO,this._$.first_line,this._$.first_column)
break;
case 110: case 111:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.COSENO,this._$.first_line,this._$.first_column)
break;
case 112: case 113:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.LOGARITMO,this._$.first_line,this._$.first_column)
break;
case 114: case 115:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.TANGENTE,this._$.first_line,this._$.first_column)
break;
case 116: case 117:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.RAIZ,this._$.first_line,this._$.first_column)
break;
case 118: case 119:
this.$ = new Aritmetica($$[$0-3],$$[$0-1],TipoAritmetica.POW,this._$.first_line,this._$.first_column)
break;
case 121:
this.$ = new Concatenacion($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 122:
 this.$ = new Potencia($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 123:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO,this._$.first_line,this._$.first_column);
break;
case 124:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 125:
var nuevo = new ConstruirArray($$[$0-1],this._$.first_line,this._$.first_column); this.$=nuevo;
break;
case 126: case 132:
this.$ = $$[$0];
break;
case 127:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,false);
break;
case 128:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,true);
break;
case 129:
console.log($$[$0-2]);this.$ = new Print( new ExpComa($$[$0-3],$$[$0-2],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,false);
break;
case 130:
this.$ = new Print( new ExpComa($$[$0-3],$$[$0-2],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,true);
break;
case 131:
 var concat = new ExpComa($$[$0-2],$$[$0],this._$.first_line,this._$.first_column); this.$ = concat
break;
case 133:
new AccesoStruct
break;
case 134:
this.$ = new FuncionesCadena($$[$0-5],$$[$0-1],$$[$0-1],TipoFuncionesCadena.CARACTEROFPOSITION,this._$.first_line,this._$.first_column);
break;
case 135:
this.$ = new FuncionesCadena($$[$0-7],$$[$0-3],$$[$0-1],TipoFuncionesCadena.SUBSTRING,this._$.first_line,this._$.first_column);
break;
case 136:
this.$ = new FuncionesCadena($$[$0-4],$$[$0-4],$$[$0-4],TipoFuncionesCadena.LENGTH,this._$.first_line,this._$.first_column);
break;
case 137:
this.$ = new FuncionesCadena($$[$0-4],$$[$0-4],$$[$0-4],TipoFuncionesCadena.TOUPPERCASE,this._$.first_line,this._$.first_column);
break;
case 138:
this.$ = new FuncionesCadena($$[$0-4],$$[$0],$$[$0],TipoFuncionesCadena.TOLOWERCASE,this._$.first_line,this._$.first_column);
break;
case 139:
this.$ = new AccesoArray($$[$0-1],$$[$0-3], this._$.first_line,this._$.first_column);
break;
case 140:
this.$ = new AccesoArray([$$[$0-2]].concat($$[$0-1]),$$[$0-4], this._$.first_line,this._$.first_column);
break;
case 141:
this.$ = new Acceso($$[$0],this._$.first_line,this._$.first_column);
break;
case 142:
//console.log("el tipo es acceso? "); console.log($$[$0-3] instanceof Acceso);
																													if($$[$0-3] instanceof Acceso){
																														//console.log("es asignacion variable");
																														var a1 = new Asignacion($$[$0-1],this._$.first_line,this._$.first_column,$$[$0-3]);
																														console.log(a1.expresion);
																														this.$ = a1;
																													}
																													else if($$[$0-3] instanceof AccesoArray){
																														console.log("AccesoArray - no entrar")
																														this.$ = new AsignarValorArray($$[$0-1],$$[$0-3], this._$.first_line,this._$.first_column);		
																													}																													
																												
break;
case 145:
this.$ = new LlamadaFuncion($$[$0-4],false,[$$[$0-2]],this._$.first_line,this._$.first_column);
break;
case 146:
console.log("el 3");console.log($$[$0-3]);console.log("el 4");console.log($$[$0-2]);this.$= new LlamadaFuncion($$[$0-5],false,[$$[$0-3]].concat($$[$0-2]),this._$.first_line,this._$.first_column);
break;
case 150:

																										//if(!($$[$0-2] instanceof Array)){
																											//console.log("dentro de instance of");
																											//$$[$0-2] = [$$[$0-2]];				
																										//}
																										
																										var aux = $$[$0-2].concat($$[$0]);
																										this.$ =aux;
																										
break;
case 151:
this.$ = [$$[$0]];
break;
case 164:
this.$ = new FuncionesNativas($$[$0-1],TipoFuncionNativa.TOINT,this._$.first_line,this._$.first_column)
break;
case 165:
this.$ = new FuncionesNativas($$[$0-1],TipoFuncionNativa.TODOUBLE,this._$.first_line,this._$.first_column)
break;
case 166: case 173:
this.$ = [new Parametro($$[$0],$$[$0-1],null,this._$.first_line,this._$.first_column)];
break;
case 167:
this.$ = [new Parametro($$[$0-1],$$[$0-2],null,this._$.first_line,this._$.first_column)].concat($$[$0]);
break;
case 168: case 174:
this.$ = [new Parametro($$[$0],Tipo.STRUCT,$$[$0-1],this._$.first_line,this._$.first_column)];
break;
case 169:
this.$ = [new Parametro($$[$0-1],Tipo.STRUCT,$$[$0-2],this._$.first_line,this._$.first_column)].concat($$[$0]);
break;
case 170:
this.$ = $$[$0-3].concat(new Parametro($$[$0],$$[$0-1],null,this._$.first_line,this._$.first_column));
break;
case 171:
this.$ = $$[$0-3].concat(new Parametro($$[$0],Tipo.STRUCT,$$[$0-1],this._$.first_line,this._$.first_column));
break;
case 172:
this.$ = $$[$0-2].concat(new Parametro($$[$0],null,null,this._$.first_line,this._$.first_column));
break;
case 175:
this.$ = [new Parametro($$[$0],null,null,this._$.first_line,this._$.first_column)];
break;
case 176:
this.$ = new Retornar($$[$0-1],this._$.first_line,this._$.first_column);
break;
case 177:
this.$ = new Retornar(null,this._$.first_line,this._$.first_column);
break;
case 178:
this.$ = new Break(this._$.first_line,this._$.first_column);
break;
case 179:
this.$ = new Continue(this._$.first_line,this._$.first_column);
break;
case 180: case 181:
this.$ = $$[$0]
break;
case 182:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 183: case 184:
$$[$0-2].nombre = "AmbienteIf"; this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 185:
$$[$0].nombre = "AmbienteIf"; this.$ = new If($$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column)
break;
case 186: case 187:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-3],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column)
break;
case 188:

																																									$$[$0-1].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column); 
																																									var valorcondicion = $$[$0-7];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse; 
																																									this.$ = $$[$0-7]
																																								
break;
case 189:

																																									$$[$0-2].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
																																									var valorcondicion = $$[$0-8];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse;
																																									this.$ = $$[$0-8]
																																								
break;
case 190:
$$[$0-2].nombre = "AmbienteElseIf"; 
																																								this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 191:
$$[$0-1].nombre = "AmbienteElseIf";
																																								this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 192:
$$[$0-1].nombre = "AmbienteElse";this.$ = $$[$0-1]
break;
case 193:
$$[$0].nombre = "AmbienteElse";this.$ = $$[$0]
break;
case 194:
$$[$0-1].nombre= "AmbienteSwitch";
																																																											this.$ = new Switch($$[$0-7],$$[$0-3],$$[$0-1],null,this._$.first_line,this._$.first_column);
																																																											
break;
case 195:
$$[$0-2].nombre= "AmbienteSwitch"; 
																																																											var sentenciascase = $$[$0-1];
																																																											while(sentenciascase!= null){
																																																												sentenciascase.condicionswitch = $$[$0-8];
																																																												sentenciascase = sentenciascase.condiciondefault;
																																																											}
																																																											this.$ = new Switch( $$[$0-8],$$[$0-4],$$[$0-2],$$[$0-1],this._$.first_line,this._$.first_column);
																																																											
break;
case 196:
$$[$0-4].nombre= "AmbienteSwitch";
																																																											$$[$02].condicionswitch = $$[$0-10];  this.$ = new Switch( $$[$0-10],$$[$0-6],$$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column);
																																																											
break;
case 197:

																																			console.log("entra en case:");
																																			$$[$0-1].nombre= "AmbienteCase";
																																			var Vcase = new Switch($$[$0-4].condicionswitch,$$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-4];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			$$[$0-4].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			console.log("sube el valor nulo creo: "+$$[$0-4].condicionswitch+"  aca tambien vacio creo anterior "+valorcondicion.condicionswitch);
																																			this.$ = $$[$0-4];
																																		
break;
case 198:

																																			//console.log("case: "+$$[$0-6].valor);
																																			$$[$0-4].nombre= "AmbienteCase";
																																			var Vcase = new Switch($$[$0-7].condicionswitch,$$[$0-5],$$[$0-3],$$[$02],this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-7];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			if(valorcondicion.condicionswitch == null){
																																				console.log("la condicion switch de la ultima iteracion es null")
																																			}
																																			$$[$0-7].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			this.$ = $$[$0-7];
																																		
break;
case 199:
console.log("entra al solitario case");$$[$0].nombre= "AmbienteCase";this.$ = new Switch(null,$$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column)
break;
case 203:
this.$ = new While($$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 204:
this.$ = new DoWhile($$[$0-2],$$[$0-6],this._$.first_line,this._$.first_column);
break;
case 205:
this.$ = new For($$[$0-8].id,$$[$0-8],$$[$0-7],TipoAumento.INCREMENTO,TipoFor.CLASICO,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 206:
this.$ = new For($$[$0-8].id,$$[$0-8],$$[$0-7],TipoAumento.DECREMENTO,TipoFor.CLASICO,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 207:
console.log("Tipo en forin: "+$$[$0-3].tipo);this.$ = new For($$[$0-5],0,$$[$0-3],TipoAumento.DECREMENTO,TipoFor.FORIN,$$[$0-1],this._$.first_line,this._$.first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,15:8,17:7,24:6,26:11,33:$V1,36:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10},{1:[3]},{5:[1,18]},{5:[2,2],7:19,8:$V8,15:8,17:7,24:6,26:11,33:$V1,36:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10},{6:21,8:$V0,15:24,17:22,24:23,26:11,33:$V1,36:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10},o($V9,$Va,{9:[1,25]}),o($Vb,[2,27]),o($Vb,[2,28]),o($Vb,[2,29]),{33:[1,26]},{10:[1,30],28:$Vc,32:28,41:$Vd,42:[1,27],52:$Ve,71:[1,36],72:[1,37],73:[1,38],74:[1,39],75:[1,40],76:[1,41],77:[1,32],78:[1,31],102:29},{10:[1,44],27:42,28:[1,43],33:[1,45],43:[1,46],46:47,52:[1,48]},o([10,28,41,42,52,71,72,73,74,75,76,77,78],$Vf),o($V9,[2,62]),o($V9,[2,63]),o($V9,[2,64]),o($V9,[2,65]),o($V9,[2,66]),{1:[2,1]},{5:[2,4],8:$V8,15:24,17:22,24:23,26:11,33:$V1,36:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10},o($V9,$Va),{5:[2,3],7:49,8:$V8,15:8,17:7,24:6,26:11,33:$V1,36:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10},o($Vb,[2,24]),o($Vb,[2,25]),o($Vb,[2,26]),{10:[1,50]},{12:[1,51]},{10:$Vg,18:79,30:$Vh,31:52,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($VI,[2,143]),{10:$Vg,18:79,30:$Vh,31:84,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,11:[1,86],18:79,30:$Vh,31:85,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{32:87,41:$Vd},{32:88,41:$Vd},{33:[1,89],97:[1,90],98:[1,91],99:[1,92],100:[1,93],101:[1,94]},{10:$Vg,18:79,30:$Vh,31:95,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($VI,[2,61]),o($VJ,[2,155]),o($VJ,[2,156]),o($VJ,[2,157]),o($VJ,[2,158]),o($VJ,[2,159]),o($VJ,[2,160]),o($VI,[2,36]),{29:[1,96]},{10:$Vg,18:79,30:$Vh,31:97,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:[1,98],32:101,40:[1,102],41:$Vd,42:[1,99],45:100},{42:[1,103]},{33:[1,104]},{53:[1,105]},{5:[2,5],8:$V8,15:24,17:22,24:23,26:11,33:$V1,36:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10},{11:[1,106]},{8:$V8,14:[1,107],15:110,17:109,26:11,33:$V1,37:108,38:[1,111],47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10},{32:112,41:$Vd,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:$Vg,18:79,30:$Vh,31:132,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:133,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:134,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:[1,135],80:[1,136]},{10:[1,137],80:[1,138]},{10:[1,139],80:[1,140]},{10:[1,141],80:[1,142]},{10:[1,143],80:[1,144]},{10:[1,145],80:[1,146]},{10:$Vg,18:79,30:$Vh,31:147,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:149,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,67:148,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($V11,[2,126]),o($V11,[2,69]),o($V11,[2,70]),o($V11,[2,71]),o($V11,[2,72]),o($V11,[2,73]),o($V11,[2,74],{28:$Vc,52:$Ve}),o($V11,[2,75]),o($V11,[2,76]),o($V11,[2,77]),o($V11,[2,78]),{10:[1,150]},{28:[1,151]},{28:[1,152]},{28:[1,153]},o($V11,[2,83]),{10:[1,154]},o([11,12,28,40,41,52,53,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94],$Vf,{10:[1,155]}),{10:[1,156]},{10:[1,157]},{32:158,41:$Vd,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{11:[1,159],40:$V21,65:160,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{32:162,41:$Vd},o($VI,[2,148]),o($VI,[2,149]),o($V31,[2,133]),{10:[1,163]},{10:[1,164]},{10:[1,165]},{10:[1,166]},{10:[1,167]},{40:$V21,53:[1,168],65:169,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:[1,170]},{11:[1,171],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{8:$V8,11:[1,174],26:175,33:[1,173],34:172,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{10:$Vg,18:79,30:$Vh,31:176,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{32:177,40:[1,178],41:$Vd},o($VI,[2,58]),{33:[1,179]},{10:$Vg,18:79,30:$Vh,31:180,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{32:182,41:$Vd,42:[1,181]},{33:[2,68]},{12:[1,183]},{32:184,41:$Vd},{8:$V8,14:[1,185],15:187,17:186,26:11,33:$V1,38:[1,188],47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10},o($V41,[2,48]),o($V41,[2,49]),o($V41,[2,50]),o($VI,[2,142]),{10:$Vg,18:79,30:$Vh,31:189,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:190,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:191,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:192,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:193,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:194,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:195,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:196,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($V11,[2,99]),o($V11,[2,100]),{10:$Vg,18:79,30:$Vh,31:197,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:198,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{81:[1,199]},{10:$Vg,18:79,30:$Vh,31:200,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:201,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:202,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:203,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:204,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:205,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($V11,[2,90]),{11:[1,206],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($V51,[2,107],{77:$VT,78:$VU}),{10:$Vg,18:79,30:$Vh,31:207,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:[1,208]},{10:$Vg,18:79,30:$Vh,31:209,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:[1,210]},{10:$Vg,18:79,30:$Vh,31:211,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:[1,212]},{10:$Vg,18:79,30:$Vh,31:213,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:[1,214]},{10:$Vg,18:79,30:$Vh,31:215,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:[1,216]},{10:$Vg,18:79,30:$Vh,31:217,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:[1,218]},o($V51,[2,120],{77:$VT,78:$VU}),{40:[1,220],53:[1,219]},o($V61,[2,89],{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01}),{10:$Vg,18:79,30:$Vh,31:221,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{29:[1,222]},{29:[1,223]},{29:[1,224]},{10:$Vg,18:79,30:$Vh,31:225,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:226,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:227,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:228,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($VI,[2,144]),{32:229,41:$Vd},{11:[1,230],40:$V71},{10:$Vg,18:79,30:$Vh,31:232,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($VI,[2,147]),{18:79,30:$Vh,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,54:233,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,107:$VG,108:$VH},{18:79,30:$Vh,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,54:234,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,107:$VG,108:$VH},{11:[1,235]},{11:[1,236]},{11:[1,237]},o($V31,[2,139]),{40:$V71,53:[1,238]},{30:[1,239]},{32:240,41:$Vd},{11:[1,241]},{11:[1,242],33:[1,244],35:243,40:$V81},{12:[1,246]},{33:[1,247]},{32:248,41:$Vd,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($VI,[2,55]),{33:[1,249]},o($V91,[2,60]),{40:$Va1,44:250,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:$Vg,18:79,30:$Vh,31:252,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($VI,[2,57]),{8:$V8,13:253,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},o($Vb,[2,43]),{32:277,41:$Vd},o($V41,[2,45]),o($V41,[2,46]),o($V41,[2,47]),o([11,12,40,41,53,69,70,93,94],[2,91],{68:$VK,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$}),o([11,12,40,41,53,70,93,94],[2,92],{68:$VK,69:$VL,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$}),o($Vl1,[2,93],{68:$VK,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,92:$V$}),o($Vl1,[2,94],{68:$VK,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,92:$V$}),o($Vl1,[2,95],{68:$VK,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,92:$V$}),o($Vl1,[2,96],{68:$VK,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,92:$V$}),o($Vm1,[2,97],{68:$VK,71:$VN,72:$VO,73:$VP,74:$VQ,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,92:$V$}),o($Vm1,[2,98],{68:$VK,71:$VN,72:$VO,73:$VP,74:$VQ,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,92:$V$}),o($Vn1,[2,101],{77:$VT,78:$VU,80:$VW,81:$VX,82:$VY,92:$V$}),o($Vn1,[2,102],{77:$VT,78:$VU,80:$VW,81:$VX,82:$VY,92:$V$}),{10:$Vg,18:79,30:$Vh,31:278,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($Vo1,[2,104],{77:$VT,78:$VU,80:$VW}),o($Vo1,[2,105],{77:$VT,78:$VU,80:$VW}),o([11,12,40,41,53,69,70,90,91,93,94],[2,121],{68:$VK,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,92:$V$}),o([11,12,40,41,53,69,70,91,93,94],[2,122],{68:$VK,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,92:$V$}),o($Vo1,[2,123],{77:$VT,78:$VU,80:$VW}),{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:[1,279]},o($V11,[2,106]),{11:[1,280],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:$Vg,18:79,30:$Vh,31:281,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{11:[1,282],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:$Vg,18:79,30:$Vh,31:283,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{11:[1,284],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:$Vg,18:79,30:$Vh,31:285,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{11:[1,286],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:$Vg,18:79,30:$Vh,31:287,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{11:[1,288],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:$Vg,18:79,30:$Vh,31:289,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{40:[1,290],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:$Vg,18:79,30:$Vh,31:291,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($V11,[2,125]),{10:$Vg,18:79,30:$Vh,31:292,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{11:[1,293],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:$Vg,18:79,30:$Vh,31:294,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:295,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:296,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{11:[1,297],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{11:[1,299],40:$V21,65:298,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{11:[1,300],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{11:[1,301],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($VI,[2,145]),{32:302,41:$Vd},{10:$Vg,18:79,30:$Vh,31:303,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($Vp1,[2,151],{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01}),{11:[1,304]},{40:[1,305]},o($V31,[2,136]),o($V31,[2,137]),o($V31,[2,138]),o($V31,[2,140]),{11:[1,306]},o($VI,[2,38]),{12:[1,307]},{12:[1,308]},{11:[1,309],40:$Vq1},{11:[2,168],35:311,40:$V81},{8:$V8,26:312,33:[1,313],47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:314,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{11:[2,166],35:316,40:$V81},o($VI,[2,53]),o($V91,[2,59]),{32:317,40:$Vr1,41:$Vd},{10:$Vg,18:79,30:$Vh,31:319,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{32:320,41:$Vd,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{8:$V8,14:[1,321],15:322,16:323,17:324,18:325,19:326,20:327,21:328,22:329,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},o($Vs1,[2,15]),o($Vs1,[2,16]),o($Vs1,[2,17]),o($Vs1,[2,18]),o($Vs1,[2,19]),o($Vs1,[2,20]),o($Vs1,[2,21]),o($Vs1,[2,22]),{10:[1,330]},{10:[1,331]},{10:$Vg,18:79,30:$Vh,31:332,32:333,33:$Vi,41:$Vd,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{41:[1,334]},{41:[1,335]},o($Vs1,[2,180]),o($Vs1,[2,181]),o($Vt1,[2,200]),o($Vt1,[2,201]),o($Vt1,[2,202]),{10:[1,336]},{10:[1,337]},{10:[1,338]},{12:[1,339]},{10:[1,340],33:[1,341]},o($Vb,[2,44]),o($V51,[2,103],{77:$VT,78:$VU}),{10:$Vg,18:79,30:$Vh,31:342,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($V11,[2,108]),{11:[1,343],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($V11,[2,110]),{11:[1,344],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($V11,[2,112]),{11:[1,345],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($V11,[2,114]),{11:[1,346],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($V11,[2,116]),{11:[1,347],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:$Vg,18:79,30:$Vh,31:348,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{40:[1,349],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($V61,[2,88],{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01}),o($V11,[2,79]),o($Vu1,[2,80],{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01}),o($Vu1,[2,81],{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01}),o($Vu1,[2,82],{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01}),o($V11,[2,84]),{11:[1,350],40:$V71},o($V11,[2,86]),o($Vv1,[2,164]),o($Vv1,[2,165]),o($VI,[2,146]),o($Vp1,[2,150],{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01}),o($V31,[2,134]),{18:79,30:$Vh,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,54:351,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,107:$VG,108:$VH},o($VI,[2,37]),{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:352,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:353,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{12:[1,354]},{8:$V8,26:355,33:[1,356],47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{11:[2,169],40:$Vq1},{33:[1,357]},o($Vw1,[2,175],{33:[1,358]}),{14:[1,359]},o([14,120,122],[2,23],{59:10,26:11,112:267,113:268,123:269,124:270,125:271,15:322,16:323,17:324,18:325,19:326,20:327,21:328,22:329,8:$V8,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,114:$Vg1,119:$Vh1,126:$Vi1,127:$Vj1,128:$Vk1}),{11:[2,167],40:$Vq1},o($VI,[2,54]),{10:$Vg,18:79,30:$Vh,31:360,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($Vx1,[2,132],{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01}),o($VI,[2,56]),o($Vb,[2,6]),o($Vs1,[2,7]),o($Vs1,[2,8]),o($Vs1,[2,9]),o($Vs1,[2,10]),o($Vs1,[2,11]),o($Vs1,[2,12]),o($Vs1,[2,13]),o($Vs1,[2,14]),{10:$Vg,18:79,30:$Vh,31:361,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:362,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{32:363,41:$Vd,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($Vt1,[2,177]),o($Vs1,[2,178]),o($Vs1,[2,179]),{10:$Vg,18:79,30:$Vh,31:364,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:365,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:366,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:367,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{8:$V8,15:368,17:369,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10},{129:[1,370]},o([11,12,40,41,53,93,94],[2,124],{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$}),o($V11,[2,109]),o($V11,[2,111]),o($V11,[2,113]),o($V11,[2,115]),o($V11,[2,117]),{11:[1,371],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{10:$Vg,18:79,30:$Vh,31:372,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($V11,[2,85]),{11:[1,373]},{14:[1,374]},{14:[1,375]},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:376,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{33:[1,377]},o($Vw1,[2,172],{33:[1,378]}),o($Vw1,[2,173]),o($Vw1,[2,174]),o($VI,[2,42]),o($Vx1,[2,131],{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01}),{11:[1,379],40:$Va1,44:380,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{11:[1,381],40:$Va1,44:382,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($Vt1,[2,176]),{11:[1,383],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{11:[1,384],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{11:[1,385],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{14:[1,386]},{10:$Vg,18:79,30:$Vh,31:387,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:388,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{10:$Vg,18:79,30:$Vh,31:389,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},o($V11,[2,118]),{11:[1,390],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($V31,[2,135]),o($VI,[2,39]),o($VI,[2,40]),{14:[1,391]},o($Vw1,[2,170]),o($Vw1,[2,171]),{32:392,41:$Vd},{11:[1,393],40:$Vr1},{32:394,41:$Vd},{11:[1,395],40:$Vr1},{8:$V8,12:[1,396],15:398,16:399,17:400,18:401,20:402,22:403,25:397,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{12:[1,404]},{12:[1,405]},{126:[1,406]},{41:[1,407],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{41:[1,408],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{12:[1,409],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},o($V11,[2,119]),o($VI,[2,41]),o($Vt1,[2,127]),{32:410,41:$Vd},o($Vt1,[2,128]),{32:411,41:$Vd},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:412,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},o($Vs1,[2,185],{115:413,116:414,117:$Vy1,118:$Vz1}),o($Vt1,[2,30]),o($Vt1,[2,31]),o($Vt1,[2,32]),o($Vt1,[2,33]),o($Vt1,[2,34]),o($Vt1,[2,35]),{120:[1,417]},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:418,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{10:[1,419]},{33:[1,420]},{33:[1,421]},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:422,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},o($Vt1,[2,129]),o($Vt1,[2,130]),{14:[1,423]},o($Vs1,[2,186],{117:$VA1}),o($Vs1,[2,187]),{10:[1,425]},{8:$V8,12:[1,426],15:398,16:399,17:400,18:401,20:402,22:403,25:427,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{10:$Vg,18:79,30:$Vh,31:428,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{14:[1,429]},{10:$Vg,18:79,30:$Vh,31:430,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{77:[1,431]},{78:[1,432]},{14:[1,433]},o($Vs1,[2,182],{115:434,116:435,117:$Vy1,118:$Vz1}),{10:[1,436]},{10:$Vg,18:79,30:$Vh,31:437,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:438,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},o($VB1,[2,193]),{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:[1,439]},o($Vt1,[2,203]),{11:[1,440],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{11:[1,441]},{11:[1,442]},o($Vt1,[2,207]),o($Vs1,[2,183],{117:$VA1}),o($Vs1,[2,184]),{10:$Vg,18:79,30:$Vh,31:443,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{11:[1,444],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{14:[1,445]},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:446,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{41:[1,447]},{12:[1,448]},{12:[1,449]},{11:[1,450],68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01},{12:[1,451]},o($VB1,[2,192]),{14:[1,452],120:[1,455],121:453,122:[1,454]},o($Vt1,[2,204]),{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:456,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:457,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{12:[1,458]},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:459,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},o($Vs1,[2,194]),{14:[1,460],120:[1,461]},{94:[1,462]},{10:$Vg,18:79,30:$Vh,31:463,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{14:[1,464]},{14:[1,465]},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:466,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{14:[1,467]},o($Vs1,[2,195]),{10:$Vg,18:79,30:$Vh,31:468,33:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,52:$Vn,54:64,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:70,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,68:$Vx,80:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,107:$VG,108:$VH},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:469,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:[1,470]},o($Vt1,[2,205]),o($Vt1,[2,206]),{14:[1,471]},o($VB1,[2,191],{116:472,118:$Vz1}),{68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:[1,473]},{14:[1,474]},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:475,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},o($VB1,[2,188],{116:476,118:$Vz1}),o($VB1,[2,190]),{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:477,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},o($Vs1,[2,196]),o($VC1,[2,199]),o($VB1,[2,189]),o($VC1,[2,197],{122:[1,478]}),{94:[1,479]},{8:$V8,13:315,15:254,16:255,17:256,18:257,19:259,20:258,21:260,22:261,23:480,26:11,33:$V1,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,59:10,95:$Vb1,96:$Vc1,107:$VG,108:$VH,109:$Vd1,110:$Ve1,111:$Vf1,112:267,113:268,114:$Vg1,119:$Vh1,123:269,124:270,125:271,126:$Vi1,127:$Vj1,128:$Vk1},o($VC1,[2,198])],
defaultActions: {18:[2,1],105:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	//para el objeto de impresion
	function FImpresion(_tipoimpresion,_valorimpresion,_raro){
		return {tipo:_tipoimpresion, valor:_valorimpresion,What:_raro};
	}

	//para declaraciones de funciones
	function FDeclaracion(_tipo,_nombre,_valor){
		return {tipo:_tipo,nombre:_nombre,valorvar:_valor};
	}

	//almacenamiento de errores
	function FErrores(_tipo,_caracter,_fila,_columna,_descrip){
		return{tipo:_tipo,Caracter:_caracter,Fila:_fila,Columna:_columna,Descripcion:_descrip};
	}

	var GexpresionSwitch ;


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://return 'TK_COMENTARIO';// comentario simple línea
break;
case 1://return 'TK_COMENTARIO_MULTI';//; comentario multiple líneas
break;
case 2:return 55;
break;
case 3:return 48;
break;
case 4:return 50;
break;
case 5:return 49;
break;
case 6:return 51;
break;
case 7:return 47;
break;
case 8:return 36;
break;
case 9:return 89;
break;
case 10:return 88;
break;
case 11:return 84;
break;
case 12:return 85;
break;
case 13:return 87;
break;
case 14:return 86;
break;
case 15:return 97;
break;
case 16:return 98;
break;
case 17:return 99;
break;
case 18:return 100;
break;
case 19:return 101;
break;
case 20:return 95;
break;
case 21:return 96;
break;
case 22:return 29;
break;
case 23:return 107;
break;
case 24:return 108;
break;
case 25:return 64;
break;
case 26:return 'TK_FUNCTION';
break;
case 27:return 109;
break;
case 28:return 114;
break;
case 29:return 117;
break;
case 30:return 118;
break;
case 31:return 119;
break;
case 32:return 120;
break;
case 33:return 122;
break;
case 34:return 110;
break;
case 35:return 126;
break;
case 36:return 127;
break;
case 37:return 128;
break;
case 38:return 129;
break;
case 39:return 104;
break;
case 40:return 105;
break;
case 41:return 62;
break;
case 42:return 63;
break;
case 43:return 111;
break;
case 44:return 56;
break;
case 45:return 57;
break;
case 46:return 9;
break;
case 47:return 8;
break;
case 48:return 77
break;
case 49:return 78
break;
case 50:return 79;
break;
case 51:return 68;
break;
case 52:return 81;
break;
case 53:return 82;
break;
case 54:return 92
break;
case 55:return 10;
break;
case 56:return 11;
break;
case 57:return 12;
break;
case 58:return 14;
break;
case 59:return 52;
break;
case 60:return 53;
break;
case 61:return 94;
break;
case 62:return 41;
break;
case 63:return 40;
break;
case 64:return 28;
break;
case 65:return 75;
break;
case 66:return 42;
break;
case 67:return 76;
break;
case 68:return 71;
break;
case 69:return 72;
break;
case 70:return 74;
break;
case 71:return 73;
break;
case 72:return 69;
break;
case 73:return 70;
break;
case 74:return 83;
break;
case 75:return 90;
break;
case 76:return 91;
break;
case 77:return 80;
break;
case 78:return 'TK_dolar';
break;
case 79:return 93;
break;
case 80://return 'TK_SALTO_LINEA'
break;
case 81:// se ignoran espacios en blanco
break;
case 82:return 61; 
break;
case 83:return 60;   
break;
case 84:return 30;
break;
case 85:return 58;
break;
case 86:return 33;
break;
case 87:return 5;
break;
case 88:lisErr.push({err: 'Error Lexico', lex: yy_.yytext, fil: yy_.yylloc.first_line, col: yy_.yylloc.first_column, des:'Simbolo Desconocido'}); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*(\*(?!\/)|[^*])*\*\/\n)/i,/^(?:null\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:struct\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:log10\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:subString\b)/i,/^(?:length\b)/i,/^(?:toUppercase\b)/i,/^(?:toLowercase\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:parse\b)/i,/^(?:toInt\b)/i,/^(?:toDouble\b)/i,/^(?:typeof\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:else if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:continue\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
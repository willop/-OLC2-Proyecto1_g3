/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,15],$V2=[1,16],$V3=[1,31],$V4=[1,19],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,17],$Vb=[1,18],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[1,32],$Vh=[1,33],$Vi=[5,15,16,17,29,30,32,41,42,43,44,45,84,85,91,92,93,96,99,104,106,107,109],$Vj=[1,75],$Vk=[1,72],$Vl=[1,64],$Vm=[1,76],$Vn=[1,74],$Vo=[1,77],$Vp=[1,78],$Vq=[1,79],$Vr=[1,80],$Vs=[1,81],$Vt=[1,82],$Vu=[1,83],$Vv=[1,84],$Vw=[1,85],$Vx=[1,86],$Vy=[1,87],$Vz=[1,63],$VA=[1,65],$VB=[1,66],$VC=[1,67],$VD=[1,68],$VE=[1,69],$VF=[1,70],$VG=[1,71],$VH=[20,22,30,46],$VI=[1,96],$VJ=[1,98],$VK=[1,101],$VL=[21,22,23,30,50,51,52,54,55,56,57,58,59,60,61,63,75,76,77,78,79,80,81,91,92],$VM=[1,132],$VN=[1,127],$VO=[1,118],$VP=[1,119],$VQ=[1,120],$VR=[1,121],$VS=[1,122],$VT=[1,123],$VU=[1,124],$VV=[1,125],$VW=[1,126],$VX=[1,128],$VY=[1,129],$VZ=[1,130],$V_=[1,131],$V$=[2,49],$V01=[15,20,24,37,38,47,63,64,65,66,67,68,69,70,71,72,73,74,82,83,89,90],$V11=[5,15,16,17,29,30,32,41,42,43,44,45,84,85,91,92,93,96,99,102,103,104,106,107,109],$V21=[1,167],$V31=[1,166],$V41=[1,173],$V51=[1,172],$V61=[1,205],$V71=[1,207],$V81=[1,227],$V91=[15,37,38],$Va1=[1,240],$Vb1=[5,15,16,17,20,24,29,30,32,37,38,41,42,43,44,45,47,63,64,65,66,67,68,69,70,71,72,73,74,82,83,84,85,89,90,91,92,93,96,99,104,106,107,109],$Vc1=[15,24,37,38,47,64,65,89,90],$Vd1=[15,20,24,37,38,47,64,65,66,67,68,69,70,71,82,83,89,90],$Ve1=[15,20,24,37,38,47,64,65,66,67,68,69,70,71,73,74,82,83,89,90],$Vf1=[24,37],$Vg1=[15,32,41,42,43,44,45],$Vh1=[24,37,47],$Vi1=[1,299],$Vj1=[1,298],$Vk1=[1,300],$Vl1=[1,304],$Vm1=[1,305],$Vn1=[1,331],$Vo1=[5,15,16,17,29,30,32,41,42,43,44,45,84,85,91,92,93,96,99,102,104,106,107,109],$Vp1=[15,106,109];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"COMENTARIOS":8,"IMPRESION":9,"ASIGNACION":10,"FUNCIONES_NATIVAS":11,"FUNCIONES":12,"RETURN":13,"CONDICIONALES":14,"TK_SALTO_LINEA":15,"TK_COMENTARIO":16,"TK_COMENTARIO_MULTI":17,"TIPO_VALOR":18,"TIPO_DECLARACION":19,"TK_punto":20,"TK_PARSE":21,"TK_par_apertura":22,"TK_CADENA":23,"TK_par_cierre":24,"ARREGLO":25,"FIN_LINEA":26,"EXPRESIONARIT":27,"STRUCT":28,"TK_STRUCT":29,"TK_ID":30,"TK_corchete_apertura":31,"TK_corchete_cierre":32,"CUERPO_STRUCT":33,"CONTENIDO_STRUCT":34,"TK_igual":35,"FIN_LINEA_STRUCT":36,"TK_coma":37,"TK_pcoma":38,"IGUALACION":39,"COND_ARREGLO":40,"TK_STRING":41,"TK_INT":42,"TK_BOOLEAN":43,"TK_DOUBLE":44,"TK_CHAR":45,"TK_llave_apertura":46,"TK_llave_cierre":47,"MAS_VARIABLES":48,"VALORES":49,"TK_TRUE":50,"TK_FALSE":51,"TK_CARACTER":52,"PARAMETROS":53,"TK_ENTERO":54,"TK_DECIMAL":55,"TK_CARETER_OF_POSITION":56,"TK_TOLOWERCASE":57,"TK_SUBSTRING":58,"TK_TOUPPERCASE":59,"TK_LENGTH":60,"TK_TYPEOF":61,"MAS_VALORES_IMPRESION":62,"TK_MENOS":63,"TK_and":64,"TK_or":65,"TK_mayor_igual":66,"TK_menor_igual":67,"TK_mayor":68,"TK_menor":69,"TK_igualacion":70,"TK_desigual":71,"TK_MAS":72,"TK_POR":73,"TK_DIVIDIDO":74,"TK_not":75,"TK_SIN":76,"TK_COS":77,"TK_LOG":78,"TK_TAN":79,"TK_SQRT":80,"TK_POW":81,"TK_concat":82,"TK_potencia":83,"TK_PRINT":84,"TK_PRINTLN":85,"ASIGNACION_TERNARIA":86,"FIN_LINEA_ASIGNACION":87,"SIGNOS_COMPARACION":88,"TK_pregunta":89,"TK_dos_puntos":90,"TK_TOINT":91,"TK_TODOUBLE":92,"TK_FUNCTION":93,"PARAMETRO_FUNSION":94,"MAS_PARAMETROS_FUNSION":95,"TK_RETURN":96,"FUNCION_IF":97,"FUNCION_SWITCH":98,"TK_IF":99,"FUNCION_ELSEIF":100,"FUNCION_ELSE":101,"TK_ELSEIF":102,"TK_ELSE":103,"TK_SWITCH":104,"SENTENCIAS_CASE":105,"TK_CASE":106,"TK_BREAK":107,"MAS_SALTOS_LINEA":108,"TK_DEFAULT":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"TK_SALTO_LINEA",16:"TK_COMENTARIO",17:"TK_COMENTARIO_MULTI",20:"TK_punto",21:"TK_PARSE",22:"TK_par_apertura",23:"TK_CADENA",24:"TK_par_cierre",29:"TK_STRUCT",30:"TK_ID",31:"TK_corchete_apertura",32:"TK_corchete_cierre",35:"TK_igual",37:"TK_coma",38:"TK_pcoma",41:"TK_STRING",42:"TK_INT",43:"TK_BOOLEAN",44:"TK_DOUBLE",45:"TK_CHAR",46:"TK_llave_apertura",47:"TK_llave_cierre",50:"TK_TRUE",51:"TK_FALSE",52:"TK_CARACTER",54:"TK_ENTERO",55:"TK_DECIMAL",56:"TK_CARETER_OF_POSITION",57:"TK_TOLOWERCASE",58:"TK_SUBSTRING",59:"TK_TOUPPERCASE",60:"TK_LENGTH",61:"TK_TYPEOF",63:"TK_MENOS",64:"TK_and",65:"TK_or",66:"TK_mayor_igual",67:"TK_menor_igual",68:"TK_mayor",69:"TK_menor",70:"TK_igualacion",71:"TK_desigual",72:"TK_MAS",73:"TK_POR",74:"TK_DIVIDIDO",75:"TK_not",76:"TK_SIN",77:"TK_COS",78:"TK_LOG",79:"TK_TAN",80:"TK_SQRT",81:"TK_POW",82:"TK_concat",83:"TK_potencia",84:"TK_PRINT",85:"TK_PRINTLN",89:"TK_pregunta",90:"TK_dos_puntos",91:"TK_TOINT",92:"TK_TODOUBLE",93:"TK_FUNCTION",96:"TK_RETURN",99:"TK_IF",102:"TK_ELSEIF",103:"TK_ELSE",104:"TK_SWITCH",106:"TK_CASE",107:"TK_BREAK",109:"TK_DEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[8,2],[8,2],[7,2],[7,6],[7,5],[7,5],[7,1],[28,5],[28,6],[33,2],[33,1],[34,5],[34,3],[34,1],[36,1],[36,1],[36,1],[19,2],[19,3],[26,1],[26,1],[18,1],[18,1],[18,1],[18,1],[18,1],[40,2],[39,3],[39,2],[39,1],[48,3],[48,2],[49,1],[49,1],[49,1],[49,1],[49,1],[49,3],[49,4],[49,1],[49,1],[49,4],[49,3],[49,6],[49,3],[49,3],[49,4],[49,1],[25,3],[25,4],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,3],[27,3],[27,3],[27,1],[9,5],[9,5],[9,6],[9,6],[9,6],[9,6],[62,3],[62,2],[10,4],[10,3],[10,5],[10,6],[10,4],[10,7],[10,6],[10,5],[10,6],[10,4],[87,1],[87,1],[87,2],[86,4],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[53,3],[53,2],[53,1],[11,4],[11,4],[12,8],[12,7],[94,2],[94,3],[95,4],[95,3],[13,3],[13,6],[13,2],[14,1],[14,1],[97,8],[97,9],[97,9],[100,9],[100,10],[100,8],[101,4],[98,7],[98,8],[105,7],[105,9],[105,10],[105,6],[105,3],[108,2],[108,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{1:[3]},{5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),{19:36,20:[1,37],22:[1,38],30:[1,39],40:40,46:[1,41]},o($Vi,[2,19]),{15:[1,42]},{15:[1,43]},{22:[1,44]},{22:[1,45]},{20:[1,48],22:[1,50],30:[1,47],35:[1,46],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],88:49},{22:[1,57]},{22:[1,58]},{30:[1,59]},{11:88,15:$Vj,21:$Vk,22:$Vl,23:$Vm,26:62,27:60,30:[1,61],38:$Vn,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},o($Vi,[2,133]),o($Vi,[2,134]),o($VH,[2,34]),o($VH,[2,35]),o($VH,[2,36]),o($VH,[2,37]),o($VH,[2,38]),{30:[1,89]},{22:[1,90]},{22:[1,91]},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,15]),{21:[1,92]},{11:88,21:$Vk,22:$Vl,23:$Vm,25:93,27:94,30:$VI,46:[1,95],49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{15:$Vj,26:100,35:$VJ,37:$VK,38:$Vn,39:97,48:99},{30:[1,102]},{47:[1,103]},o($Vi,[2,13]),o($Vi,[2,14]),{11:88,21:$Vk,22:$Vl,23:$Vm,27:104,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:105,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:106,30:$VI,46:[1,107],49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{15:$Vj,26:108,35:[1,109],38:$Vn},{30:[1,110]},{11:88,21:$Vk,22:$Vl,23:$Vm,27:111,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,24:[1,113],27:112,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},o($VL,[2,113]),o($VL,[2,114]),o($VL,[2,115]),o($VL,[2,116]),o($VL,[2,117]),o($VL,[2,118]),{11:88,21:$Vk,22:$Vl,23:$Vm,27:114,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:115,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{22:[1,116]},{15:$Vj,20:$VM,26:117,38:$Vn,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},o([15,20,38,63,64,65,66,67,68,69,70,71,72,73,74,82,83],$V$,{22:[1,133]}),o($Vi,[2,132]),{11:88,21:$Vk,22:$Vl,23:$Vm,27:134,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:135,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:136,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{22:[1,137]},{22:[1,138]},{22:[1,139]},{22:[1,140]},{22:[1,141]},{22:[1,142]},{22:[1,143]},o($V01,[2,90]),o($V11,[2,32]),o($V11,[2,33]),o($V01,[2,45]),o($V01,[2,46]),o($V01,[2,47]),o($V01,[2,48]),o($V01,[2,52]),o($V01,[2,53]),{22:[1,144]},{22:[1,145]},{22:[1,146]},{22:[1,147]},{22:[1,148]},{22:[1,149]},o($V01,[2,60]),{31:[1,150]},{11:88,21:$Vk,22:$Vl,23:$Vm,27:151,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:152,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{22:[1,153]},{24:[1,154]},{20:$VM,24:[1,155],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{11:88,21:$Vk,22:$Vl,23:$Vm,27:156,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},o($V01,$V$,{22:[1,157]}),o($Vi,[2,30]),{11:88,21:$Vk,22:$Vl,23:$Vm,27:158,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{15:$Vj,26:159,37:[1,160],38:$Vn},o($Vi,[2,42]),{30:[1,161]},{15:$Vj,26:100,35:$VJ,37:$VK,38:$Vn,39:162,48:99},{30:[2,39]},{20:$VM,24:[1,163],37:$V21,62:165,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_,86:164,89:$V31},{20:$VM,24:[1,168],37:$V21,62:170,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_,86:169,89:$V31},{15:$V41,20:$VM,38:$V51,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_,86:174,87:171,89:$V31},{11:88,21:$Vk,22:$Vl,23:$Vm,27:175,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},o($Vi,[2,100]),{11:88,21:$Vk,22:$Vl,23:$Vm,27:176,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{35:[1,177]},{15:$V41,20:$VM,38:$V51,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_,86:174,87:178,89:$V31},{20:$VM,24:[1,179],37:$V21,62:180,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{15:$Vj,26:181,38:$Vn},{20:$VM,24:[1,182],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{20:$VM,24:[1,183],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{18:186,24:[1,185],41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,94:184},o($Vi,[2,130]),{11:88,21:$Vk,22:$Vl,23:$Vm,27:187,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:188,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:189,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:190,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:191,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:192,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:193,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:194,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:196,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,72:[1,195],75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:198,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:[1,197],75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:199,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:200,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:201,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{54:[1,202]},{11:88,21:$Vk,22:$Vl,23:$Vm,27:203,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,18:186,21:$Vk,22:$Vl,23:$Vm,24:$V61,27:208,30:$VI,37:$V71,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,49:73,50:$Vo,51:$Vp,52:$Vq,53:206,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd,94:204},o($V01,[2,63]),{20:$VM,24:[1,209],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},o($V01,[2,79]),{11:88,21:$Vk,22:$Vl,23:$Vm,27:210,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:211,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:212,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:213,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:214,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:215,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:216,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,23:$Vm,30:$VI,49:217,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,91:$Vc,92:$Vd},{24:[1,218]},{11:88,23:$Vm,30:$VI,49:219,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,91:$Vc,92:$Vd},{24:[1,220]},{24:[1,221]},{11:88,21:$Vk,22:$Vl,23:$Vm,27:222,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{15:$V81,18:226,32:[1,223],33:224,34:225,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9},{20:$VM,24:[1,228],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{20:$VM,24:[1,229],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{23:[1,230]},{15:$Vj,26:231,38:$Vn},{15:$Vj,26:232,38:$Vn},{20:$VM,37:$V21,47:[1,233],62:234,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{11:88,21:$Vk,22:$Vl,23:$Vm,24:$V61,27:208,30:$VI,37:$V71,49:73,50:$Vo,51:$Vp,52:$Vq,53:206,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{15:$Vj,20:$VM,26:235,38:$Vn,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},o($Vi,[2,41]),{30:[1,236]},o($V91,[2,44]),o($Vi,[2,31]),{15:$Vj,26:237,38:$Vn},{24:[1,238]},{24:[1,239],37:$Va1},{11:88,21:$Vk,22:$Vl,23:$Vm,27:241,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{11:88,21:$Vk,22:$Vl,23:$Vm,27:242,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{15:$Vj,26:243,38:$Vn},{24:[1,244]},{24:[1,245],37:$Va1},o($Vi,[2,99]),o($Vi,[2,109]),o($Vi,[2,110]),{15:$Vj,26:246,38:$Vn},{20:$VM,37:$V21,47:[1,248],62:247,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{15:$V41,20:$VM,38:$V51,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_,86:174,87:249,89:$V31},{11:88,21:$Vk,22:$Vl,23:$Vm,27:250,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},o($Vi,[2,103]),{15:$Vj,26:251,38:$Vn},{24:[1,252],37:$Va1},o($Vi,[2,108]),o($Vb1,[2,122]),o($Vb1,[2,123]),{24:[1,253]},{31:[1,254]},{30:[1,255]},o($Vc1,[2,64],{20:$VM,63:$VN,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_}),o($Vc1,[2,65],{20:$VM,63:$VN,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_}),o($Vd1,[2,66],{63:$VN,72:$VW,73:$VX,74:$VY}),o($Vd1,[2,67],{63:$VN,72:$VW,73:$VX,74:$VY}),o($Vd1,[2,68],{63:$VN,72:$VW,73:$VX,74:$VY}),o($Vd1,[2,69],{63:$VN,72:$VW,73:$VX,74:$VY}),o($Vd1,[2,70],{63:$VN,72:$VW,73:$VX,74:$VY}),o($Vd1,[2,71],{63:$VN,72:$VW,73:$VX,74:$VY}),o($V01,[2,72]),o($V01,[2,74]),o($V01,[2,73],{49:73,11:88,27:134,21:$Vk,22:$Vl,23:$Vm,30:$VI,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd}),o($V01,[2,75]),o($Ve1,[2,76],{63:$VN,72:$VW}),o($Ve1,[2,77],{63:$VN,72:$VW}),o($Vd1,[2,87],{63:$VN,72:$VW,73:$VX,74:$VY}),o($V01,[2,88]),o($Vd1,[2,89],{63:$VN,72:$VW,73:$VX,74:$VY}),{24:[1,256]},o($V01,[2,50]),{24:[1,257],37:[1,258]},{11:88,21:$Vk,22:$Vl,23:$Vm,27:259,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},o($Vf1,[2,121],{20:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_}),o($V01,[2,78]),{20:$VM,24:[1,260],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{20:$VM,24:[1,261],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{20:$VM,24:[1,262],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{20:$VM,24:[1,263],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{20:$VM,24:[1,264],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{20:$VM,24:[1,265],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{20:$VM,24:[1,266],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{24:[1,267]},o($V01,[2,55]),{37:[1,268]},o($V01,[2,57]),o($V01,[2,58]),{20:$VM,24:[1,269],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{15:$Vj,26:270,38:$Vn},{15:$V81,18:226,32:[1,271],34:272,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9},o($Vg1,[2,23]),{30:[1,273]},o($Vg1,[2,26]),{31:[1,274]},{31:[1,275]},{24:[1,276]},o($Vi,[2,17]),o($Vi,[2,18]),{24:[2,61]},{37:$Va1,47:[1,277]},o($Vi,[2,40]),o($V91,[2,43]),o($Vi,[2,91]),{15:$Vj,26:278,38:$Vn},{15:$Vj,26:279,38:$Vn},{11:88,21:$Vk,22:$Vl,23:$Vm,27:280,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{20:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_,90:[1,281]},o($Vh1,[2,98],{20:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_}),o($Vi,[2,92]),{15:$Vj,26:282,38:$Vn},{15:$Vj,26:283,38:$Vn},o($Vi,[2,111]),{37:$Va1,47:[1,284]},{15:$V41,38:$V51,86:174,87:285,89:$V31},o($Vi,[2,101]),{15:$Vj,20:$VM,26:286,38:$Vn,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},o($Vi,[2,106]),{15:$Vj,26:287,38:$Vn},{31:[1,288]},{4:289,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{24:[2,126],37:[1,291],95:290},{15:$Vj,26:292,38:$Vn},o($V01,[2,51]),{11:88,21:$Vk,22:$Vl,23:$Vm,27:293,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},o($Vf1,[2,120],{20:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_}),o($V01,[2,80]),o($V01,[2,81]),o($V01,[2,82]),o($V01,[2,83]),o($V01,[2,84]),o($V01,[2,85]),o($V01,[2,86]),o($V01,[2,54]),{11:88,23:$Vm,30:$VI,49:294,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,91:$Vc,92:$Vd},o($V01,[2,59]),o($Vi,[2,20]),{15:$Vj,26:295,38:$Vn},o($Vg1,[2,22]),{15:$Vi1,35:[1,296],36:297,37:$Vj1,38:$Vk1},{4:301,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{15:[1,303],105:302,106:$Vl1,109:$Vm1},o($Vi,[2,16]),{24:[2,62]},o($Vi,[2,93]),o($Vi,[2,95]),o($Vh1,[2,97],{20:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_}),{11:88,21:$Vk,22:$Vl,23:$Vm,27:306,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},o($Vi,[2,94]),o($Vi,[2,96]),{15:$V41,38:$V51,86:174,87:307,89:$V31},o($Vi,[2,105]),o($Vi,[2,102]),o($Vi,[2,107]),{4:308,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,32:[1,309],41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{24:[2,127],37:[1,310]},{18:311,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9},o($Vi,[2,131]),o($Vf1,[2,119],{20:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_}),{24:[1,312]},o($Vi,[2,21]),{11:88,21:$Vk,22:$Vl,23:$Vm,27:313,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},o($Vg1,[2,25]),o($Vg1,[2,27]),o($Vg1,[2,28]),o($Vg1,[2,29]),{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,32:[1,314],41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{32:[1,315]},{105:316,106:$Vl1,109:$Vm1},{11:88,21:$Vk,22:$Vl,23:$Vm,27:317,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{90:[1,318]},o([15,24,38],[2,112],{20:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_}),o($Vi,[2,104]),{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,32:[1,319],41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},o($Vi,[2,125]),{18:320,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9},{30:[1,321]},o($V01,[2,56]),{15:$Vi1,20:$VM,36:322,37:$Vj1,38:$Vk1,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{15:$Vj,26:323,38:$Vn},o($Vi,[2,142]),{32:[1,324]},{20:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_,90:[1,325]},{4:326,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},o($Vi,[2,124]),{30:[1,327]},o($Vf1,[2,129]),o($Vg1,[2,24]),o($Vi,[2,135],{100:328,101:329,102:[1,330],103:$Vn1}),o($Vi,[2,143]),{15:[1,332]},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,32:[2,148],41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},o($Vf1,[2,128]),o($Vi,[2,136],{102:[1,333]}),o($Vi,[2,137]),{22:[1,334]},{31:[1,335]},{4:336,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{22:[1,337]},{11:88,21:$Vk,22:$Vl,23:$Vm,27:338,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{4:339,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh,105:341,106:$Vl1,107:[1,340],109:$Vm1},{11:88,21:$Vk,22:$Vl,23:$Vm,27:342,30:$VI,49:73,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,63:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,91:$Vc,92:$Vd},{20:$VM,24:[1,343],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,32:[1,344],41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{38:[1,345]},{32:[2,147]},{20:$VM,24:[1,346],63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,82:$VZ,83:$V_},{31:[1,347]},o($Vo1,[2,141]),{15:[1,348],32:[2,144]},{31:[1,349]},{4:350,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{15:[1,353],105:351,106:$Vl1,108:352,109:$Vm1},{4:354,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,32:[1,355],41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{32:[2,145]},{15:[1,357],105:356,106:$Vl1,109:$Vm1},o($Vp1,[2,150]),{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,17:$V2,18:13,28:14,29:$V3,30:$V4,32:[1,358],41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,84:$Va,85:$Vb,91:$Vc,92:$Vd,93:$Ve,96:$Vf,97:24,98:25,99:$Vg,104:$Vh},{15:[1,359]},{32:[2,146]},o($Vp1,[2,149]),{15:[1,360]},o($Vo1,[2,140]),o($Vo1,[2,138],{101:361,103:$Vn1}),o($Vo1,[2,139])],
defaultActions: {34:[2,1],103:[2,39],233:[2,61],277:[2,62],341:[2,147],351:[2,145],356:[2,146]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 16;// comentario simple línea
break;
case 1:return 17;//; comentario multiple líneas
break;
case 2:return 'TK_NULL';
break;
case 3:return 42;
break;
case 4:return 44;
break;
case 5:return 43;
break;
case 6:return 45;
break;
case 7:return 41;
break;
case 8:return 29;
break;
case 9:return 81;
break;
case 10:return 80;
break;
case 11:return 76;
break;
case 12:return 77;
break;
case 13:return 79;
break;
case 14:return 78;
break;
case 15:return 56;
break;
case 16:return 58;
break;
case 17:return 60;
break;
case 18:return 59;
break;
case 19:return 57;
break;
case 20:return 84;
break;
case 21:return 85;
break;
case 22:return 21;
break;
case 23:return 91;
break;
case 24:return 92;
break;
case 25:return 61;
break;
case 26:return 93;
break;
case 27:return 96;
break;
case 28:return 99;
break;
case 29:return 103;
break;
case 30:return 102;
break;
case 31:return 104;
break;
case 32:return 106;
break;
case 33:return 109;
break;
case 34:return 107;
break;
case 35:return 'TK_WHILE';
break;
case 36:return 'TK_DO';
break;
case 37:return 'TK_FOR';
break;
case 38:return 'TK_IN';
break;
case 39:return 'TK_PUSH';
break;
case 40:return 'TK_POP';
break;
case 41:return 'TK_BEGIN';
break;
case 42:return 'TK_END';
break;
case 43:return 'TK_CONTINUE';
break;
case 44:return 50;
break;
case 45:return 51;
break;
case 46:return 72;
break;
case 47:return 63;
break;
case 48:return 73;
break;
case 49:return 74;
break;
case 50:return 'TK_MODULO'
break;
case 51:return 22;
break;
case 52:return 24;
break;
case 53:return 31;
break;
case 54:return 32;
break;
case 55:return 46;
break;
case 56:return 47;
break;
case 57:return 90;
break;
case 58:return 38;
break;
case 59:return 37;
break;
case 60:return 20;
break;
case 61:return 70;
break;
case 62:return 35;
break;
case 63:return 71;
break;
case 64:return 66;
break;
case 65:return 67;
break;
case 66:return 69;
break;
case 67:return 68;
break;
case 68:return 64;
break;
case 69:return 65;
break;
case 70:return 75;
break;
case 71:return 82;
break;
case 72:return 83;
break;
case 73:return 'TK_numeral';
break;
case 74:return 'TK_dolar';
break;
case 75:return 89;
break;
case 76:return 15
break;
case 77:// se ignoran espacios en blanco
break;
case 78:return 55; 
break;
case 79:return 54;   
break;
case 80:return 23;
break;
case 81:return 52;
break;
case 82:return 30;
break;
case 83:return 5;
break;
case 84: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*(\*(?!\/)|[^*])*\*\/\n)/i,/^(?:null\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:struct\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:log10\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:subString\b)/i,/^(?:length\b)/i,/^(?:toUppercase\b)/i,/^(?:toLowercase\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:parse\b)/i,/^(?:toInt\b)/i,/^(?:toDouble\b)/i,/^(?:typeof\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elseif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:continue\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
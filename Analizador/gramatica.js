/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,12],$V2=[1,9],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[5,8,34,37,48,49,50,51,52],$V9=[1,32],$Va=[1,34],$Vb=[1,33],$Vc=[2,142],$Vd=[10,29,34,44,53],$Ve=[1,53],$Vf=[1,64],$Vg=[1,85],$Vh=[1,84],$Vi=[1,80],$Vj=[1,82],$Vk=[1,81],$Vl=[1,62],$Vm=[1,65],$Vn=[1,66],$Vo=[1,67],$Vp=[1,68],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,52],$VB=[1,61],$VC=[1,54],$VD=[1,55],$VE=[1,56],$VF=[1,57],$VG=[1,58],$VH=[1,59],$VI=[1,60],$VJ=[1,86],$VK=[1,87],$VL=[5,8,10,14,19,31,34,37,39,48,49,50,51,52,53,56,57,58,59,61,62,63,64,65,66,67,68,69,70,74,86,89,90,91,92,93,94,95,101,102,108,109,110,111,112,115,118,119,120,121,123,127,128,129],$VM=[10,31,34,48,49,50,51,53,56,57,58,59,61,62,63,64,65,66,67,68,69,70,74,86,89,90,91,92,93,94,95,108,109],$VN=[1,123],$VO=[1,112],$VP=[1,113],$VQ=[1,114],$VR=[1,115],$VS=[1,116],$VT=[1,117],$VU=[1,118],$VV=[1,119],$VW=[1,120],$VX=[1,121],$VY=[1,122],$VZ=[1,124],$V_=[1,125],$V$=[1,126],$V01=[1,127],$V11=[1,128],$V21=[1,129],$V31=[1,130],$V41=[11,12,41,42,54,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,98,99,100],$V51=[1,165],$V61=[10,11,12,29,41,42,43,53,54,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,98,99,100],$V71=[14,34,39,48,49,50,51,52],$V81=[11,12,41,42,54,74,75,76,77,78,79,80,81,82,85,86,87,88,96,97,98,99,100],$V91=[41,54],$Va1=[1,235],$Vb1=[1,244],$Vc1=[41,42],$Vd1=[1,250],$Ve1=[1,257],$Vf1=[1,262],$Vg1=[1,263],$Vh1=[1,264],$Vi1=[1,265],$Vj1=[1,266],$Vk1=[1,272],$Vl1=[1,273],$Vm1=[1,274],$Vn1=[1,275],$Vo1=[1,276],$Vp1=[11,12,41,42,54,75,76,77,78,79,80,81,82,96,97,99,100],$Vq1=[11,12,41,42,54,75,76,81,82,96,97,99,100],$Vr1=[11,12,41,42,54,74,75,76,77,78,79,80,81,82,85,96,97,99,100],$Vs1=[11,12,41,42,54,74,75,76,77,78,79,80,81,82,85,87,88,96,97,98,99,100],$Vt1=[11,41,54],$Vu1=[1,310],$Vv1=[1,318],$Vw1=[1,326],$Vx1=[14,19,34,48,49,50,51,52,101,102,108,109,110,111,112,115,120,121,123,127,128,129],$Vy1=[14,19,34,48,49,50,51,52,101,102,108,109,110,111,112,115,118,119,120,121,123,127,128,129],$Vz1=[11,12,41,42,54,100],$VA1=[11,12,14,19,34,41,42,48,49,50,51,52,54,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,98,99,100,101,102,108,109,110,111,112,115,118,119,120,121,123,127,128,129],$VB1=[11,41],$VC1=[11,41,42],$VD1=[1,416],$VE1=[1,417],$VF1=[1,425],$VG1=[14,19,34,48,49,50,51,52,101,102,108,109,110,111,112,115,118,120,121,123,127,128,129],$VH1=[14,121];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"VOID_MAIN":6,"INSTRUCCIONES_GLOBALES":7,"TK_VOID":8,"TK_MAIN":9,"TK_par_apertura":10,"TK_par_cierre":11,"TK_corchete_apertura":12,"INSTRUCCION":13,"TK_corchete_cierre":14,"DECLARACION":15,"IMPRESION":16,"ASIGNACION":17,"FUNCIONES_NATIVAS":18,"LLAMADA_FUNCION":19,"BREAK":20,"RETURN":21,"CONDICIONALES":22,"BUCLES":23,"LISTA_INSTRUCCIONES":24,"STRUCT":25,"INSTRUCCION2":26,"TIPO_VALOR":27,"TIPO_DECLARACION":28,"TK_punto":29,"TK_PARSE":30,"TK_CADENA":31,"EXPRESIONARIT":32,"FIN_LINEA":33,"TK_ID":34,"PARAMETRO_FUNSION":35,"MAS_PARAMETROS_FUNSION":36,"TK_STRUCT":37,"CONTENIDO_STRUCT":38,"IMPRECION":39,"FIN_LINEA_STRUCT":40,"TK_coma":41,"TK_pcoma":42,"TK_igual":43,"TK_ID_":44,"MAS_VALORES_IMPRESION":45,"MAS_VARIABLES":46,"COND_ARREGLO":47,"TK_STRING":48,"TK_INT":49,"TK_BOOLEAN":50,"TK_DOUBLE":51,"TK_CHAR":52,"TK_llave_apertura":53,"TK_llave_cierre":54,"VALORES":55,"TK_NULL":56,"TK_TRUE":57,"TK_FALSE":58,"TK_CARACTER":59,"ACCESSOATRIBUTO":60,"TK_ENTERO":61,"TK_DECIMAL":62,"TK_BEGIN":63,"TK_END":64,"TK_CARETER_OF_POSITION":65,"TK_TOLOWERCASE":66,"TK_SUBSTRING":67,"TK_TOUPPERCASE":68,"TK_LENGTH":69,"TK_TYPEOF":70,"PARAMETROS_EXTRA":71,"ARREGLO":72,"LISTA_ARREGLO":73,"TK_MENOS":74,"TK_and":75,"TK_or":76,"TK_mayor_igual":77,"TK_menor_igual":78,"TK_mayor":79,"TK_menor":80,"TK_igualacion":81,"TK_desigual":82,"TK_INCREMENTO":83,"TK_DECREMENTO":84,"TK_MAS":85,"TK_numeral":86,"TK_POR":87,"TK_DIVIDIDO":88,"TK_not":89,"TK_SIN":90,"TK_COS":91,"TK_LOG":92,"TK_TAN":93,"TK_SQRT":94,"TK_POW":95,"TK_concat":96,"TK_potencia":97,"TK_MODULO":98,"TK_pregunta":99,"TK_dos_puntos":100,"TK_PRINT":101,"TK_PRINTLN":102,"SIGNOS_COMPARACION":103,"FUNCIONES_ARREGLO":104,"TK_PUSH":105,"TK_POP":106,"PARAMETROS":107,"TK_TOINT":108,"TK_TODOUBLE":109,"TK_RETURN":110,"TK_BREAK":111,"TK_CONTINUE":112,"FUNCION_IF":113,"FUNCION_SWITCH":114,"TK_IF":115,"FUNCION_ELSEIF":116,"FUNCION_ELSE":117,"TK_ELSEIF":118,"TK_ELSE":119,"TK_SWITCH":120,"TK_CASE":121,"SENTENCIAS_CASE":122,"TK_DEFAULT":123,"BUCLE_WHILE":124,"BUCLE_DO_WHILE":125,"BUCLE_FOR":126,"TK_WHILE":127,"TK_DO":128,"TK_FOR":129,"TK_IN":130,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_VOID",9:"TK_MAIN",10:"TK_par_apertura",11:"TK_par_cierre",12:"TK_corchete_apertura",14:"TK_corchete_cierre",19:"LLAMADA_FUNCION",29:"TK_punto",30:"TK_PARSE",31:"TK_CADENA",34:"TK_ID",37:"TK_STRUCT",39:"IMPRECION",41:"TK_coma",42:"TK_pcoma",43:"TK_igual",44:"TK_ID_",48:"TK_STRING",49:"TK_INT",50:"TK_BOOLEAN",51:"TK_DOUBLE",52:"TK_CHAR",53:"TK_llave_apertura",54:"TK_llave_cierre",56:"TK_NULL",57:"TK_TRUE",58:"TK_FALSE",59:"TK_CARACTER",61:"TK_ENTERO",62:"TK_DECIMAL",63:"TK_BEGIN",64:"TK_END",65:"TK_CARETER_OF_POSITION",66:"TK_TOLOWERCASE",67:"TK_SUBSTRING",68:"TK_TOUPPERCASE",69:"TK_LENGTH",70:"TK_TYPEOF",74:"TK_MENOS",75:"TK_and",76:"TK_or",77:"TK_mayor_igual",78:"TK_menor_igual",79:"TK_mayor",80:"TK_menor",81:"TK_igualacion",82:"TK_desigual",83:"TK_INCREMENTO",84:"TK_DECREMENTO",85:"TK_MAS",86:"TK_numeral",87:"TK_POR",88:"TK_DIVIDIDO",89:"TK_not",90:"TK_SIN",91:"TK_COS",92:"TK_LOG",93:"TK_TAN",94:"TK_SQRT",95:"TK_POW",96:"TK_concat",97:"TK_potencia",98:"TK_MODULO",99:"TK_pregunta",100:"TK_dos_puntos",101:"TK_PRINT",102:"TK_PRINTLN",105:"TK_PUSH",106:"TK_POP",108:"TK_TOINT",109:"TK_TODOUBLE",110:"TK_RETURN",111:"TK_BREAK",112:"TK_CONTINUE",115:"TK_IF",118:"TK_ELSEIF",119:"TK_ELSE",120:"TK_SWITCH",121:"TK_CASE",123:"TK_DEFAULT",127:"TK_WHILE",128:"TK_DO",129:"TK_FOR",130:"TK_IN"},
productions_: [0,[3,2],[4,1],[4,2],[4,2],[4,3],[6,7],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[24,1],[7,2],[7,2],[7,2],[7,1],[7,1],[7,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[15,2],[15,6],[15,5],[15,8],[15,8],[15,9],[15,7],[25,5],[25,6],[38,2],[38,2],[38,2],[38,1],[38,1],[38,1],[40,1],[40,1],[28,4],[28,5],[28,3],[28,5],[28,3],[28,2],[46,3],[46,2],[33,1],[27,1],[27,1],[27,1],[27,1],[27,1],[47,2],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,4],[55,3],[55,6],[55,3],[55,3],[55,4],[55,4],[55,4],[55,4],[55,1],[55,4],[55,5],[55,4],[72,3],[73,3],[73,1],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,2],[32,3],[32,3],[32,4],[32,3],[32,3],[32,3],[32,2],[32,4],[32,5],[32,4],[32,5],[32,4],[32,5],[32,4],[32,5],[32,4],[32,5],[32,6],[32,7],[32,2],[32,3],[32,3],[32,3],[32,5],[32,3],[32,1],[16,5],[16,5],[16,6],[16,6],[45,3],[45,2],[60,3],[60,4],[60,5],[60,1],[17,4],[17,2],[17,4],[17,5],[17,6],[17,4],[17,3],[17,3],[71,3],[71,2],[104,6],[104,5],[104,5],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[107,3],[107,2],[107,1],[18,4],[18,4],[35,2],[35,3],[35,2],[35,3],[36,4],[36,4],[36,3],[36,3],[36,3],[36,2],[21,3],[21,2],[20,2],[20,2],[22,1],[22,1],[113,7],[113,8],[113,8],[113,5],[113,6],[113,6],[116,8],[116,9],[116,8],[116,7],[117,4],[117,2],[114,10],[114,11],[114,13],[122,5],[122,8],[122,4],[23,1],[23,1],[23,1],[124,7],[125,9],[126,11],[126,11],[126,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log($$[$0-1]); return $$[$0-1];
break;
case 2:
this.$ =  [$$[$0]]
break;
case 3:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 4:
this.$ = $$[$0].concat($$[$0-1]);
break;
case 5:
$$[$0-2].concat($$[$0-1]); $$[$0-2].concat($$[$0]); this.$ = $$[$0-2]
break;
case 6:
this.$ = new Instrucciones($$[$0-1],this._$.first_line,this._$.first_column,"MAIN")
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 26: case 27: case 28:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 29: case 30: case 31:
this.$ = [$$[$0]]
break;
case 25:
this.$ = new Instrucciones($$[$0],this._$.first_line,this._$.first_column,null)
break;
case 32: case 33: case 34: case 35: case 36: case 37:
this.$ = new Instrucciones([$$[$0]],this._$.first_line,this._$.first_column,null)
break;
case 38:
	var asignacion = $$[$0]; console.log(asignacion.expresion);
																																							if(!Array.isArray(asignacion)){
																																								console.log("entra al if");
																																								asignacion.tipo = $$[$0-1]; 
																																								this.$ = asignacion;
																																							}
																																							else{
																																								var tam = asignacion.length; console.log("el tamaño del vector es:" +tam);
																																								//var inst = new Instrucciones([asignacion[0]],this._$.first_line,this._$.first_column,null);
																																								for(var i=0;i<tam;i++){
																																								console.log("DENTRO DEL FOR");
																																								asignacion[i].tipo = $$[$0-1];
																																								//var rec = asignacion[i];
																																								//console.log(asignacion[i].tipo+" "+asignacion[i].id);
																																								//this.$ = asignacion[i];
																																								//console.log("el valor en inst es null = ")
																																								//inst.instrucciones.push(asignacion[i]);
																																								//this.$ = inst;
																																								}
																																								this.$ = asignacion; 
																																								//this.$ = asignacion;
																																								//this.$ = new Instrucciones([asignacion],this._$.first_line,this._$.first_column,null);
																																							}
																																							
																																						
break;
case 41:
var listainst =$$[$0-1]; listainst.crearentorno=false; this.$ = new Funcion($$[$0-7],$$[$0-6],$$[$0-4],listainst,this._$.first_line,this._$.first_column);
break;
case 42:
var listainst =$$[$0-1]; listainst.crearentorno=false; this.$ = new Funcion($$[$0-7],$$[$0-6],[new Parametro($$[$0-4],null,null,this._$.first_line,this._$.first_column)],listainst,this._$.first_line,this._$.first_column);
break;
case 43:
var listainst =$$[$0-1]; listainst.crearentorno=false; var nuevo = new Parametro($$[$0-5],null,null,this._$.first_line,this._$.first_column);
																																			 			this.$ = new Funcion($$[$0-8],$$[$0-7],[nuevo].concat($$[$0-4]),listainst,this._$.first_line,this._$.first_column);
break;
case 44:
var listainst =$$[$0-1]; listainst.crearentorno=false;this.$ = new Funcion($$[$0-6],$$[$0-5],[],listainst,this._$.first_line,this._$.first_column);
break;
case 55:
this.$ = new Declaracion($$[$0-1],this._$.first_line,this._$.first_column,null,$$[$0-3])
break;
case 56:
this.$ = new Declaracion( new ExpComa($$[$0-2],$$[$0-1],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,null,$$[$0-4]);
break;
case 57:
var vec = $$[$0-1]; vec.push(new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0-2])); this.$ = vec;
break;
case 58:
this.$ = new DeclararArray($$[$0-3], $$[$0-1],null,this._$.first_line,this._$.first_column);
break;
case 59:
this.$ = new DeclararArray($$[$0-1],null,null,this._$.first_line,this._$.first_column);
break;
case 60:
this.$ = new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0-1]);
break;
case 61:
var vec = $$[$0-2]; vec.concat(new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0])); this.$ = vec;
break;
case 62:
var vec = [new Declaracion(null,this._$.first_line,this._$.first_column,null,$$[$0])]; this.$ = vec;
break;
case 64:
this.$= Tipo.STRING
break;
case 65:
this.$= Tipo.INTEGER
break;
case 66:
this.$= Tipo.BOOLEAN
break;
case 67:
this.$= Tipo.DOUBLE
break;
case 68:
this.$= Tipo.CHAR
break;
case 70:
var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.STRING,this._$.first_line,this._$.first_column);
break;
case 72:
this.$ = new Literal(true,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 73:
this.$ = new Literal(false,Tipo.BOOLEAN,this._$.first_line,this._$.first_column);
break;
case 74:
var a = $$[$0]; var al=a.length; var c = a.substring(1,al-1);    this.$ = new Literal(c,Tipo.CHAR,this._$.first_line,this._$.first_column);
break;
case 75:
this.$ =$$[$0];
break;
case 76:
this.$ = new Literal(parseInt($$[$0]),Tipo.INTEGER,this._$.first_line,this._$.first_column)
break;
case 77:
this.$ = new Literal(parseFloat($$[$0]),Tipo.DOUBLE,this._$.first_line,this._$.first_column);
break;
case 85:
this.$ = new FuncionesNativas($$[$0-1],TipoFuncionNativa.TYPEOF,this._$.first_line,this._$.first_column)
break;
case 86:
this.$ = new FuncionesNativas($$[$0],TipoFuncionNativa.INTPARSE,this._$.first_line,this._$.first_column)
break;
case 87:
this.$ = new FuncionesNativas($$[$0],TipoFuncionNativa.DOUBLEPARSE,this._$.first_line,this._$.first_column)
break;
case 88:
this.$ = new FuncionesNativas($$[$0],TipoFuncionNativa.BOOLEANPARSE,this._$.first_line,this._$.first_column)
break;
case 90:
this.$ = new FuncionesNativas($$[$0-1],TipoFuncionNativa.STRING,this._$.first_line,this._$.first_column)
break;
case 91:
this.$ = new LlamadaFuncion(new Acceso($$[$0-4],this._$.first_line,this._$.first_column),true,[$$[$0-2]].concat($$[$0-1]),this._$.first_line,this._$.first_column);
break;
case 92:
this.$ = new LlamadaFuncion(new Acceso($$[$0-3],this._$.first_line,this._$.first_column),true,[$$[$0-1]],this._$.first_line,this._$.first_column);
break;
case 93:
this.$=$$[$0-1];
break;
case 94:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 95:
this.$=[$$[$0]]
break;
case 96:
this.$ = new Aritmetica( new Literal(-1,Tipo.INTEGER,this._$.first_line,this._$.first_column) ,$$[$0],TipoAritmetica.MULTIPLICACION,this._$.first_line,this._$.first_column)
break;
case 97:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.AND,this._$.first_line,this._$.first_column);
break;
case 98:
this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.OR,this._$.first_line,this._$.first_column);
break;
case 99:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 100:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_IGUAL,this._$.first_line,this._$.first_column);
break;
case 101:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_QUE,this._$.first_line,this._$.first_column);
break;
case 102:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_QUE,this._$.first_line,this._$.first_column);
break;
case 103:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALDAD,this._$.first_line,this._$.first_column);
break;
case 104:
this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.DESIGUALDAD,this._$.first_line,this._$.first_column);
break;
case 107:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA,this._$.first_line,this._$.first_column)
break;
case 108:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA,this._$.first_line,this._$.first_column)
break;
case 110:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION,this._$.first_line,this._$.first_column)
break;
case 111:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION,this._$.first_line,this._$.first_column)
break;
case 112:
this.$ = $$[$0-1]
break;
case 113:
this.$ = new Logica($$[$0],$$[$0],TipoLogica.NOT,this._$.first_line,this._$.first_column);
break;
case 114: case 115:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.SENO,this._$.first_line,this._$.first_column)
break;
case 116: case 117:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.COSENO,this._$.first_line,this._$.first_column)
break;
case 118: case 119:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.LOGARITMO,this._$.first_line,this._$.first_column)
break;
case 120: case 121:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.TANGENTE,this._$.first_line,this._$.first_column)
break;
case 122: case 123:
this.$ = new Aritmetica($$[$0-1],$$[$0-1],TipoAritmetica.RAIZ,this._$.first_line,this._$.first_column)
break;
case 124: case 125:
this.$ = new Aritmetica($$[$0-3],$$[$0-1],TipoAritmetica.POW,this._$.first_line,this._$.first_column)
break;
case 127:
 var a = $$[$0-2]; var al=a.length; var b = $$[$0]; var bl = b.length; var c = a.substring(1,al-1); var d = b.substring(1,bl-1); var total = c+d;  this.$ = total;
break;
case 128:
 this.$ = new Potencia($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 129:
this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO,this._$.first_line,this._$.first_column);
break;
case 130:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 131:
var nuevo = new ConstruirArray($$[$0-1],this._$.first_line,this._$.first_column); this.$=nuevo;
break;
case 132:
this.$ = $$[$0];
break;
case 133:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,false);
break;
case 134:
this.$ = new Print($$[$0-2],this._$.first_line,this._$.first_column,true);
break;
case 135:
console.log($$[$0-2]);this.$ = new Print( new ExpComa($$[$0-3],$$[$0-2],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,false);
break;
case 136:
this.$ = new Print( new ExpComa($$[$0-3],$$[$0-2],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column,true);
break;
case 137:
 var concat = new ExpComa($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);console.log("****sube *****"); console.log(concat); this.$ = concat
break;
case 138:
this.$ = $$[$0] ;
break;
case 139:
new AccesoStruct
break;
case 140:
this.$ = new AccesoArray($$[$0-1],$$[$0-3], this._$.first_line,this._$.first_column);
break;
case 141:
this.$ = new AccesoArray([$$[$0-2]].concat($$[$0-1]),$$[$0-4], this._$.first_line,this._$.first_column);
break;
case 142:
this.$ = new Acceso($$[$0],this._$.first_line,this._$.first_column);
break;
case 143:
//console.log("el tipo es acceso? "); console.log($$[$0-3] instanceof Acceso);
																													if($$[$0-3] instanceof Acceso){
																														//console.log("es asignacion variable");
																														var a1 = new Asignacion($$[$0-1],this._$.first_line,this._$.first_column,$$[$0-3]);
																														console.log(a1.expresion);
																														this.$ = a1;
																													}
																													else if($$[$0-3] instanceof AccesoArray){
																														console.log("AccesoArray - no entrar")
																														this.$ = new AsignarValorArray($$[$0-1],$$[$0-3], this._$.first_line,this._$.first_column);		
																													}																													
																												
break;
case 146:
this.$ = new LlamadaFuncion($$[$0-4],false,[$$[$0-2]],this._$.first_line,this._$.first_column);
break;
case 147:
console.log("el 3");console.log($$[$0-3]);console.log("el 4");console.log($$[$0-2]);this.$= new LlamadaFuncion($$[$0-5],false,[$$[$0-3]].concat($$[$0-2]),this._$.first_line,this._$.first_column);
break;
case 151:

																										//if(!($$[$0-2] instanceof Array)){
																											//console.log("dentro de instance of");
																											//$$[$0-2] = [$$[$0-2]];				
																										//}
																										
																										var aux = $$[$0-2].concat($$[$0]);
																										this.$ =aux;
																										
break;
case 152:
this.$ = [$$[$0]];
break;
case 165:
this.$ = new FuncionesNativas($$[$0-1],TipoFuncionNativa.TOINT,this._$.first_line,this._$.first_column)
break;
case 166:
this.$ = new FuncionesNativas($$[$0-1],TipoFuncionNativa.TODOUBLE,this._$.first_line,this._$.first_column)
break;
case 167: case 174:
this.$ = [new Parametro($$[$0],$$[$0-1],null,this._$.first_line,this._$.first_column)];
break;
case 168:
this.$ = [new Parametro($$[$0-1],$$[$0-2],null,this._$.first_line,this._$.first_column)].concat($$[$0]);
break;
case 169: case 175:
this.$ = [new Parametro($$[$0],Tipo.STRUCT,$$[$0-1],this._$.first_line,this._$.first_column)];
break;
case 170:
this.$ = [new Parametro($$[$0-1],Tipo.STRUCT,$$[$0-2],this._$.first_line,this._$.first_column)].concat($$[$0]);
break;
case 171:
this.$ = $$[$0-3].concat(new Parametro($$[$0],$$[$0-1],null,this._$.first_line,this._$.first_column));
break;
case 172:
this.$ = $$[$0-3].concat(new Parametro($$[$0],Tipo.STRUCT,$$[$0-1],this._$.first_line,this._$.first_column));
break;
case 173:
this.$ = $$[$0-2].concat(new Parametro($$[$0],null,null,this._$.first_line,this._$.first_column));
break;
case 176:
this.$ = [new Parametro($$[$0],null,null,this._$.first_line,this._$.first_column)];
break;
case 177:
this.$ = new Retornar($$[$0-1],this._$.first_line,this._$.first_column);
break;
case 178:
this.$ = new Retornar(null,this._$.first_line,this._$.first_column);
break;
case 179:
this.$ = new Break(this._$.first_line,this._$.first_column);
break;
case 180:
this.$ = new Continue(this._$.first_line,this._$.first_column);
break;
case 181: case 182:
this.$ = $$[$0]
break;
case 183:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 184: case 185:
$$[$0-2].nombre = "AmbienteIf"; this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 186:
$$[$0].nombre = "AmbienteIf"; this.$ = new If($$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column)
break;
case 187: case 188:
$$[$0-1].nombre = "AmbienteIf"; this.$ = new If($$[$0-3],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column)
break;
case 189:

																																									$$[$0-1].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column); 
																																									var valorcondicion = $$[$0-7];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse; 
																																									this.$ = $$[$0-7]
																																								
break;
case 190:

																																									$$[$0-2].nombre = "AmbienteElseIf"; 
																																									var Velse = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
																																									var valorcondicion = $$[$0-8];
																																									while(valorcondicion.condicionelse!=null){
																																										valorcondicion = valorcondicion.condicionelse;
																																									}
																																									valorcondicion.condicionelse = Velse;
																																									this.$ = $$[$0-8]
																																								
break;
case 191:
$$[$0-2].nombre = "AmbienteElseIf"; 
																																								this.$ = new If($$[$0-5],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column)
break;
case 192:
$$[$0-1].nombre = "AmbienteElseIf";
																																								this.$ = new If($$[$0-4],$$[$0-1],null,this._$.first_line,this._$.first_column)
break;
case 193:
$$[$0-1].nombre = "AmbienteElse";this.$ = $$[$0-1]
break;
case 194:
$$[$0].nombre = "AmbienteElse";this.$ = $$[$0]
break;
case 195:
$$[$0-1].nombre= "AmbienteSwitch";
																																																											this.$ = new Switch($$[$0-7],$$[$0-3],$$[$0-1],null,this._$.first_line,this._$.first_column);
																																																											
break;
case 196:
$$[$0-2].nombre= "AmbienteSwitch"; 
																																																											var sentenciascase = $$[$0-1];
																																																											while(sentenciascase!= null){
																																																												sentenciascase.condicionswitch = $$[$0-8];
																																																												sentenciascase = sentenciascase.condiciondefault;
																																																											}
																																																											this.$ = new Switch( $$[$0-8],$$[$0-4],$$[$0-2],$$[$0-1],this._$.first_line,this._$.first_column);
																																																											
break;
case 197:
$$[$0-4].nombre= "AmbienteSwitch";
																																																											$$[$02].condicionswitch = $$[$0-10];  this.$ = new Switch( $$[$0-10],$$[$0-6],$$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column);
																																																											
break;
case 198:

																																			console.log("entra en case:");
																																			$$[$0-1].nombre= "AmbienteCase";
																																			var Vcase = new Switch($$[$0-4].condicionswitch,$$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-4];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			$$[$0-4].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			console.log("sube el valor nulo creo: "+$$[$0-4].condicionswitch+"  aca tambien vacio creo anterior "+valorcondicion.condicionswitch);
																																			this.$ = $$[$0-4];
																																		
break;
case 199:

																																			//console.log("case: "+$$[$0-6].valor);
																																			$$[$0-4].nombre= "AmbienteCase";
																																			var Vcase = new Switch($$[$0-7].condicionswitch,$$[$0-5],$$[$0-3],$$[$02],this._$.first_line,this._$.first_column);
																																			var valorcondicion = $$[$0-7];
																																			while(valorcondicion.condiciondefault!= null){
																																				valorcondicion = valorcondicion.condiciondefault;
																																			}
																																			if(valorcondicion.condicionswitch == null){
																																				console.log("la condicion switch de la ultima iteracion es null")
																																			}
																																			$$[$0-7].condicionswitch = valorcondicion.condicionswitch;
																																			valorcondicion.condiciondefault = Vcase;
																																			this.$ = $$[$0-7];
																																		
break;
case 200:
console.log("entra al solitario case");$$[$0].nombre= "AmbienteCase";this.$ = new Switch(null,$$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column)
break;
case 204:
this.$ = new While($$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 205:
this.$ = new DoWhile($$[$0-2],$$[$0-6],this._$.first_line,this._$.first_column);
break;
case 206:
this.$ = new For($$[$0-8].id,$$[$0-8],$$[$0-7],TipoAumento.INCREMENTO,TipoFor.CLASICO,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 207:
this.$ = new For($$[$0-8].id,$$[$0-8],$$[$0-7],TipoAumento.DECREMENTO,TipoFor.CLASICO,$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 208:
console.log("Tipo en forin: "+$$[$0-3].tipo);this.$ = new For($$[$0-5],0,$$[$0-3],TipoAumento.DECREMENTO,TipoFor.FORIN,$$[$0-1],this._$.first_line,this._$.first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,15:8,17:7,25:6,27:11,34:$V1,37:$V2,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10},{1:[3]},{5:[1,18]},{5:[2,2],7:19,15:8,17:7,25:6,27:11,34:$V1,37:$V2,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10},{6:20,8:$V0,15:23,17:21,25:22,27:11,34:$V1,37:$V2,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10},{9:[1,24]},o($V8,[2,29]),o($V8,[2,30]),o($V8,[2,31]),{34:[1,25]},{10:[1,29],29:$V9,33:27,42:$Va,43:[1,26],53:$Vb,77:[1,35],78:[1,36],79:[1,37],80:[1,38],81:[1,39],82:[1,40],83:[1,31],84:[1,30],103:28},{10:[1,43],28:41,29:[1,42],34:[1,44],44:[1,45],47:46,53:[1,47]},o([10,29,42,43,53,77,78,79,80,81,82,83,84],$Vc),o($Vd,[2,64]),o($Vd,[2,65]),o($Vd,[2,66]),o($Vd,[2,67]),o($Vd,[2,68]),{1:[2,1]},{5:[2,4],15:23,17:21,25:22,27:11,34:$V1,37:$V2,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10},{5:[2,3],7:48,15:8,17:7,25:6,27:11,34:$V1,37:$V2,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10},o($V8,[2,26]),o($V8,[2,27]),o($V8,[2,28]),{10:[1,49]},{12:[1,50]},{10:$Ve,18:83,31:$Vf,32:51,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($VL,[2,144]),{10:$Ve,18:83,31:$Vf,32:88,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,11:[1,90],18:83,31:$Vf,32:89,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{33:91,42:$Va},{33:92,42:$Va},{34:[1,93]},{10:$Ve,18:83,31:$Vf,32:94,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($VL,[2,63]),o($VM,[2,156]),o($VM,[2,157]),o($VM,[2,158]),o($VM,[2,159]),o($VM,[2,160]),o($VM,[2,161]),o($VL,[2,38]),{30:[1,95]},{10:$Ve,18:83,31:$Vf,32:96,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:[1,97],33:100,41:[1,101],42:$Va,43:[1,98],46:99},{43:[1,102]},{34:[1,103]},{54:[1,104]},{5:[2,5],15:23,17:21,25:22,27:11,34:$V1,37:$V2,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10},{11:[1,105]},{14:[1,106],15:109,17:108,27:11,34:$V1,38:107,39:[1,110],48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10},{33:111,42:$Va,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:$Ve,18:83,31:$Vf,32:131,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:132,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:133,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:[1,134],86:[1,135]},{10:[1,136],86:[1,137]},{10:[1,138],86:[1,139]},{10:[1,140],86:[1,141]},{10:[1,142],86:[1,143]},{10:[1,144],86:[1,145]},{10:$Ve,18:83,31:$Vf,32:146,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:148,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,73:147,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($V41,[2,132]),o($V41,[2,70]),o($V41,[2,71]),o($V41,[2,72]),o($V41,[2,73]),o($V41,[2,74]),o($V41,[2,75],{29:$V9,53:$Vb}),o($V41,[2,76]),o($V41,[2,77]),o($V41,[2,78]),o($V41,[2,79]),{10:[1,149]},{10:[1,150]},{10:[1,151]},{10:[1,152]},{10:[1,153]},{10:[1,154]},{29:[1,155]},{29:[1,156]},{29:[1,157]},o($V41,[2,89]),{10:[1,158]},o([11,12,29,41,42,53,54,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,98,99,100],$Vc,{10:[1,159]}),{10:[1,160]},{10:[1,161]},{33:162,42:$Va,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{11:[1,163],41:$V51,71:164,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{33:166,42:$Va},o($VL,[2,149]),o($VL,[2,150]),o($V61,[2,139]),{41:$V51,54:[1,167],71:168,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:[1,169]},{11:[1,170],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{11:[1,173],27:174,34:[1,172],35:171,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7},{10:$Ve,18:83,31:$Vf,32:175,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{33:176,41:[1,177],42:$Va},o($VL,[2,60]),{34:[1,178]},{10:$Ve,18:83,31:$Vf,32:179,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{33:181,42:$Va,43:[1,180]},{34:[2,69]},{12:[1,182]},{33:183,42:$Va},{14:[1,184],15:186,17:185,27:11,34:$V1,39:[1,187],48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10},o($V71,[2,50]),o($V71,[2,51]),o($V71,[2,52]),o($VL,[2,143]),{10:$Ve,18:83,31:$Vf,32:188,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:189,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:190,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:191,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:192,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:193,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:194,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:195,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($V41,[2,105]),o($V41,[2,106]),{10:$Ve,18:83,31:$Vf,32:196,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:197,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{87:[1,198]},{10:$Ve,18:83,31:$Vf,32:199,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:200,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:201,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:202,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:203,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:204,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($V41,[2,96]),{11:[1,205],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($V81,[2,113],{83:$VW,84:$VX}),{10:$Ve,18:83,31:$Vf,32:206,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:[1,207]},{10:$Ve,18:83,31:$Vf,32:208,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:[1,209]},{10:$Ve,18:83,31:$Vf,32:210,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:[1,211]},{10:$Ve,18:83,31:$Vf,32:212,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:[1,213]},{10:$Ve,18:83,31:$Vf,32:214,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:[1,215]},{10:$Ve,18:83,31:$Vf,32:216,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:[1,217]},o($V81,[2,126],{83:$VW,84:$VX}),{41:[1,219],54:[1,218]},o($V91,[2,95],{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31}),{18:83,31:$Vf,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,55:220,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,108:$VJ,109:$VK},{11:[1,221]},{18:83,31:$Vf,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,55:222,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,108:$VJ,109:$VK},{11:[1,223]},{11:[1,224]},{10:$Ve,18:83,31:$Vf,32:225,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{30:[1,226]},{30:[1,227]},{30:[1,228]},{10:$Ve,18:83,31:$Vf,32:229,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:230,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:231,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:232,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($VL,[2,145]),{33:233,42:$Va},{11:[1,234],41:$Va1},{10:$Ve,18:83,31:$Vf,32:236,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($VL,[2,148]),o($V61,[2,140]),{41:$Va1,54:[1,237]},{31:[1,238]},{33:239,42:$Va},{11:[1,240]},{11:[1,241],34:[1,243],36:242,41:$Vb1},{12:[1,245]},{34:[1,246]},{33:247,42:$Va,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($VL,[2,57]),{34:[1,248]},o($Vc1,[2,62]),{41:$Vd1,45:249,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:$Ve,18:83,31:$Vf,32:251,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($VL,[2,59]),{13:252,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},o($V8,[2,45]),{33:277,42:$Va},o($V71,[2,47]),o($V71,[2,48]),o($V71,[2,49]),o([11,12,41,42,54,75,76,99,100],[2,97],{74:$VN,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21}),o([11,12,41,42,54,76,99,100],[2,98],{74:$VN,75:$VO,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21}),o($Vp1,[2,99],{74:$VN,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,98:$V21}),o($Vp1,[2,100],{74:$VN,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,98:$V21}),o($Vp1,[2,101],{74:$VN,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,98:$V21}),o($Vp1,[2,102],{74:$VN,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,98:$V21}),o($Vq1,[2,103],{74:$VN,77:$VQ,78:$VR,79:$VS,80:$VT,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,98:$V21}),o($Vq1,[2,104],{74:$VN,77:$VQ,78:$VR,79:$VS,80:$VT,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,98:$V21}),o($Vr1,[2,107],{83:$VW,84:$VX,86:$VZ,87:$V_,88:$V$,98:$V21}),o($Vr1,[2,108],{83:$VW,84:$VX,86:$VZ,87:$V_,88:$V$,98:$V21}),{10:$Ve,18:83,31:$Vf,32:278,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($Vs1,[2,110],{83:$VW,84:$VX,86:$VZ}),o($Vs1,[2,111],{83:$VW,84:$VX,86:$VZ}),o([11,12,41,42,54,75,76,96,97,99,100],[2,127],{74:$VN,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,98:$V21}),o([11,12,41,42,54,75,76,97,99,100],[2,128],{74:$VN,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,98:$V21}),o($Vs1,[2,129],{83:$VW,84:$VX,86:$VZ}),{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31,100:[1,279]},o($V41,[2,112]),{11:[1,280],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:$Ve,18:83,31:$Vf,32:281,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{11:[1,282],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:$Ve,18:83,31:$Vf,32:283,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{11:[1,284],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:$Ve,18:83,31:$Vf,32:285,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{11:[1,286],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:$Ve,18:83,31:$Vf,32:287,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{11:[1,288],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:$Ve,18:83,31:$Vf,32:289,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{41:[1,290],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:$Ve,18:83,31:$Vf,32:291,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($V41,[2,131]),{10:$Ve,18:83,31:$Vf,32:292,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{11:[1,293]},o($V41,[2,81]),{41:[1,294]},o($V41,[2,83]),o($V41,[2,84]),{11:[1,295],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:$Ve,18:83,31:$Vf,32:296,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:297,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:298,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{11:[1,299],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{11:[1,301],41:$V51,71:300,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{11:[1,302],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{11:[1,303],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($VL,[2,146]),{33:304,42:$Va},{10:$Ve,18:83,31:$Vf,32:305,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($Vt1,[2,152],{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31}),o($V61,[2,141]),{11:[1,306]},o($VL,[2,40]),{12:[1,307]},{12:[1,308]},{11:[1,309],41:$Vu1},{11:[2,169],36:311,41:$Vb1},{27:312,34:[1,313],48:$V3,49:$V4,50:$V5,51:$V6,52:$V7},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:314,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{11:[2,167],36:316,41:$Vb1},o($VL,[2,55]),o($Vc1,[2,61]),{33:317,41:$Vv1,42:$Va},{10:$Ve,18:83,31:$Vf,32:319,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{33:320,42:$Va,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{14:[1,321],15:322,16:323,17:324,18:325,19:$Vw1,20:327,21:328,22:329,23:330,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},o($Vx1,[2,16]),o($Vx1,[2,17]),o($Vx1,[2,18]),o($Vx1,[2,19]),o($Vx1,[2,20]),o($Vx1,[2,21]),o($Vx1,[2,22]),o($Vx1,[2,23]),o($Vx1,[2,24]),{10:[1,331]},{10:[1,332]},{10:$Ve,18:83,31:$Vf,32:333,33:334,34:$Vg,42:$Va,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{42:[1,335]},{42:[1,336]},o($Vx1,[2,181]),o($Vx1,[2,182]),o($Vy1,[2,201]),o($Vy1,[2,202]),o($Vy1,[2,203]),{10:[1,337]},{10:[1,338]},{10:[1,339]},{12:[1,340]},{10:[1,341],34:[1,342]},o($V8,[2,46]),o($V81,[2,109],{83:$VW,84:$VX}),{10:$Ve,18:83,31:$Vf,32:343,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($V41,[2,114]),{11:[1,344],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($V41,[2,116]),{11:[1,345],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($V41,[2,118]),{11:[1,346],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($V41,[2,120]),{11:[1,347],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($V41,[2,122]),{11:[1,348],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:$Ve,18:83,31:$Vf,32:349,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{41:[1,350],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($V91,[2,94],{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31}),o($V41,[2,80]),{18:83,31:$Vf,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,55:351,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,108:$VJ,109:$VK},o($V41,[2,85]),o($Vz1,[2,86],{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31}),o($Vz1,[2,87],{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31}),o($Vz1,[2,88],{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31}),o($V41,[2,90]),{11:[1,352],41:$Va1},o($V41,[2,92]),o($VA1,[2,165]),o($VA1,[2,166]),o($VL,[2,147]),o($Vt1,[2,151],{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31}),o($VL,[2,39]),{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:353,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:354,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{12:[1,355]},{27:356,34:[1,357],48:$V3,49:$V4,50:$V5,51:$V6,52:$V7},{11:[2,170],41:$Vu1},{34:[1,358]},o($VB1,[2,176],{34:[1,359]}),{14:[1,360]},o([14,121,123],[2,25],{60:10,27:11,113:267,114:268,124:269,125:270,126:271,15:322,16:323,17:324,18:325,20:327,21:328,22:329,23:330,19:$Vw1,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,115:$Vk1,120:$Vl1,127:$Vm1,128:$Vn1,129:$Vo1}),{11:[2,168],41:$Vu1},o($VL,[2,56]),{10:$Ve,18:83,31:$Vf,32:361,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($VC1,[2,138],{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31}),o($VL,[2,58]),o([5,34,37,48,49,50,51,52],[2,6]),o($Vx1,[2,7]),o($Vx1,[2,8]),o($Vx1,[2,9]),o($Vx1,[2,10]),o($Vx1,[2,11]),o($Vx1,[2,12]),o($Vx1,[2,13]),o($Vx1,[2,14]),o($Vx1,[2,15]),{10:$Ve,18:83,31:$Vf,32:362,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:363,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{33:364,42:$Va,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($Vy1,[2,178]),o($Vx1,[2,179]),o($Vx1,[2,180]),{10:$Ve,18:83,31:$Vf,32:365,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:366,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:367,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:368,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{15:369,17:370,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10},{130:[1,371]},o([11,12,41,42,54,99,100],[2,130],{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21}),o($V41,[2,115]),o($V41,[2,117]),o($V41,[2,119]),o($V41,[2,121]),o($V41,[2,123]),{11:[1,372],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{10:$Ve,18:83,31:$Vf,32:373,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{11:[1,374]},o($V41,[2,91]),{14:[1,375]},{14:[1,376]},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:377,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{34:[1,378]},o($VB1,[2,173],{34:[1,379]}),o($VB1,[2,174]),o($VB1,[2,175]),o($VL,[2,44]),o($VC1,[2,137],{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31}),{11:[1,380],41:$Vd1,45:381,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{11:[1,382],41:$Vd1,45:383,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($Vy1,[2,177]),{11:[1,384],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{11:[1,385],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{11:[1,386],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{14:[1,387]},{10:$Ve,18:83,31:$Vf,32:388,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:389,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{10:$Ve,18:83,31:$Vf,32:390,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},o($V41,[2,124]),{11:[1,391],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($V41,[2,82]),o($VL,[2,41]),o($VL,[2,42]),{14:[1,392]},o($VB1,[2,171]),o($VB1,[2,172]),{33:393,42:$Va},{11:[1,394],41:$Vv1},{33:395,42:$Va},{11:[1,396],41:$Vv1},{12:[1,397],15:399,16:400,17:401,18:402,21:403,23:404,26:398,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{12:[1,405]},{12:[1,406]},{127:[1,407]},{42:[1,408],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{42:[1,409],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{12:[1,410],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},o($V41,[2,125]),o($VL,[2,43]),o($Vy1,[2,133]),{33:411,42:$Va},o($Vy1,[2,134]),{33:412,42:$Va},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:413,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},o($Vx1,[2,186],{116:414,117:415,118:$VD1,119:$VE1}),o($Vy1,[2,32]),o($Vy1,[2,33]),o($Vy1,[2,34]),o($Vy1,[2,35]),o($Vy1,[2,36]),o($Vy1,[2,37]),{121:[1,418]},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:419,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{10:[1,420]},{34:[1,421]},{34:[1,422]},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:423,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},o($Vy1,[2,135]),o($Vy1,[2,136]),{14:[1,424]},o($Vx1,[2,187],{118:$VF1}),o($Vx1,[2,188]),{10:[1,426]},{12:[1,427],15:399,16:400,17:401,18:402,21:403,23:404,26:428,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{10:$Ve,18:83,31:$Vf,32:429,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{14:[1,430]},{10:$Ve,18:83,31:$Vf,32:431,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{83:[1,432]},{84:[1,433]},{14:[1,434]},o($Vx1,[2,183],{116:435,117:436,118:$VD1,119:$VE1}),{10:[1,437]},{10:$Ve,18:83,31:$Vf,32:438,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:439,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},o($VG1,[2,194]),{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31,100:[1,440]},o($Vy1,[2,204]),{11:[1,441],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{11:[1,442]},{11:[1,443]},o($Vy1,[2,208]),o($Vx1,[2,184],{118:$VF1}),o($Vx1,[2,185]),{10:$Ve,18:83,31:$Vf,32:444,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{11:[1,445],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{14:[1,446]},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:447,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{42:[1,448]},{12:[1,449]},{12:[1,450]},{11:[1,451],74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31},{12:[1,452]},o($VG1,[2,193]),{14:[1,453],121:[1,456],122:454,123:[1,455]},o($Vy1,[2,205]),{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:457,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:458,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{12:[1,459]},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:460,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},o($Vx1,[2,195]),{14:[1,461],121:[1,462]},{100:[1,463]},{10:$Ve,18:83,31:$Vf,32:464,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{14:[1,465]},{14:[1,466]},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:467,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{14:[1,468]},o($Vx1,[2,196]),{10:$Ve,18:83,31:$Vf,32:469,34:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,53:$Vl,55:63,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:69,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VA,86:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,108:$VJ,109:$VK},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:470,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31,100:[1,471]},o($Vy1,[2,206]),o($Vy1,[2,207]),{14:[1,472]},o($VG1,[2,192],{117:473,119:$VE1}),{74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,87:$V_,88:$V$,96:$V01,97:$V11,98:$V21,99:$V31,100:[1,474]},{14:[1,475]},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:476,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},o($VG1,[2,189],{117:477,119:$VE1}),o($VG1,[2,191]),{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:478,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},o($Vx1,[2,197]),o($VH1,[2,200]),o($VG1,[2,190]),o($VH1,[2,198],{123:[1,479]}),{100:[1,480]},{13:315,15:253,16:254,17:255,18:256,19:$Ve1,20:259,21:258,22:260,23:261,24:481,27:11,34:$V1,48:$V3,49:$V4,50:$V5,51:$V6,52:$V7,60:10,101:$Vf1,102:$Vg1,108:$VJ,109:$VK,110:$Vh1,111:$Vi1,112:$Vj1,113:267,114:268,115:$Vk1,120:$Vl1,124:269,125:270,126:271,127:$Vm1,128:$Vn1,129:$Vo1},o($VH1,[2,199])],
defaultActions: {18:[2,1],104:[2,69]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	//para el objeto de impresion
	function FImpresion(_tipoimpresion,_valorimpresion,_raro){
		return {tipo:_tipoimpresion, valor:_valorimpresion,What:_raro};
	}

	//para declaraciones de funciones
	function FDeclaracion(_tipo,_nombre,_valor){
		return {tipo:_tipo,nombre:_nombre,valorvar:_valor};
	}

	//almacenamiento de errores
	function FErrores(_tipo,_caracter,_fila,_columna,_descrip){
		return{tipo:_tipo,Caracter:_caracter,Fila:_fila,Columna:_columna,Descripcion:_descrip};
	}

	var GexpresionSwitch ;


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://return 'TK_COMENTARIO';// comentario simple línea
break;
case 1://return 'TK_COMENTARIO_MULTI';//; comentario multiple líneas
break;
case 2:return 56;
break;
case 3:return 49;
break;
case 4:return 51;
break;
case 5:return 50;
break;
case 6:return 52;
break;
case 7:return 48;
break;
case 8:return 37;
break;
case 9:return 95;
break;
case 10:return 94;
break;
case 11:return 90;
break;
case 12:return 91;
break;
case 13:return 93;
break;
case 14:return 92;
break;
case 15:return 65;
break;
case 16:return 67;
break;
case 17:return 69;
break;
case 18:return 68;
break;
case 19:return 66;
break;
case 20:return 101;
break;
case 21:return 102;
break;
case 22:return 30;
break;
case 23:return 108;
break;
case 24:return 109;
break;
case 25:return 70;
break;
case 26:return 'TK_FUNCTION';
break;
case 27:return 110;
break;
case 28:return 115;
break;
case 29:return 118;
break;
case 30:return 119;
break;
case 31:return 120;
break;
case 32:return 121;
break;
case 33:return 123;
break;
case 34:return 111;
break;
case 35:return 127;
break;
case 36:return 128;
break;
case 37:return 129;
break;
case 38:return 130;
break;
case 39:return 105;
break;
case 40:return 106;
break;
case 41:return 63;
break;
case 42:return 64;
break;
case 43:return 112;
break;
case 44:return 57;
break;
case 45:return 58;
break;
case 46:return 9;
break;
case 47:return 8;
break;
case 48:return 83
break;
case 49:return 84
break;
case 50:return 85;
break;
case 51:return 74;
break;
case 52:return 87;
break;
case 53:return 88;
break;
case 54:return 98
break;
case 55:return 10;
break;
case 56:return 11;
break;
case 57:return 12;
break;
case 58:return 14;
break;
case 59:return 53;
break;
case 60:return 54;
break;
case 61:return 100;
break;
case 62:return 42;
break;
case 63:return 41;
break;
case 64:return 29;
break;
case 65:return 81;
break;
case 66:return 43;
break;
case 67:return 82;
break;
case 68:return 77;
break;
case 69:return 78;
break;
case 70:return 80;
break;
case 71:return 79;
break;
case 72:return 75;
break;
case 73:return 76;
break;
case 74:return 89;
break;
case 75:return 96;
break;
case 76:return 97;
break;
case 77:return 86;
break;
case 78:return 'TK_dolar';
break;
case 79:return 99;
break;
case 80://return 'TK_SALTO_LINEA'
break;
case 81:// se ignoran espacios en blanco
break;
case 82:return 62; 
break;
case 83:return 61;   
break;
case 84:return 31;
break;
case 85:return 59;
break;
case 86:return 34;
break;
case 87:return 5;
break;
case 88:lisErr.push({err: 'Error Lexico', lex: yy_.yytext, fil: yy_.yylloc.first_line, col: yy_.yylloc.first_column, des:'Simbolo Desconocido'}); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*(\*(?!\/)|[^*])*\*\/\n)/i,/^(?:null\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:struct\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:log10\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:subString\b)/i,/^(?:length\b)/i,/^(?:toUppercase\b)/i,/^(?:toLowercase\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:parse\b)/i,/^(?:toInt\b)/i,/^(?:toDouble\b)/i,/^(?:typeof\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:else if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:continue\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}